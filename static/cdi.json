{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the API exposed by the SuperTokens Core. To be consumed by your backend only.\n\n`appid-{appId}` and `{tenantId}` in all the APIs are optional. Their default values are `appid-public` and `public` respectively.\n\nThose that do not have `{tenantId}` in the path will enforce that the API is called from `public` tenant only.\n",
    "version": "5.1.1",
    "title": "Core Driver Interface",
    "contact": {
      "email": "support@supertokens.io"
    }
  },
  "tags": [
    {
      "name": "EmailPassword Recipe"
    },
    {
      "name": "ThirdParty Recipe"
    },
    {
      "name": "Passwordless Recipe"
    },
    {
      "name": "EmailVerification Recipe"
    },
    {
      "name": "User Metadata Recipe"
    },
    {
      "name": "User Roles Recipe"
    },
    {
      "name": "UserIdMapping Recipe"
    },
    {
      "name": "Session Recipe"
    },
    {
      "name": "Multitenancy Recipe"
    },
    {
      "name": "Core"
    },
    {
      "name": "Dashboard Recipe"
    },
    {
      "name": "Totp Recipe"
    },
    {
      "name": "Account Linking Recipe"
    },
    {
      "name": "WebAuthn Recipe"
    },
    {
      "name": "JWT Recipe"
    },
    {
      "name": "Bulk Import"
    }
  ],
  "paths": {
    "/appid-{appId}/recipe/accountlinking/user/primary/check": {
      "get": {
        "tags": ["Account Linking Recipe"],
        "operationId": "canCreatePrimaryUser",
        "summary": "Check primary user creation possibility",
        "description": "Check if primary user can be created for given user id\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "accountlinking",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "recipeUserId",
            "schema": {
              "type": "string",
              "description": "The recipe user ID to check",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates success with the status and canCreatePrimaryUser properties",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Primary User Check Success",
                      "description": "Response when user can be created as primary",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "wasAlreadyAPrimaryUser": {
                          "type": "boolean",
                          "description": "Indicates if the user was already a primary user",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Account Info Already Associated Error",
                      "description": "Response when account info is already associated with another primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                        },
                        "primaryUserId": {
                          "type": "string",
                          "description": "The ID of the primary user that already has this account info",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "description": {
                          "type": "string",
                          "description": "Error description"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Recipe User Already Linked Error",
                      "description": "Response when recipe user is already linked with a primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RECIPE_USER_ID_ALREADY_LINKED_WITH_PRIMARY_USER_ID_ERROR"]
                        },
                        "primaryUserId": {
                          "type": "string",
                          "description": "The ID of the primary user this recipe user is already linked to",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "description": {
                          "type": "string",
                          "description": "Error description"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/accountlinking/user/link/check": {
      "get": {
        "tags": ["Account Linking Recipe"],
        "operationId": "canLinkAccounts",
        "summary": "Check account linking possibility",
        "description": "Check if accounts can be linked for given primary and recipe user id\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "accountlinking",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "primaryUserId",
            "schema": {
              "type": "string",
              "description": "The primary user ID to check",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "recipeUserId",
            "schema": {
              "type": "string",
              "description": "The recipe user ID to check",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates success with the status prop",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Account Linking Check Success",
                      "description": "Response when accounts can be linked",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "accountsAlreadyLinked": {
                          "type": "boolean",
                          "description": "Indicates if accounts are already linked",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Account Info Already Associated Error",
                      "description": "Response when account info is already associated with another primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                        },
                        "primaryUserId": {
                          "type": "string",
                          "description": "The ID of the primary user that already has this account info",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "description": {
                          "type": "string",
                          "description": "Error description"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Recipe User Already Linked Error",
                      "description": "Response when recipe user is already linked with another primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RECIPE_USER_ID_ALREADY_LINKED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                        },
                        "primaryUserId": {
                          "type": "string",
                          "description": "The ID of the primary user this recipe user is already linked to",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "description": {
                          "type": "string",
                          "description": "Error description"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Not Primary User Error",
                      "description": "Response when input user is not a primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INPUT_USER_IS_NOT_A_PRIMARY_USER"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/accountlinking/user/primary": {
      "post": {
        "tags": ["Account Linking Recipe"],
        "operationId": "createPrimaryUser",
        "summary": "Create primary user account",
        "description": "Create a primary user for given user id\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "accountlinking",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipeUserId": {
                    "type": "string",
                    "description": "The recipe user ID to create as primary user",
                    "example": "fa7a0841-b533-4478-9253-0fde890c576"
                  }
                },
                "required": ["recipeUserId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status and primaryUserId properties",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Primary User Creation Success",
                      "description": "Response when primary user is created successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "wasAlreadyAPrimaryUser": {
                          "type": "boolean",
                          "description": "Indicates if the user was already a primary user",
                          "example": true
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Account Info Already Associated Error",
                      "description": "Response when account info is already associated with another primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                        },
                        "primaryUserId": {
                          "type": "string",
                          "description": "The ID of the primary user that already has this account info",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "description": {
                          "type": "string",
                          "description": "Error description"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Recipe User Already Linked Error",
                      "description": "Response when recipe user is already linked with a primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RECIPE_USER_ID_ALREADY_LINKED_WITH_PRIMARY_USER_ID_ERROR"]
                        },
                        "primaryUserId": {
                          "type": "string",
                          "description": "The ID of the primary user this recipe user is already linked to",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "description": {
                          "type": "string",
                          "description": "Error description"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/accountlinking/user/link": {
      "post": {
        "tags": ["Account Linking Recipe"],
        "operationId": "linkAccounts",
        "summary": "Link user accounts together",
        "description": "Link accounts for given primary and recipe user id\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "accountlinking",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "primaryUserId": {
                    "type": "string",
                    "description": "The primary user ID to link with",
                    "example": "fa7a0841-b533-4478-9253-0fde890c576"
                  },
                  "recipeUserId": {
                    "type": "string",
                    "description": "The recipe user ID to link",
                    "example": "fa7a0841-b533-4478-9253-0fde890c576"
                  }
                },
                "required": ["primaryUserId", "recipeUserId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status and accountsAlreadyLinked properties",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Account Linking Success",
                      "description": "Response when accounts are linked successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "accountsAlreadyLinked": {
                          "type": "boolean",
                          "description": "Indicates if accounts were already linked",
                          "example": true
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Account Info Already Associated Error",
                      "description": "Response when account info is already associated with another primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                        },
                        "primaryUserId": {
                          "type": "string",
                          "description": "The ID of the primary user that already has this account info",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "description": {
                          "type": "string",
                          "description": "Error description"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Recipe User Already Linked Error",
                      "description": "Response when recipe user is already linked with another primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RECIPE_USER_ID_ALREADY_LINKED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                        },
                        "primaryUserId": {
                          "type": "string",
                          "description": "The ID of the primary user this recipe user is already linked to",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Error description"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Not Primary User Error",
                      "description": "Response when input user is not a primary user",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INPUT_USER_IS_NOT_A_PRIMARY_USER"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/accountlinking/user/unlink": {
      "post": {
        "tags": ["Account Linking Recipe"],
        "operationId": "unlinkAccounts",
        "summary": "Unlink user accounts",
        "description": "Unlink accounts for given recipe user id\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "accountlinking",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipeUserId": {
                    "type": "string",
                    "description": "The recipe user ID to unlink",
                    "example": "fa7a0841-b533-4478-9253-0fde890c576"
                  }
                },
                "required": ["recipeUserId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status and accountsUnlinked properties",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Account Unlinking Success",
                      "description": "Response when accounts are unlinked successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "wasRecipeUserDeleted": {
                          "type": "boolean",
                          "description": "Indicates if the recipe user was deleted",
                          "example": true
                        },
                        "wasLinked": {
                          "type": "boolean",
                          "description": "Indicates if the accounts were linked",
                          "example": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/totp/device": {
      "post": {
        "tags": ["Totp Recipe"],
        "operationId": "createTotpDevice",
        "summary": "Add TOTP device for user",
        "description": "Add a TOTP device for a user and enable TOTP if not already enabled.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "deviceName": {
                    "type": "string",
                    "description": "Name of the TOTP device",
                    "example": "My Authy App"
                  },
                  "skew": {
                    "type": "number",
                    "description": "Time skew in seconds for TOTP validation",
                    "example": 0
                  },
                  "period": {
                    "type": "number",
                    "description": "Time period in seconds for TOTP code generation",
                    "example": 30
                  }
                },
                "required": ["userId", "skew", "period"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status and secret properties",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "TOTP Device Creation Success",
                      "description": "Response when TOTP device is created successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "secret": {
                          "type": "string",
                          "description": "The TOTP secret key for the device",
                          "example": "JBSWY3DPEHPK3PXP"
                        },
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the created TOTP device",
                          "example": "d1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Device Already Exists Error",
                      "description": "Response when TOTP device already exists",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["DEVICE_ALREADY_EXISTS_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Totp Recipe"],
        "operationId": "updateTotpDeviceName",
        "summary": "Update TOTP device name",
        "description": "Update the name of a TOTP device for a user.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "existingDeviceName": {
                    "type": "string",
                    "description": "Current name of the TOTP device",
                    "example": "My Authy App"
                  },
                  "newDeviceName": {
                    "type": "string",
                    "description": "New name for the TOTP device",
                    "example": "A better name for my TOTP device"
                  }
                },
                "required": ["userId", "existingDeviceName", "newDeviceName"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Device Name Update Success",
                      "description": "Response when TOTP device name is updated successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Unknown Device Error",
                      "description": "Response when TOTP device is not found",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_DEVICE_ERROR"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Device Already Exists Error",
                      "description": "Response when new device name already exists",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["DEVICE_ALREADY_EXISTS_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/totp/device/list": {
      "get": {
        "tags": ["Totp Recipe"],
        "operationId": "getTotpDevices",
        "summary": "List user TOTP devices",
        "description": "Retrieve a list of TOTP devices for a user.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string",
              "description": "The user ID to get TOTP devices for"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Retrives all TOTP devices",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "TOTP Devices List",
                      "description": "Response containing list of TOTP devices",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "devices": {
                          "type": "array",
                          "description": "List of TOTP devices",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the TOTP device"
                              },
                              "period": {
                                "type": "number",
                                "description": "Time period in seconds for TOTP code generation"
                              },
                              "skew": {
                                "type": "number",
                                "description": "Time skew in seconds for TOTP validation"
                              },
                              "verified": {
                                "type": "boolean",
                                "description": "Whether the device has been verified"
                              }
                            }
                          }
                        }
                      },
                      "required": ["status"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/totp/device/import": {
      "post": {
        "tags": ["Totp Recipe"],
        "operationId": "importTotpDevice",
        "summary": "Import existing TOTP device",
        "description": "Add a TOTP device for a user and enable TOTP if not already enabled.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "deviceName": {
                    "type": "string",
                    "description": "Name of the TOTP device",
                    "example": "My Authy App"
                  },
                  "skew": {
                    "type": "number",
                    "description": "Time skew in seconds for TOTP validation",
                    "example": 0
                  },
                  "period": {
                    "type": "number",
                    "description": "Time period in seconds for TOTP code generation",
                    "example": 30
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "The TOTP secret key for the device",
                    "example": "BSWY3DPEMOWNFUWJLDIWNDNDPONBIUFG"
                  }
                },
                "required": ["userId", "skew", "period", "secretKey"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status and secret properties",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "TOTP Device Import Success",
                      "description": "Response when TOTP device is imported successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the imported TOTP device",
                          "example": "d1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Device Already Exists Error",
                      "description": "Response when TOTP device already exists",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["DEVICE_ALREADY_EXISTS_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/totp/device/remove": {
      "post": {
        "tags": ["Totp Recipe"],
        "operationId": "removeTotpDevice",
        "summary": "Remove TOTP device",
        "description": "Remove a TOTP device for a user. If all devices are removed, TOTP is disabled for the user.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "deviceName": {
                    "type": "string",
                    "description": "Name of the TOTP device to remove",
                    "example": "My Authy App"
                  }
                },
                "required": ["userId", "deviceName"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "TOTP Device Removal Success",
                      "description": "Response when TOTP device is removed successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "didDeviceExist": {
                          "type": "boolean",
                          "description": "Indicates if the device existed before removal",
                          "example": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/totp/verify": {
      "post": {
        "tags": ["Totp Recipe"],
        "operationId": "verifyTotpCode",
        "summary": "Verify TOTP code",
        "description": "Check if a TOTP code is valid against any of the TOTP devices for a user.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "totp": {
                    "type": "string",
                    "description": "The TOTP code to verify",
                    "example": "123456"
                  },
                  "allowUnverifiedDevices": {
                    "type": "boolean",
                    "description": "Whether to allow verification against unverified devices",
                    "example": false
                  }
                },
                "required": ["userId", "totp", "allowUnverifiedDevices"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "TOTP Verification Success",
                      "description": "Response when TOTP code is valid",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Invalid TOTP Error",
                      "description": "Response when TOTP code is invalid",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_TOTP_ERROR"]
                        },
                        "currentNumberOfFailedAttempts": {
                          "type": "number",
                          "description": "Current number of failed verification attempts",
                          "example": 2
                        },
                        "maxNumberOfFailedAttempts": {
                          "type": "number",
                          "description": "Maximum allowed failed verification attempts",
                          "example": 5
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Unknown User Error",
                      "description": "Response when user ID is not found",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_USER_ID_ERROR"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Rate Limit Error",
                      "description": "Response when rate limit is reached",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["LIMIT_REACHED_ERROR"]
                        },
                        "retryAfterMs": {
                          "type": "number",
                          "description": "Time in milliseconds to wait before retrying",
                          "example": 90000
                        },
                        "currentNumberOfFailedAttempts": {
                          "type": "number",
                          "description": "Current number of failed verification attempts",
                          "example": 2
                        },
                        "maxNumberOfFailedAttempts": {
                          "type": "number",
                          "description": "Maximum allowed failed verification attempts",
                          "example": 5
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/totp/device/verify": {
      "post": {
        "tags": ["Totp Recipe"],
        "operationId": "verifyTotpDevice",
        "summary": "Verify TOTP device",
        "description": "Mark a TOTP device as verified if the given TOTP code is valid for that device.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "deviceName": {
                    "type": "string",
                    "description": "Name of the TOTP device to verify",
                    "example": "My Authy App"
                  },
                  "totp": {
                    "type": "string",
                    "description": "The TOTP code to verify",
                    "example": "123456"
                  }
                },
                "required": ["userId", "deviceName", "totp"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Device Verification Success",
                      "description": "Response when TOTP device is verified successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "wasAlreadyVerified": {
                          "type": "boolean",
                          "description": "Indicates if the device was already verified",
                          "example": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Unknown Device Error",
                      "description": "Response when TOTP device is not found",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_DEVICE_ERROR"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Invalid TOTP Error",
                      "description": "Response when TOTP code is invalid",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_TOTP_ERROR"]
                        },
                        "currentNumberOfFailedAttempts": {
                          "type": "number",
                          "description": "Current number of failed verification attempts",
                          "example": 2
                        },
                        "maxNumberOfFailedAttempts": {
                          "type": "number",
                          "description": "Maximum allowed failed verification attempts",
                          "example": 5
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Rate Limit Error",
                      "description": "Response when rate limit is reached",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["LIMIT_REACHED_ERROR"]
                        },
                        "retryAfterMs": {
                          "type": "number",
                          "description": "Time in milliseconds to wait before retrying",
                          "example": 90000
                        },
                        "currentNumberOfFailedAttempts": {
                          "type": "number",
                          "description": "Current number of failed verification attempts",
                          "example": 2
                        },
                        "maxNumberOfFailedAttempts": {
                          "type": "number",
                          "description": "Maximum allowed failed verification attempts",
                          "example": 5
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/userid/map": {
      "post": {
        "tags": ["UserIdMapping Recipe"],
        "operationId": "userIdMappingCreateMapping",
        "summary": "Create user ID mapping",
        "description": "Create a mapping between a SuperTokens userId and an external userId.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "useridmapping",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "superTokensUserId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "externalUserId": {
                    "type": "string",
                    "description": "The external user ID to map to",
                    "example": "externalId"
                  },
                  "externalUserIdInfo": {
                    "type": "string",
                    "description": "Additional information about the external user ID",
                    "example": "Info about external userId"
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Whether to force create the mapping even if it exists"
                  }
                },
                "required": ["superTokensUserId", "externalUserId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_SUPERTOKENS_USER_ID_ERROR"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["USER_ID_MAPPING_ALREADY_EXISTS_ERROR"]
                        },
                        "doesSuperTokensUserIdExist": {
                          "type": "boolean"
                        },
                        "doesExternalUserIdExist": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["UserIdMapping Recipe"],
        "operationId": "userIdMappingGetMapping",
        "summary": "Get user ID mapping",
        "description": "Retrieve a UserIdMapping\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "useridmapping",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string",
              "description": "The user ID to get mapping for"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "userIdType",
            "schema": {
              "type": "string",
              "description": "Type of user ID to search for",
              "enum": ["SUPERTOKENS", "EXTERNAL", "ANY"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrives a userId mapping",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "User ID Mapping Found",
                      "description": "Response containing the user ID mapping",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "superTokensUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "externalUserId": {
                          "type": "string",
                          "description": "The external user ID",
                          "example": "externalId"
                        },
                        "externalUserIdInfo": {
                          "type": "string",
                          "description": "Additional information about the external user ID",
                          "example": "Info about external userId"
                        }
                      },
                      "required": ["status", "superTokensUserId", "externalUserId"]
                    },
                    {
                      "type": "object",
                      "title": "Unknown Mapping Error",
                      "description": "Response when user ID mapping is not found",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_MAPPING_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/userid/map/remove": {
      "post": {
        "tags": ["UserIdMapping Recipe"],
        "operationId": "userIdMappingRemoveMapping",
        "summary": "Remove user ID mapping",
        "description": "Delete a mapping between a SuperTokens userId and an external userId.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "useridmapping",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "userIdType": {
                    "type": "string",
                    "description": "Type of user ID to remove mapping for",
                    "enum": ["SUPERTOKENS", "EXTERNAL", "ANY"]
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Whether to force remove the mapping"
                  }
                },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "User ID Mapping Removal Success",
                  "description": "Response when user ID mapping is removed successfully",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "didMappingExist": {
                      "type": "boolean",
                      "description": "Indicates if the mapping existed before removal"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/userid/external-user-id-info": {
      "put": {
        "tags": ["UserIdMapping Recipe"],
        "operationId": "userIdMappingUpateExternalUserIdInfo",
        "summary": "Update external user info",
        "description": "Update or delete externalUserIdInfo\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "useridmapping",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "userIdType": {
                    "type": "string",
                    "description": "Type of user ID to update info for",
                    "enum": ["SUPERTOKENS", "EXTERNAL", "ANY"]
                  },
                  "externalUserIdInfo": {
                    "type": "string",
                    "description": "New external user ID information",
                    "example": "new external userId info",
                    "nullable": true
                  }
                },
                "required": ["userId", "externalUserIdInfo"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "External User Info Update Success",
                      "description": "Response when external user info is updated successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Unknown Mapping Error",
                      "description": "Response when user ID mapping is not found",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_MAPPING_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/signinup/code/check": {
      "post": {
        "tags": ["Passwordless Recipe"],
        "operationId": "passwordlessCheckCode",
        "summary": "Check passwordless code",
        "description": "Tries to check if the passed userInputCode+deviceId combo or the linkCode is valid\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Link Code Check",
                    "description": "Request to check a link code",
                    "properties": {
                      "preAuthSessionId": {
                        "type": "string",
                        "description": "A random identifier that can be used to identify the login attempt/device.",
                        "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                      },
                      "linkCode": {
                        "type": "string",
                        "description": "URL-safe string that can be used to authenticate the user, without the deviceId",
                        "example": "b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8"
                      }
                    },
                    "required": ["preAuthSessionId", "linkCode"]
                  },
                  {
                    "type": "object",
                    "title": "User Input Code Check",
                    "description": "Request to check a user input code",
                    "properties": {
                      "preAuthSessionId": {
                        "type": "string",
                        "description": "A random identifier that can be used to identify the login attempt/device.",
                        "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                      },
                      "deviceId": {
                        "type": "string",
                        "description": "A random identifier that should be stored on the device that started the sign in process.",
                        "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
                      },
                      "userInputCode": {
                        "type": "string",
                        "description": "This can be used to authenticate the user when paired with the deviceId",
                        "example": 456123
                      }
                    },
                    "required": ["preAuthSessionId", "deviceId", "userInputCode"]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code Check Success",
                      "description": "Response when code is valid",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "consumedDevice": {
                          "type": "object",
                          "description": "Information about the consumed device",
                          "required": ["preAuthSessionId", "failedCodeInputAttemptCount"],
                          "properties": {
                            "preAuthSessionId": {
                              "type": "string",
                              "description": "A random identifier that can be used to identify the login attempt/device.",
                              "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                            },
                            "failedCodeInputAttemptCount": {
                              "type": "number",
                              "description": "Number of failed code input attempts",
                              "example": 2
                            },
                            "email": {
                              "type": "string",
                              "example": "johndoe@gmail.com"
                            },
                            "phoneNumber": {
                              "type": "string",
                              "example": "+14155552671"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Invalid Code Error",
                      "description": "Response when code is invalid or expired",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INCORRECT_USER_INPUT_CODE_ERROR", "EXPIRED_USER_INPUT_CODE_ERROR"]
                        },
                        "failedCodeInputAttemptCount": {
                          "type": "number",
                          "description": "Number of failed code input attempts",
                          "example": 2
                        },
                        "maximumCodeInputAttempts": {
                          "type": "number",
                          "description": "Maximum allowed code input attempts",
                          "example": 5
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Restart Flow Error",
                      "description": "Response when flow needs to be restarted",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RESTART_FLOW_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/signinup/code/consume": {
      "post": {
        "tags": ["Passwordless Recipe"],
        "operationId": "passwordlessTryUseCode",
        "summary": "Consume passwordless code",
        "description": "Tries to consume the passed userInputCode+deviceId combo or the linkCode to sign the user in\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Link Code Consume",
                    "description": "Request to consume a link code",
                    "properties": {
                      "preAuthSessionId": {
                        "type": "string",
                        "description": "A random identifier that can be used to identify the login attempt/device.",
                        "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                      },
                      "linkCode": {
                        "type": "string",
                        "description": "URL-safe string that can be used to authenticate the user, without the deviceId",
                        "example": "b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8"
                      }
                    },
                    "required": ["preAuthSessionId", "linkCode"]
                  },
                  {
                    "type": "object",
                    "title": "User Input Code Consume",
                    "description": "Request to consume a user input code",
                    "properties": {
                      "preAuthSessionId": {
                        "type": "string",
                        "description": "A random identifier that can be used to identify the login attempt/device.",
                        "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                      },
                      "deviceId": {
                        "type": "string",
                        "description": "A random identifier that should be stored on the device that started the sign in process.",
                        "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
                      },
                      "userInputCode": {
                        "type": "string",
                        "description": "This can be used to authenticate the user when paired with the deviceId",
                        "example": 456123
                      }
                    },
                    "required": ["preAuthSessionId", "deviceId", "userInputCode"]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code Consume Success",
                      "description": "Response when code is consumed successfully",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "createdNewUser": {
                          "type": "boolean",
                          "description": "Indicates if a new user was created",
                          "example": true
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "recipeUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "consumedDevice": {
                          "type": "object",
                          "description": "Information about the consumed device",
                          "required": ["preAuthSessionId", "failedCodeInputAttemptCount"],
                          "properties": {
                            "preAuthSessionId": {
                              "type": "string",
                              "description": "A random identifier that can be used to identify the login attempt/device.",
                              "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                            },
                            "failedCodeInputAttemptCount": {
                              "type": "number",
                              "description": "Number of failed code input attempts",
                              "example": 2
                            },
                            "email": {
                              "type": "string",
                              "example": "johndoe@gmail.com"
                            },
                            "phoneNumber": {
                              "type": "string",
                              "example": "+14155552671"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Invalid Code Error",
                      "description": "Response when code is invalid or expired",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INCORRECT_USER_INPUT_CODE_ERROR", "EXPIRED_USER_INPUT_CODE_ERROR"]
                        },
                        "failedCodeInputAttemptCount": {
                          "type": "number",
                          "description": "Number of failed code input attempts",
                          "example": 2
                        },
                        "maximumCodeInputAttempts": {
                          "type": "number",
                          "description": "Maximum allowed code input attempts",
                          "example": 5
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Restart Flow Error",
                      "description": "Response when flow needs to be restarted",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RESTART_FLOW_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/signinup/code": {
      "post": {
        "tags": ["Passwordless Recipe"],
        "operationId": "passwordlessStartSignIn",
        "summary": "Start passwordless sign in",
        "description": "Starts a sign in process by requesting a linkCode and a deviceId + userInputCode combination the user can use to sign in.\nPassing the optional deviceId signifies a resend code flow.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Email Sign In",
                    "description": "Request to start email-based sign in",
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "johndoe@gmail.com"
                      },
                      "userInputCode": {
                        "type": "string",
                        "description": "This can be used to authenticate the user when paired with the deviceId",
                        "example": 456123
                      }
                    },
                    "example": {
                      "email": "test@example.com"
                    },
                    "required": ["email"]
                  },
                  {
                    "type": "object",
                    "title": "Phone Sign In",
                    "description": "Request to start phone-based sign in",
                    "properties": {
                      "phoneNumber": {
                        "type": "string",
                        "example": "+14155552671"
                      },
                      "userInputCode": {
                        "type": "string",
                        "description": "This can be used to authenticate the user when paired with the deviceId",
                        "example": 456123
                      }
                    },
                    "required": ["phoneNumber"]
                  },
                  {
                    "type": "object",
                    "title": "Resend Code",
                    "description": "Request to resend code to existing device",
                    "properties": {
                      "deviceId": {
                        "type": "string",
                        "description": "A random identifier that should be stored on the device that started the sign in process.",
                        "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
                      },
                      "userInputCode": {
                        "type": "string",
                        "description": "This can be used to authenticate the user when paired with the deviceId",
                        "example": 456123
                      }
                    },
                    "required": ["deviceId"]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Starts the passwordless login process",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "preAuthSessionId": {
                          "type": "string",
                          "description": "A random identifier that can be used to identify the login attempt/device.",
                          "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                        },
                        "codeId": {
                          "type": "string",
                          "description": "Uniquely identifies a code",
                          "example": "QZ0Mx9zG9cfqNXmPI0I/67r9bpKghUBDQZeMMbayi+I="
                        },
                        "deviceId": {
                          "type": "string",
                          "description": "A random identifier that should be stored on the device that started the sign in process.",
                          "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
                        },
                        "userInputCode": {
                          "type": "string",
                          "description": "This can be used to authenticate the user when paired with the deviceId",
                          "example": 456123
                        },
                        "linkCode": {
                          "type": "string",
                          "description": "URL-safe string that can be used to authenticate the user, without the deviceId",
                          "example": "b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8"
                        },
                        "timeCreated": {
                          "type": "number",
                          "example": 1637262633029
                        },
                        "codeLifetime": {
                          "type": "number",
                          "description": "The maximum lifetime of the code in milliseconds",
                          "example": 900000
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RESTART_FLOW_ERROR", "USER_INPUT_CODE_ALREADY_USED_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/signinup/code/remove": {
      "post": {
        "tags": ["Passwordless Recipe"],
        "operationId": "passwordlessRevokeCode",
        "summary": "Revoke passwordless code",
        "description": "Revokes a code by id\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "codeId": {
                        "type": "string",
                        "description": "Uniquely identifies a code",
                        "example": "QZ0Mx9zG9cfqNXmPI0I/67r9bpKghUBDQZeMMbayi+I="
                      }
                    },
                    "required": ["codeId"]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "preAuthSessionId": {
                        "type": "string",
                        "description": "A random identifier that can be used to identify the login attempt/device.",
                        "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                      }
                    },
                    "required": ["preAuthSessionId"]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/signinup/codes": {
      "get": {
        "tags": ["Passwordless Recipe"],
        "operationId": "passwordlessListCodes",
        "summary": "List passwordless codes",
        "description": "Lists all active passwordless codes of the user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "Use this parameter to get information about all devices associated with an email (without the other query params)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "description": "Use this parameter to get information about all devices associated with a phoneNumber (without the other query params)",
            "schema": {
              "type": "string",
              "example": "+14155552671"
            }
          },
          {
            "in": "query",
            "name": "deviceId",
            "description": "Use this parameter to get information about a single device (without the other query params)",
            "schema": {
              "type": "string",
              "description": "A random identifier that should be stored on the device that started the sign in process.",
              "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
            }
          },
          {
            "in": "query",
            "name": "preAuthSessionId",
            "description": "Use this parameter to get information about a single device (without the other query params)",
            "schema": {
              "type": "string",
              "description": "A random identifier that can be used to identify the login attempt/device.",
              "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all active passwordless codes of the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "devices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "preAuthSessionId": {
                            "type": "string",
                            "description": "A random identifier that can be used to identify the login attempt/device.",
                            "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                          },
                          "failedCodeInputAttemptCount": {
                            "type": "number",
                            "example": 2
                          },
                          "email": {
                            "type": "string",
                            "example": "johndoe@gmail.com"
                          },
                          "phoneNumber": {
                            "type": "string",
                            "example": "+14155552671"
                          },
                          "codes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "codeId": {
                                  "type": "string",
                                  "description": "Uniquely identifies a code",
                                  "example": "QZ0Mx9zG9cfqNXmPI0I/67r9bpKghUBDQZeMMbayi+I="
                                },
                                "timeCreated": {
                                  "type": "number",
                                  "example": 1637262633029
                                },
                                "codeLifetime": {
                                  "type": "number",
                                  "description": "The maximum lifetime of the code in milliseconds",
                                  "example": 900000
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/signinup/codes/remove": {
      "post": {
        "tags": ["Passwordless Recipe"],
        "operationId": "passwordlessRevokeAllCodesOfUser",
        "summary": "Revoke all user codes",
        "description": "Revokes all codes issued for the user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "johndoe@gmail.com"
                      }
                    },
                    "required": ["email"]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "phoneNumber": {
                        "type": "string",
                        "example": "+14155552671"
                      }
                    },
                    "required": ["phoneNumber"]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user ⠀": {
      "get": {
        "tags": ["Passwordless Recipe"],
        "operationId": "passwordlessGetUser",
        "summary": "Get passwordless user",
        "deprecated": true,
        "description": "Get a user's information.\n\nAPI is tenant specific if querying by email or phone number.\nIf querying by userId, tenantId will be ignored.\n\nNote that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "Use exactly one of phoneNumber, email or userId",
            "schema": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "description": "Use exactly one of phoneNumber, email or userId",
            "schema": {
              "type": "string",
              "example": "+14155552671"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a user's information.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_USER_ID_ERROR", "UNKNOWN_EMAIL_ERROR", "UNKNOWN_PHONE_NUMBER_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Passwordless Recipe"],
        "operationId": "passwordlessPutUser",
        "summary": "Update passwordless user",
        "description": "Update a user's information.\nIf the email or phoneNumber is set to null the previous value will be deleted. If they are not set (i.e., undefined/missing from the request), they are left as-is.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipeUserId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com",
                    "nullable": true
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "+14155552671",
                    "nullable": true
                  }
                },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "update user's information",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK",
                            "UNKNOWN_USER_ID_ERROR",
                            "EMAIL_ALREADY_EXISTS_ERROR",
                            "PHONE_NUMBER_ALREADY_EXISTS_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["EMAIL_CHANGE_NOT_ALLOWED_ERROR", "PHONE_NUMBER_CHANGE_NOT_ALLOWED_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/signin": {
      "post": {
        "tags": ["EmailPassword Recipe"],
        "operationId": "emailPasswordSignin",
        "summary": "Sign in user",
        "description": "Signin a user with email ID and password\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "signin response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "recipeUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["WRONG_CREDENTIALS_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/signup": {
      "post": {
        "tags": ["EmailPassword Recipe"],
        "operationId": "emailPasswordSignup",
        "summary": "Sign up user",
        "description": "Signup a user with email ID and password\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "signup response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "recipeUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["EMAIL_ALREADY_EXISTS_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user": {
      "get": {
        "tags": ["EmailPassword Recipe"],
        "operationId": "emailPasswordGetUser",
        "summary": "Get email password user",
        "deprecated": true,
        "description": "Get a user's information\n\nAPI is tenant specific if querying by email.\nIf querying by userId, tenantId will be ignored.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "use either email or userId, not both",
            "schema": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "use either email or userId, not both",
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get user's information",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_USER_ID_ERROR", "UNKNOWN_EMAIL_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["EmailPassword Recipe"],
        "operationId": "emailPasswordPutUser",
        "summary": "Update user info",
        "description": "Update a user's information\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipeUserId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "update user's information",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK", "UNKNOWN_USER_ID_ERROR", "EMAIL_ALREADY_EXISTS_ERROR"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["EMAIL_CHANGE_NOT_ALLOWED_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/password/reset/token": {
      "post": {
        "tags": ["EmailPassword Recipe"],
        "operationId": "emailPasswordGetPasswordResetToken",
        "summary": "Generate password reset token",
        "description": "Generate a new reset password token for this user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId", "email"],
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generate a new reset password token for this user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "token": {
                          "type": "string",
                          "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_USER_ID_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/password/reset": {
      "post": {
        "tags": ["EmailPassword Recipe"],
        "operationId": "emailPasswordGetPasswordReset",
        "summary": "Reset user password",
        "deprecated": true,
        "description": "Reset a password using password reset token\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "enum": ["token"]
                  },
                  "token": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  },
                  "newPassword": {
                    "type": "string",
                    "example": "newpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset a password using password reset token",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "userId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RESET_PASSWORD_INVALID_TOKEN_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/passwordhash/import": {
      "post": {
        "tags": ["EmailPassword Recipe"],
        "operationId": "userImport",
        "summary": "Import user with hash",
        "description": "Import a user with email ID and password hash\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  },
                  "passwordHash": {
                    "type": "string",
                    "example": "$argon2d$v=19$m=12,t=3,p=1$aGI4enNvMmd0Zm0wMDAwMA$r6p7qbr6HD+8CD7sBi4HVw"
                  },
                  "hashingAlgorithm": {
                    "type": "string",
                    "enum": ["argon2", "bcrypt", "firebase_scrypt"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "import user response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "isPrimaryUser": {
                          "type": "boolean",
                          "example": true
                        },
                        "tenantIds": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "customer1"
                          }
                        },
                        "timeJoined": {
                          "type": "number",
                          "example": 1623918032231
                        },
                        "emails": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "johndoe@gmail.com"
                          }
                        },
                        "phoneNumbers": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "+14155552671"
                          }
                        },
                        "thirdParty": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "google"
                              },
                              "userId": {
                                "type": "string",
                                "example": 106347997792363870000
                              }
                            }
                          }
                        },
                        "loginMethods": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tenantIds": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "customer1"
                                }
                              },
                              "recipeUserId": {
                                "type": "string",
                                "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                              },
                              "verified": {
                                "type": "boolean",
                                "example": true
                              },
                              "timeJoined": {
                                "type": "number",
                                "example": 1623918032231
                              },
                              "recipeId": {
                                "type": "string",
                                "enum": ["emailpassword", "passwordless", "thirdparty"]
                              },
                              "email": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              },
                              "phoneNumber": {
                                "type": "string",
                                "example": "+14155552671"
                              },
                              "thirdParty": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "didUserAlreadyExist": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/password/reset/token/consume": {
      "post": {
        "tags": ["EmailPassword Recipe"],
        "operationId": "emailPasswordResetPasswordConsumeToken",
        "summary": "Consume password reset token",
        "description": "Consume a password reset token\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Consume a password reset token",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "userId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@gmail.com"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RESET_PASSWORD_INVALID_TOKEN_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/signinup": {
      "post": {
        "tags": ["ThirdParty Recipe"],
        "operationId": "thirdPartySigninup",
        "summary": "Sign in/up third party user",
        "description": "Signin/up a user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "thirdparty",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "thirdPartyId": {
                    "type": "string",
                    "example": "google"
                  },
                  "thirdPartyUserId": {
                    "type": "string",
                    "example": 106347997792363870000
                  },
                  "email": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "johndoe@gmail.com"
                      },
                      "isVerified": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signin/up a user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "createdNewUser": {
                          "type": "boolean",
                          "example": true
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "recipeUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["EMAIL_CHANGE_NOT_ALLOWED_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user⠀": {
      "get": {
        "tags": ["ThirdParty Recipe"],
        "operationId": "thirdPartyGetUser",
        "summary": "Get third party user",
        "deprecated": true,
        "description": "Get a user's information.\n\nAPI is tenant specific if querying by email.\nIf querying by userId, tenantId will be ignored.\n\nNote that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "thirdparty",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            }
          },
          {
            "in": "query",
            "name": "thirdPartyId",
            "description": "Either use userId or thirdPartyId and thirdPartyUserId",
            "schema": {
              "type": "string",
              "example": "google"
            }
          },
          {
            "in": "query",
            "name": "thirdPartyUserId",
            "description": "Either use userId or thirdPartyId and thirdPartyUserId",
            "schema": {
              "type": "string",
              "example": 106347997792363870000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a user's information.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_USER_ID_ERROR", "UNKNOWN_THIRD_PARTY_USER_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/users/by-email": {
      "get": {
        "operationId": "thirdPartyGetUsersByEmail",
        "summary": "Get users by email",
        "deprecated": true,
        "tags": ["ThirdParty Recipe"],
        "description": "Get all users accounts associated with given email\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "thirdparty",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "required": true,
            "description": "User's email",
            "schema": {
              "type": "string",
              "example": "john.doe@example.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all users associated with given email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                          },
                          "isPrimaryUser": {
                            "type": "boolean",
                            "example": true
                          },
                          "tenantIds": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "customer1"
                            }
                          },
                          "timeJoined": {
                            "type": "number",
                            "example": 1623918032231
                          },
                          "emails": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "johndoe@gmail.com"
                            }
                          },
                          "phoneNumbers": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "+14155552671"
                            }
                          },
                          "thirdParty": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "google"
                                },
                                "userId": {
                                  "type": "string",
                                  "example": 106347997792363870000
                                }
                              }
                            }
                          },
                          "loginMethods": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "tenantIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "example": "customer1"
                                  }
                                },
                                "recipeUserId": {
                                  "type": "string",
                                  "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                },
                                "verified": {
                                  "type": "boolean",
                                  "example": true
                                },
                                "timeJoined": {
                                  "type": "number",
                                  "example": 1623918032231
                                },
                                "recipeId": {
                                  "type": "string",
                                  "enum": ["emailpassword", "passwordless", "thirdparty"]
                                },
                                "email": {
                                  "type": "string",
                                  "example": "johndoe@gmail.com"
                                },
                                "phoneNumber": {
                                  "type": "string",
                                  "example": "+14155552671"
                                },
                                "thirdParty": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "example": "google"
                                    },
                                    "userId": {
                                      "type": "string",
                                      "example": 106347997792363870000
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/email/verify/token": {
      "post": {
        "tags": ["EmailVerification Recipe"],
        "operationId": "emailVerificationVerifyToken",
        "summary": "Generate email verification token",
        "description": "Generate a new email verification token for this user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailverification",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generate a new email verification token for this user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "token": {
                          "type": "string",
                          "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["EMAIL_ALREADY_VERIFIED_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/email/verify/token/remove": {
      "post": {
        "tags": ["EmailVerification Recipe"],
        "operationId": "emailVerificationVerifyTokenRemove",
        "summary": "Remove email verification tokens",
        "description": "Remove all unused email verification tokens for this user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailverification",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/email/verify": {
      "post": {
        "tags": ["EmailVerification Recipe"],
        "operationId": "emailVerificationVerify",
        "summary": "Verify email",
        "description": "Verify an email\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailverification",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "enum": ["token"]
                  },
                  "token": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verify an email",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "userId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@gmail.com"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["EMAIL_VERIFICATION_INVALID_TOKEN_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/user/email/verify": {
      "get": {
        "tags": ["EmailVerification Recipe"],
        "operationId": "emailVerificationVerifyGet",
        "summary": "Check email verification",
        "description": "Check if an email is verified\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "emailverification",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verify an email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "isVerified": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/user/email/verify/remove": {
      "post": {
        "tags": ["EmailVerification Recipe"],
        "operationId": "emailVerificationVerifyRemove",
        "summary": "Unverify email",
        "description": "Unverify an email\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "emailverification",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/user/metadata": {
      "get": {
        "tags": ["User Metadata Recipe"],
        "operationId": "userMetadataRead",
        "summary": "Get user metadata",
        "description": "Gets the stored metadata object of the user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "usermetadata",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "metadata": {
                      "type": "object",
                      "description": "should be a JSON object (not a JSON literal nor an array)",
                      "example": {
                        "preferences": {
                          "theme": "dark"
                        },
                        "notifications": {
                          "email": true
                        },
                        "todos": ["example"]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["User Metadata Recipe"],
        "operationId": "userMetadataUpdate",
        "summary": "Update user metadata",
        "description": "Updates the metadata object stored about the user by doing a shallow merge of the stored and the update JSONs\nand removing properties set to null on the root level of the update object. The merged object is then reserialized and stored.\n\ne.g.:\n  - stored: `{ \"preferences\": { \"theme\":\"dark\" }, \"notifications\": { \"email\": true }, \"todos\": [\"example\"] }`\n\n  - update: `{ \"notifications\": { \"sms\": true }, \"todos\": null }`\n\n  - result: `{ \"preferences\": { \"theme\":\"dark\" }, \"notifications\": { \"sms\": true } }`\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "usermetadata",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "metadataUpdate": {
                    "type": "object",
                    "description": "should be a JSON object (not a JSON literal nor an array)",
                    "example": {
                      "notifications": {
                        "sms": true
                      },
                      "todos": null
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "metadata": {
                      "type": "object",
                      "description": "should be a JSON object (not a JSON literal nor an array)",
                      "example": {
                        "preferences": {
                          "theme": "dark"
                        },
                        "notifications": {
                          "email": true
                        },
                        "todos": ["example"]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/user/metadata/remove": {
      "post": {
        "tags": ["User Metadata Recipe"],
        "operationId": "userMetadataDelete",
        "summary": "Remove user metadata",
        "description": "Removes the entire metadata JSON stored about the user.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "usermetadata",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/role": {
      "put": {
        "tags": ["User Roles Recipe"],
        "operationId": "addUserRole",
        "summary": "Add user role",
        "description": "Creates a User Role mapping\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "role": {
                    "type": "string",
                    "example": "admin"
                  }
                },
                "required": ["userId", "role"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "didUserAlreadyHaveRole": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_ROLE_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/role/remove": {
      "post": {
        "tags": ["User Roles Recipe"],
        "operationId": "removeUserRole",
        "summary": "Remove user role",
        "description": "Removes a User Role mapping\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "role": {
                    "type": "string",
                    "example": "admin"
                  }
                },
                "required": ["userId", "role"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "didUserHaveRole": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_ROLE_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/user/roles": {
      "get": {
        "tags": ["User Roles Recipe"],
        "operationId": "getUserRoles",
        "summary": "Get user roles",
        "description": "Retrive the roles associated with the user.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "admin"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/role/users": {
      "get": {
        "tags": ["User Roles Recipe"],
        "operationId": "getRoleUsers",
        "summary": "Get users with role",
        "description": "Retrive the users associated with the role.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "admin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "users": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_ROLE_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/role": {
      "put": {
        "tags": ["User Roles Recipe"],
        "operationId": "putRole",
        "summary": "Create or update role",
        "description": "Creates a role with permissions, can also be used to add permissions to a role\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "example": "admin"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "permission"
                    }
                  }
                },
                "required": ["role"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "createdNewRole": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/role/permissions": {
      "get": {
        "tags": ["User Roles Recipe"],
        "operationId": "getRolePermissions",
        "summary": "Get role permissions",
        "description": "Retrive the permissions associated with a role\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "admin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "permissions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "permission"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_ROLE_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/role/permissions/remove": {
      "post": {
        "tags": ["User Roles Recipe"],
        "operationId": "removeRolePermissions",
        "summary": "Remove role permissions",
        "description": "Removes permissions mapped to a role, if no permissions are passed all permissions mapped to the role are removed\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "example": "admin"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "permission"
                    }
                  }
                },
                "required": ["role"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_ROLE_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/permission/roles": {
      "get": {
        "tags": ["User Roles Recipe"],
        "operationId": "getPermissionRoles",
        "summary": "Get permission roles",
        "description": "Retrive the roles associated with the permission\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "permission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "admin"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/role/remove": {
      "post": {
        "tags": ["User Roles Recipe"],
        "operationId": "removeRole",
        "summary": "Delete role",
        "description": "Deletes a role\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "example": "admin"
                  }
                },
                "required": ["role"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "didRoleExist": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/roles": {
      "get": {
        "tags": ["User Roles Recipe"],
        "operationId": "getRoles",
        "summary": "Get all roles",
        "description": "Retrive all created roles\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "userroles",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "admin"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/session": {
      "post": {
        "tags": ["Session Recipe"],
        "operationId": "createNewSession",
        "summary": "Create new session",
        "description": "Create a new Session\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "userDataInJWT": {
                    "type": "object",
                    "description": "should be a JSON object (not a JSON literal nor an array)",
                    "example": {
                      "test": 123
                    }
                  },
                  "userDataInDatabase": {
                    "type": "object",
                    "description": "should be a JSON object (not a JSON literal nor an array)",
                    "example": {
                      "test": 123
                    }
                  },
                  "enableAntiCsrf": {
                    "type": "boolean",
                    "example": false
                  },
                  "useDynamicSigningKey": {
                    "type": "boolean",
                    "description": "Decides if the token should be signed with a dynamic or static key, defaults to true",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a new Session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "session": {
                      "type": "object",
                      "properties": {
                        "handle": {
                          "type": "string",
                          "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                        },
                        "userId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "userDataInJWT": {
                          "type": "object",
                          "description": "should be a JSON object (not a JSON literal nor an array)",
                          "example": {
                            "test": 123
                          }
                        },
                        "tenantId": {
                          "type": "string",
                          "example": "customer1"
                        },
                        "recipeUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        }
                      }
                    },
                    "accessToken": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                        },
                        "expiry": {
                          "type": "number",
                          "example": 1637262633029
                        },
                        "createdTime": {
                          "type": "number",
                          "example": 1637262633029
                        }
                      }
                    },
                    "refreshToken": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                        },
                        "expiry": {
                          "type": "number",
                          "example": 1637262633029
                        },
                        "createdTime": {
                          "type": "number",
                          "example": 1637262633029
                        }
                      }
                    },
                    "antiCsrfToken": {
                      "type": "string",
                      "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/session": {
      "get": {
        "tags": ["Session Recipe"],
        "operationId": "getSessionInfo",
        "summary": "Get session info",
        "description": "Get user and session information for a given session handle\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sessionHandle",
            "schema": {
              "type": "string",
              "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user and session information for a given session handle",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "userDataInDatabase": {
                          "type": "object",
                          "description": "should be a JSON object (not a JSON literal nor an array)",
                          "example": {
                            "test": 123
                          }
                        },
                        "userDataInJWT": {
                          "type": "object",
                          "description": "should be a JSON object (not a JSON literal nor an array)",
                          "example": {
                            "test": 123
                          }
                        },
                        "userId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "expiry": {
                          "type": "number",
                          "example": 1637262633029
                        },
                        "timeCreated": {
                          "type": "number",
                          "example": 1637262633029
                        },
                        "sessionHandle": {
                          "type": "string",
                          "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                        },
                        "tenantId": {
                          "type": "string",
                          "example": "customer1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNAUTHORISED"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Error Message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/session/remove": {
      "post": {
        "tags": ["Session Recipe"],
        "operationId": "deleteSession",
        "summary": "Delete session",
        "description": "Delete a sesion\n\nIf revoking session by `userId`, the sessions are cleared across all tenants by default.\n\nNote: If `revokeAcrossAllTenants` is set to `true`, this API can only be called from `public` tenant.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "sessionHandles": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": ["userId"],
                    "properties": {
                      "userId": {
                        "type": "string",
                        "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                      },
                      "revokeAcrossAllTenants": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delete a session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "sessionHandlesRevoked": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/session/verify": {
      "post": {
        "tags": ["Session Recipe"],
        "operationId": "verifySession",
        "summary": "Verify session",
        "description": "Verify a Session\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accessToken": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  },
                  "enableAntiCsrf": {
                    "type": "boolean",
                    "example": false
                  },
                  "doAntiCsrfCheck": {
                    "type": "boolean",
                    "example": false
                  },
                  "checkDatabase": {
                    "type": "boolean",
                    "description": "Decides if we always check if the session exists in the DB or just do token validation, defaults to false.",
                    "example": false
                  },
                  "antiCsrfToken": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verify a session",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "session": {
                          "type": "object",
                          "properties": {
                            "handle": {
                              "type": "string",
                              "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                            },
                            "userId": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "userDataInJWT": {
                              "type": "object",
                              "description": "should be a JSON object (not a JSON literal nor an array)",
                              "example": {
                                "test": 123
                              }
                            },
                            "tenantId": {
                              "type": "string",
                              "example": "customer1"
                            },
                            "recipeUserId": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            }
                          }
                        },
                        "accessToken": {
                          "type": "object",
                          "properties": {
                            "token": {
                              "type": "string",
                              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                            },
                            "expiry": {
                              "type": "number",
                              "example": 1637262633029
                            },
                            "createdTime": {
                              "type": "number",
                              "example": 1637262633029
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNAUTHORISED"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Error Message"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["TRY_REFRESH_TOKEN"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Error Message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/session/refresh": {
      "post": {
        "tags": ["Session Recipe"],
        "operationId": "refreshSession",
        "summary": "Refresh session",
        "description": "Refresh a Session\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  },
                  "enableAntiCsrf": {
                    "type": "boolean",
                    "example": false
                  },
                  "antiCsrfToken": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  },
                  "useDynamicSigningKey": {
                    "type": "boolean"
                  }
                },
                "required": ["refreshToken", "enableAntiCsrf", "useDynamicSigningKey"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refresh a session",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "session": {
                          "type": "object",
                          "properties": {
                            "handle": {
                              "type": "string",
                              "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                            },
                            "userId": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "userDataInJWT": {
                              "type": "object",
                              "description": "should be a JSON object (not a JSON literal nor an array)",
                              "example": {
                                "test": 123
                              }
                            },
                            "tenantId": {
                              "type": "string",
                              "example": "customer1"
                            },
                            "recipeUserId": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            }
                          }
                        },
                        "accessToken": {
                          "type": "object",
                          "properties": {
                            "token": {
                              "type": "string",
                              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                            },
                            "expiry": {
                              "type": "number",
                              "example": 1637262633029
                            },
                            "createdTime": {
                              "type": "number",
                              "example": 1637262633029
                            }
                          }
                        },
                        "refreshToken": {
                          "type": "object",
                          "properties": {
                            "token": {
                              "type": "string",
                              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                            },
                            "expiry": {
                              "type": "number",
                              "example": 1637262633029
                            },
                            "createdTime": {
                              "type": "number",
                              "example": 1637262633029
                            }
                          }
                        },
                        "antiCsrfToken": {
                          "type": "string",
                          "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["TOKEN_THEFT_DETECTED"]
                        },
                        "session": {
                          "type": "object",
                          "properties": {
                            "handle": {
                              "type": "string",
                              "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                            },
                            "userId": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNAUTHORISED"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Error Message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/session/user": {
      "get": {
        "tags": ["Session Recipe"],
        "operationId": "getUserSessionHandles",
        "summary": "Get user session handles",
        "description": "Get session handles for a user\n\nBy default, the session handles are fetched across all tenants. Set `fetchAcrossAllTenants` to `false` to get sessionHandles for the user for a particular tenant.\n\nNote: If `fetchAcrossAllTenants` is set to `true`, this API can only be called from `public` tenant.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            }
          },
          {
            "name": "fetchAcrossAllTenants",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            },
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get user Session Handles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "sessionHandles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/session/regenerate": {
      "post": {
        "tags": ["Session Recipe"],
        "operationId": "regenerateSession",
        "summary": "Regenerate session",
        "description": "Regenerate a session\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accessToken": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  },
                  "userDataInJWT": {
                    "type": "object",
                    "description": "should be a JSON object (not a JSON literal nor an array)",
                    "example": {
                      "test": 123
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Regenerate user session",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "session": {
                          "type": "object",
                          "properties": {
                            "handle": {
                              "type": "string",
                              "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                            },
                            "userId": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "userDataInJWT": {
                              "type": "object",
                              "description": "should be a JSON object (not a JSON literal nor an array)",
                              "example": {
                                "test": 123
                              }
                            },
                            "tenantId": {
                              "type": "string",
                              "example": "customer1"
                            },
                            "recipeUserId": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            }
                          }
                        },
                        "accessToken": {
                          "type": "object",
                          "properties": {
                            "token": {
                              "type": "string",
                              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                            },
                            "expiry": {
                              "type": "number",
                              "example": 1637262633029
                            },
                            "createdTime": {
                              "type": "number",
                              "example": 1637262633029
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNAUTHORISED"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Error Message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/session/data": {
      "get": {
        "deprecated": true,
        "tags": ["Session Recipe"],
        "operationId": "getSessionData",
        "summary": "Get session data",
        "description": "Get session data\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sessionHandle",
            "description": "Users session handle",
            "schema": {
              "type": "string",
              "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Session Data",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "userDataInDatabase": {
                          "type": "object",
                          "description": "should be a JSON object (not a JSON literal nor an array)",
                          "example": {
                            "test": 123
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNAUTHORISED"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Error Message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Session Recipe"],
        "operationId": "putSessionData",
        "summary": "Update session data",
        "description": "Change session data\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionHandle": {
                    "type": "string",
                    "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                  },
                  "userDataInDatabase": {
                    "type": "object",
                    "description": "should be a JSON object (not a JSON literal nor an array)",
                    "example": {
                      "test": 123
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change Session Data",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNAUTHORISED"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Error Message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/jwt": {
      "post": {
        "tags": ["JWT Recipe"],
        "operationId": "createSignedJWT",
        "summary": "Create signed JWT",
        "description": "Create a signed JWT\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "jwt",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "type": "object",
                    "description": "The payload of the JWT, should be a JSON object.",
                    "example": {
                      "custom-claim": ""
                    }
                  },
                  "algorithm": {
                    "type": "string",
                    "description": "The algorithm to use when creating the JWT.",
                    "enum": ["RS256"]
                  },
                  "jwksDomain": {
                    "type": "string",
                    "description": "This is used as the value for the issuer claim in the JWT payload.",
                    "example": "https://api.test.com/"
                  },
                  "validity": {
                    "type": "number",
                    "description": "Duration in seconds, used to calculate JWT expiry",
                    "example": 86400
                  },
                  "useStaticSigningKey": {
                    "type": "boolean",
                    "description": "Decides if the token should be signed with a dynamic or static key, defaults to true",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a signed JWT",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "jwt": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNSUPPORTED_ALGORITHM_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/jwt/jwks": {
      "get": {
        "deprecated": true,
        "tags": ["JWT Recipe"],
        "operationId": "getJWKS",
        "summary": "Get JWT keys",
        "description": "Retrieve JWKs for JWT verification, containing both static and dynamic keys.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "jwt",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve JWKs for JWT verification, containing both static and dynamic keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A JWK that can be used to verify a JWT",
                        "properties": {
                          "alg": {
                            "type": "string",
                            "description": "The algorithm to use when creating the JWT.",
                            "enum": ["RS256"]
                          },
                          "kty": {
                            "type": "string",
                            "example": "RSA"
                          },
                          "use": {
                            "type": "string",
                            "example": "sig"
                          },
                          "kid": {
                            "type": "string",
                            "description": "Unique identifier for the JWK"
                          },
                          "x5c": {
                            "type": "array",
                            "description": "X.509 Certificate Chain",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/.well-known/jwks.json": {
      "get": {
        "tags": ["Core"],
        "operationId": "getWellKnownJWKS",
        "summary": "Get well-known JWT keys",
        "description": "Retrieve JWKs for JWT verification, containing both static and dynamic keys.\n",
        "responses": {
          "200": {
            "description": "Retrieve JWKs for JWT verification, containing both static and dynamic keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A JWK that can be used to verify a JWT",
                        "properties": {
                          "alg": {
                            "type": "string",
                            "description": "The algorithm to use when creating the JWT.",
                            "enum": ["RS256"]
                          },
                          "kty": {
                            "type": "string",
                            "example": "RSA"
                          },
                          "use": {
                            "type": "string",
                            "example": "sig"
                          },
                          "kid": {
                            "type": "string",
                            "description": "Unique identifier for the JWK"
                          },
                          "x5c": {
                            "type": "array",
                            "description": "X.509 Certificate Chain",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/jwt/data": {
      "get": {
        "deprecated": true,
        "tags": ["Session Recipe"],
        "operationId": "getJWTData",
        "summary": "Get JWT data",
        "description": "Get JWT data for a session\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sessionHandle",
            "description": "Users session handle",
            "schema": {
              "type": "string",
              "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get JWT Data",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "userDataInJWT": {
                          "type": "object",
                          "description": "should be a JSON object (not a JSON literal nor an array)",
                          "example": {
                            "test": 123
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNAUTHORISED"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Error Message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Session Recipe"],
        "operationId": "putJWTData",
        "summary": "Update JWT data",
        "description": "Change JWT data for a session\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionHandle": {
                    "type": "string",
                    "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
                  },
                  "userDataInJWT": {
                    "type": "object",
                    "description": "should be a JSON object (not a JSON literal nor an array)",
                    "example": {
                      "test": 123
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change JWT Data for a session",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNAUTHORISED"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Error Message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/dashboard/user": {
      "post": {
        "tags": ["Dashboard Recipe"],
        "operationId": "createDashboardUser",
        "summary": "Create dashboard user",
        "description": "Create a dashboard user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "dashboard",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "test@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password@123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "string",
                              "example": "example-userid"
                            },
                            "email": {
                              "type": "string",
                              "example": "test@example.com"
                            },
                            "timeCreated": {
                              "type": "number",
                              "example": 1231321231
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["EMAIL_ALREADY_EXISTS_ERROR"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["PASSWORD_WEAK_ERROR"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Your password must have at least 8 characters"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_EMAIL_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "Indicates ayment required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["USER_LIMIT_REACHED_ERROR"]
                    },
                    "message": {
                      "type": "string",
                      "example": "You have reached the free limit for creating users, please purchase the dashboard feature to create new users"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Dashboard Recipe"],
        "operationId": "updateDashboardUser",
        "summary": "Update dashboard user",
        "description": "Update a user's email or password\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "dashboard",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "test@example.com"
                      },
                      "newPassword": {
                        "type": "string",
                        "example": "password@123"
                      },
                      "newEmail": {
                        "type": "string",
                        "example": "test2@example.com"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "userId": {
                        "type": "string",
                        "example": "ue21r-fw32r3-d121-d1"
                      },
                      "newPassword": {
                        "type": "string",
                        "example": "password@123"
                      },
                      "newEmail": {
                        "type": "string",
                        "example": "test2@example.com"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "string",
                              "example": "r23r-f235th54-g3413gf-r32dr2"
                            },
                            "email": {
                              "type": "string",
                              "example": "test@example.com"
                            },
                            "timeCreated": {
                              "type": "number",
                              "example": 391238234792
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["EMAIL_ALREADY_EXISTS_ERROR"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["PASSWORD_WEAK_ERROR"]
                        },
                        "message": {
                          "type": "string",
                          "example": "Your password must have at least 8 characters"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_EMAIL_ERROR"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_USER_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Dashboard Recipe"],
        "operationId": "deleteDashboardUser",
        "summary": "Delete dashboard user",
        "description": "Delete a dashboard user with their userId or email\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "dashboard",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "example": "test@example.com"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string",
              "example": "ue1231-f32f290f2-f23r23f-323f2"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "didUserExist": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/dashboard/users": {
      "get": {
        "tags": ["Dashboard Recipe"],
        "operationId": "getAllDashboardUsers",
        "summary": "Get all dashboard users",
        "description": "Get a list of call the dashboard users\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "dashboard",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get a list of dashboard users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "example": "test@example.com"
                          },
                          "userId": {
                            "type": "string",
                            "example": "uf2323-f223r233-f23-f23-f2f32"
                          },
                          "timeCreated": {
                            "type": "number",
                            "example": 16382348324
                          },
                          "isSuspended": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/dashboard/session/verify": {
      "post": {
        "tags": ["Dashboard Recipe"],
        "operationId": "verifyDashboardUserSession",
        "summary": "Verify dashboard user session",
        "description": "Verify a Dashboard user's sessionId\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "dashboard",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "example": "rf32f-f32342f-32f-323r2f3-23"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["USER_SUSPENDED_ERROR"]
                        },
                        "message": {
                          "type": "string",
                          "example": "You have crossed the free dashboard user limit. Please purchase the dashboard feature or login with a valid user account"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVAlID_SESSION_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/dashboard/session": {
      "delete": {
        "tags": ["Dashboard Recipe"],
        "operationId": "RevokeDashboardUsersSession",
        "summary": "Revoke dashboard user session",
        "description": "Revoke a Dashboard user's session\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "dashboard",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sessionId",
            "schema": {
              "type": "string",
              "example": "ue1231-f32f290f2-f23r23f-323f2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/dashboard/signin": {
      "post": {
        "tags": ["Dashboard Recipe"],
        "operationId": "signInDashboardUser",
        "summary": "Sign in dashboard user",
        "description": "Signin a Dashboard user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "dashboard",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "test@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password@123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates success with the status property",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "sessionId": {
                          "type": "string",
                          "example": null
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["USER_SUSPENDED_ERROR"]
                        },
                        "message": {
                          "type": "string",
                          "example": "You have crossed the free dashboard user limit. Please purchase the dashboard feature or login with a valid user account"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVAlID_CREDENTIALS_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/dashboard/user/sessions": {
      "get": {
        "tags": ["Dashboard Recipe"],
        "operationId": "getAllSessionsForDashboardUser",
        "summary": "Get all sessions for dashboard user",
        "description": "Get a list of the sessions for the dashboard user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "dashboard",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string",
              "example": "ue1231-f32f290f2-f23r23f-323f2"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "get a list of sessions for dashboard user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": {
                            "type": "string",
                            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                          },
                          "sessionId": {
                            "type": "string",
                            "example": "fni29f-f23f23-f2fq32qt-h35evf"
                          },
                          "timeCreated": {
                            "type": "number",
                            "example": 16382348324
                          },
                          "expiry": {
                            "type": "number",
                            "example": 16382348324
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/apiversion": {
      "get": {
        "tags": ["Core"],
        "operationId": "getApiVersion",
        "summary": "Get API version",
        "description": "Get a list of compatible CDI versions\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "websiteDomain",
            "schema": {
              "type": "string",
              "example": "https://example.com"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "apiDomain",
            "schema": {
              "type": "string",
              "example": "https://api.example.com"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "get api version",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "versions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": ["2.13"]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/config": {
      "get": {
        "tags": ["Core"],
        "operationId": "getConfig",
        "summary": "Get config file path",
        "description": "Get path to the loaded config file\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "string",
              "example": 21307
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get api version",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "path": {
                          "type": "string",
                          "example": "/usr/lib/supertokens/config.yaml"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["NOT_ALLOWED"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/": {
      "get": {
        "tags": ["Core"],
        "operationId": "getHelloOnRootPath",
        "summary": "Get hello message on root path",
        "description": "Return a simple hello message\n",
        "responses": {
          "200": {
            "description": "return a simple hello message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": ["Hello"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/hello": {
      "get": {
        "tags": ["Core"],
        "operationId": "getHello",
        "summary": "Get hello message",
        "description": "Return a simple hello message\n",
        "responses": {
          "200": {
            "description": "return a simple hello message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": ["Hello"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Core"],
        "operationId": "putHello",
        "summary": "Put hello message",
        "description": "Return a simple hello message\n",
        "responses": {
          "200": {
            "description": "return a simple hello message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": ["Hello"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Core"],
        "operationId": "postHello",
        "summary": "Post hello message",
        "description": "Return a simple hello message\n",
        "responses": {
          "200": {
            "description": "return a simple hello message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": ["Hello"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Core"],
        "operationId": "deleteHello",
        "summary": "Delete hello message",
        "description": "Return a simple hello message\n",
        "responses": {
          "200": {
            "description": "return a simple hello message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": ["Hello"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/telemetry": {
      "get": {
        "tags": ["Core"],
        "operationId": "getTelemetry",
        "summary": "Get telemetry ID",
        "description": "Returns the telemetryID if it exists\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the telemetryID if it exists",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "exists": {
                          "type": "boolean",
                          "enum": [true]
                        },
                        "telemetryId": {
                          "type": "string",
                          "example": "99c87c72-1807-22d-9b39-7a88f95re56c"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "exists": {
                          "type": "boolean",
                          "example": [false]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/users/count": {
      "get": {
        "tags": ["Core"],
        "operationId": "getUsersCount",
        "summary": "Get users count",
        "description": "Get number of users.\n\nAPI is tenant specific if `includeAllTenants` is false.\nElse, `tenantId` is ignored.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeRecipeIds",
            "in": "query",
            "required": false,
            "description": "The param should take an array of comma seperated strings",
            "schema": {
              "type": "string",
              "example": "val1,val2,val3.."
            }
          },
          {
            "name": "includeAllTenants",
            "description": "if set to true, will count users across all tenants in the app",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get number of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "count": {
                      "type": "number",
                      "example": 1000000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/users/count/active": {
      "get": {
        "tags": ["Core"],
        "operationId": "getActiveUsersCount",
        "summary": "Get active users count",
        "description": "Get number of active users.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "number",
              "example": 1679875200000
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get number of active users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "count": {
                      "type": "number",
                      "example": 100000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/users": {
      "get": {
        "tags": ["Core"],
        "operationId": "getUsers",
        "summary": "Get users",
        "description": "Get users.\n\nAPI is tenant specific if `includeAllTenants` is false.\nElse, `tenantId` is ignored.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeRecipeIds",
            "in": "query",
            "required": false,
            "description": "The param should take an array of comma seperated strings",
            "schema": {
              "type": "string",
              "example": "val1,val2,val3.."
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "example": "ZmE3YTA4NDEtY...MjM5MTgwMzIyMzE=",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "timeJoinedOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["ASC", "DESC"]
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "example": "test@example.com"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "number",
              "example": 911234567890
            },
            "required": false
          },
          {
            "in": "query",
            "name": "recipe",
            "schema": {
              "type": "string",
              "example": "emailpassword"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "provider",
            "schema": {
              "type": "string",
              "example": "google"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "User Pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                              },
                              "isPrimaryUser": {
                                "type": "boolean",
                                "example": true
                              },
                              "tenantIds": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "customer1"
                                }
                              },
                              "timeJoined": {
                                "type": "number",
                                "example": 1623918032231
                              },
                              "emails": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "johndoe@gmail.com"
                                }
                              },
                              "phoneNumbers": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "+14155552671"
                                }
                              },
                              "thirdParty": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "example": "google"
                                    },
                                    "userId": {
                                      "type": "string",
                                      "example": 106347997792363870000
                                    }
                                  }
                                }
                              },
                              "loginMethods": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "tenantIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "example": "customer1"
                                      }
                                    },
                                    "recipeUserId": {
                                      "type": "string",
                                      "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                    },
                                    "verified": {
                                      "type": "boolean",
                                      "example": true
                                    },
                                    "timeJoined": {
                                      "type": "number",
                                      "example": 1623918032231
                                    },
                                    "recipeId": {
                                      "type": "string",
                                      "enum": ["emailpassword", "passwordless", "thirdparty"]
                                    },
                                    "email": {
                                      "type": "string",
                                      "example": "johndoe@gmail.com"
                                    },
                                    "phoneNumber": {
                                      "type": "string",
                                      "example": "+14155552671"
                                    },
                                    "thirdParty": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "example": "google"
                                        },
                                        "userId": {
                                          "type": "string",
                                          "example": 106347997792363870000
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "nextPaginationToken": {
                      "type": "string",
                      "example": "ZmE3YTA4ND...OzE2MjM5MTgwMzIyMzE="
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/user/remove": {
      "post": {
        "tags": ["Core"],
        "operationId": "deleteUser",
        "summary": "Delete user",
        "description": "Delete user\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId"],
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "removeAllLinkedAccounts": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns OK if the operation succeeded (even if the user didn't exist before the call)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/user/search/tags": {
      "get": {
        "tags": ["Core"],
        "operationId": "getSearchTags",
        "summary": "Get search tags",
        "description": "Retrieve available tags for search\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns available tags for search",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": ["email", "phone", "provider"]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/ee/featureflag": {
      "get": {
        "tags": ["Core"],
        "operationId": "getFeatureFlag",
        "summary": "Get enterprise features",
        "description": "Get a list of the enabled enterprise features\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "features": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["feature_1", "feature_2"]
                    },
                    "usageStats": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/ee/license": {
      "put": {
        "tags": ["Core"],
        "operationId": "setLicense",
        "summary": "Set license key",
        "description": "Set or sync license key\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "licenseKey": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsIn..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["MISSING_EE_FOLDER_ERROR"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_LICENSE_KEY_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Core"],
        "operationId": "deleteLicense",
        "summary": "Delete license key",
        "description": "Delete license key\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Core"],
        "operationId": "getLicense",
        "summary": "Get license key",
        "description": "Retrieve license key\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "licenseKey": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsIn..."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["NO_LICENSE_KEY_FOUND_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/user/id": {
      "get": {
        "tags": ["Core"],
        "operationId": "getUserId",
        "summary": "Get user ID",
        "description": "Get user id from email or phone number\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_USER_ID_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/users/by-accountinfo": {
      "get": {
        "tags": ["Core"],
        "operationId": "getUsersByAccountInfo",
        "summary": "Get users by account info",
        "description": "Get users by email, phoneNumber or thirdParty info\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test@example.com"
            }
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "required": false,
            "schema": {
              "type": "string",
              "example": "+911234567890"
            }
          },
          {
            "in": "query",
            "name": "thirdPartyId",
            "required": false,
            "schema": {
              "type": "string",
              "example": "google"
            }
          },
          {
            "in": "query",
            "name": "thirdPartyUserId",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          },
          {
            "in": "query",
            "name": "doUnionOfAccountInfo",
            "required": true,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                          },
                          "isPrimaryUser": {
                            "type": "boolean",
                            "example": true
                          },
                          "tenantIds": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "customer1"
                            }
                          },
                          "timeJoined": {
                            "type": "number",
                            "example": 1623918032231
                          },
                          "emails": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "johndoe@gmail.com"
                            }
                          },
                          "phoneNumbers": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "+14155552671"
                            }
                          },
                          "thirdParty": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "google"
                                },
                                "userId": {
                                  "type": "string",
                                  "example": 106347997792363870000
                                }
                              }
                            }
                          },
                          "loginMethods": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "tenantIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "example": "customer1"
                                  }
                                },
                                "recipeUserId": {
                                  "type": "string",
                                  "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                },
                                "verified": {
                                  "type": "boolean",
                                  "example": true
                                },
                                "timeJoined": {
                                  "type": "number",
                                  "example": 1623918032231
                                },
                                "recipeId": {
                                  "type": "string",
                                  "enum": ["emailpassword", "passwordless", "thirdparty"]
                                },
                                "email": {
                                  "type": "string",
                                  "example": "johndoe@gmail.com"
                                },
                                "phoneNumber": {
                                  "type": "string",
                                  "example": "+14155552671"
                                },
                                "thirdParty": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "example": "google"
                                    },
                                    "userId": {
                                      "type": "string",
                                      "example": 106347997792363870000
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/requests/stats": {
      "get": {
        "tags": ["Core"],
        "operationId": "getRequestsStats",
        "summary": "Get requests stats",
        "description": "Get requests stats for last 24 hours\n\n`averageRequestsPerSecond` and `peakRequestsPerSecond` would countain `1440` values corresponding to `now - 1440 minutes` until `now - 1 minute`.\n\nA value of `-1` would mean that there is no data for that minute.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "atMinute": {
                      "type": "number",
                      "example": 16382348
                    },
                    "averageRequestsPerSecond": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "example": 10.5
                      }
                    },
                    "peakRequestsPerSecond": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "example": 20
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/connectionuridomain": {
      "put": {
        "tags": ["Multitenancy Recipe"],
        "summary": "Upsert connection URI domain",
        "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still accepts those `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs for backward compatibility.\n\nCreate or update a connection uri domain.\n\nSuperTokens subscription license key is required, if not using the base connection uri domain.\n\nThis request must originate from public app and public tenant on the base\nconnection uri domain.\n\nIf creating a new connection uri domain, only the login methods set to true will be enabled and rest will be disabled by default.\n\n`firstFactors` and `requiredSecondaryFactors` can be set to null to remove all entries in the core, or a non empty string array to be updated in the core. Setting of empty array is disallowed.\n\nNote: the create/update will fail if a login method is not enabled and a relavant factor is added to either `firstFactors` or `requiredSecondaryFactors`. For example, `emailPasswordEnabled` cannot be set to `false` if `emailpassword` is present in the `firstFactors` array.\n\nIf updating an existing connection uri domain,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nNote: The core config must contain a unique connection to the storage layer, because sharing of database between 2 different connection uri domains is not allowed.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain. In order to update config for the default connectionUriDomain, you must edit the config.yaml or the docker env directly.\n",
        "operationId": "createOrUpdateConnectionURIDomainPUT",
        "deprecated": true,
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["connectionUriDomain"],
                "properties": {
                  "connectionUriDomain": {
                    "type": "string",
                    "example": "core-1234.supertokens.io:3567"
                  },
                  "emailPasswordEnabled": {
                    "type": "boolean"
                  },
                  "thirdPartyEnabled": {
                    "type": "boolean"
                  },
                  "passwordlessEnabled": {
                    "type": "boolean"
                  },
                  "firstFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "emailpassword"
                    }
                  },
                  "requiredSecondaryFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "otp-phone"
                    }
                  },
                  "coreConfig": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create or Update connection uri domain result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "createdNew"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "createdNew": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/connectionuridomain/v2": {
      "put": {
        "summary": "Upsert connection uri domain",
        "tags": ["Multitenancy Recipe"],
        "description": "Create or update a connection uri domain.\n\nSuperTokens subscription license key is required, if not using the base connection uri domain.\n\nThis request must originate from public app and public tenant on the base\nconnection uri domain.\n\nThe `firstFactors` can be set to following values:\n\n- `null`: When set to `null`, all the login methods will be available for the connection URI domain (public app, public tenant).\n- `[]` (empty array): No login methods will be enabled for the connection URI domain (public app, public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the connection URI domain (public app, public tenant). For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.\n\nList of built-in first factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n\nIf first factors are not specified while creating a new connection uri domain, all the login methods will be enabled by default.\n\nThe `requiredSecondaryFactors` can be set to following values:\n- `null`: When set to `null`, no secondary factors will be required for the users of the connection URI domain (public app, public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the connection URI domain (public app, public tenant) must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.\n\nList of built-in secondary factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n- Time based OTP: `totp`\n\nIf updating an existing connection uri domain,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nNote: The core config must contain a unique connection to the storage layer, because sharing of database between 2 different connection uri domains is not allowed.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain. In order to update config for the default connectionUriDomain, you must edit the config.yaml or the docker env directly.\n",
        "operationId": "createOrUpdateConnectionURIDomainV2PUT",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["connectionUriDomain"],
                "properties": {
                  "connectionUriDomain": {
                    "type": "string",
                    "example": "core-1234.supertokens.io:3567"
                  },
                  "firstFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "emailpassword"
                    }
                  },
                  "requiredSecondaryFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "otp-phone"
                    }
                  },
                  "coreConfig": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create or Update connection uri domain result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "createdNew"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "createdNew": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/connectionuridomain/remove": {
      "post": {
        "summary": "Remove connection uri domain",
        "tags": ["Multitenancy Recipe"],
        "description": "Delete a connection uri domain.\n\nDeletion of base connection uri domain is not allowed.\n\nThe request must originate from base connection uri domain and public app and tenant.\n\nNote: There should be no apps or tenants (other than the public app and public tenant) belonging to the connection uri domain to be able to delete it.\n",
        "operationId": "deleteConnectionUriDomainPOST",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["connectionUriDomain"],
                "properties": {
                  "connectionUriDomain": {
                    "type": "string",
                    "example": "core-1234.supertokens.io:3567"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Remove connection uri domain result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "didExist"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "didExist": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/connectionuridomain/list": {
      "get": {
        "summary": "List connection uri domains",
        "tags": ["Multitenancy Recipe"],
        "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371\n\nGet a list of all connection uri domains.\n\nRequest must originate from base connection uri domain and public app and tenant.\n",
        "operationId": "connectionUriDomainListGET",
        "deprecated": true,
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of connection uri domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "connectionUriDomains"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "connectionUriDomains": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connectionUriDomain": {
                            "type": "string",
                            "example": "core-1234.supertokens.io:3567"
                          },
                          "apps": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "appId": {
                                  "type": "string",
                                  "example": "app1"
                                },
                                "tenants": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "emailPassword",
                                      "thirdParty",
                                      "passwordless",
                                      "coreConfig",
                                      "tenantId"
                                    ],
                                    "properties": {
                                      "tenantId": {
                                        "type": "string",
                                        "example": "customer1"
                                      },
                                      "emailPassword": {
                                        "type": "object",
                                        "required": ["enabled"],
                                        "properties": {
                                          "enabled": {
                                            "type": "boolean"
                                          }
                                        }
                                      },
                                      "thirdParty": {
                                        "type": "object",
                                        "required": ["enabled"],
                                        "properties": {
                                          "enabled": {
                                            "type": "boolean"
                                          },
                                          "providers": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": ["thirdPartyId"],
                                              "properties": {
                                                "thirdPartyId": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": "string"
                                                },
                                                "clients": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "clientType": {
                                                        "type": "string"
                                                      },
                                                      "clientId": {
                                                        "type": "string"
                                                      },
                                                      "clientSecret": {
                                                        "type": "string"
                                                      },
                                                      "scope": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "forcePKCE": {
                                                        "type": "boolean"
                                                      },
                                                      "additionalConfig": {
                                                        "type": "object"
                                                      }
                                                    }
                                                  }
                                                },
                                                "authorizationEndpoint": {
                                                  "type": "string"
                                                },
                                                "authorizationEndpointQueryParams": {
                                                  "type": "object"
                                                },
                                                "tokenEndpoint": {
                                                  "type": "string"
                                                },
                                                "tokenEndpointBodyParams": {
                                                  "type": "object"
                                                },
                                                "userInfoEndpoint": {
                                                  "type": "string"
                                                },
                                                "userInfoEndpointQueryParams": {
                                                  "type": "object"
                                                },
                                                "userInfoEndpointHeaders": {
                                                  "type": "object"
                                                },
                                                "jwksURI": {
                                                  "type": "string"
                                                },
                                                "oidcDiscoveryEndpoint": {
                                                  "type": "string"
                                                },
                                                "requireEmail": {
                                                  "type": "boolean",
                                                  "default": true
                                                },
                                                "userInfoMap": {
                                                  "type": "object",
                                                  "properties": {
                                                    "fromIdTokenPayload": {
                                                      "type": "object",
                                                      "properties": {
                                                        "userId": {
                                                          "type": "string"
                                                        },
                                                        "email": {
                                                          "type": "string"
                                                        },
                                                        "emailVerified": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "fromUserInfoAPI": {
                                                      "type": "object",
                                                      "properties": {
                                                        "userId": {
                                                          "type": "string"
                                                        },
                                                        "email": {
                                                          "type": "string"
                                                        },
                                                        "emailVerified": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "passwordless": {
                                        "type": "object",
                                        "required": ["enabled"],
                                        "properties": {
                                          "enabled": {
                                            "type": "boolean"
                                          }
                                        }
                                      },
                                      "firstFactors": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "example": "emailpassword"
                                        }
                                      },
                                      "requiredSecondaryFactors": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "example": "otp-phone"
                                        }
                                      },
                                      "coreConfig": {
                                        "type": "object"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/connectionuridomain/list/v2": {
      "get": {
        "summary": "List connection uri domains",
        "tags": ["Multitenancy Recipe"],
        "description": "Get a list of all connection uri domains.\n\nThe value of `firstFactors` can be as follows:\n- `null`: When set to `null`, the SDK will use firstFactors defined in the SDK\n- `[]` (empty array): No first factors would be enabled for the tenant\n- non-empty array: The first factors that are enabled for the tenant\n\nRequest must originate from base connection uri domain and public app and tenant.\n",
        "operationId": "connectionUriDomainListV2GET",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of connection uri domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "connectionUriDomains"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "connectionUriDomains": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connectionUriDomain": {
                            "type": "string",
                            "example": "core-1234.supertokens.io:3567"
                          },
                          "apps": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "appId": {
                                  "type": "string",
                                  "example": "app1"
                                },
                                "tenants": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": ["thirdParty", "coreConfig", "tenantId"],
                                    "properties": {
                                      "tenantId": {
                                        "type": "string",
                                        "example": "customer1"
                                      },
                                      "thirdParty": {
                                        "type": "object",
                                        "properties": {
                                          "providers": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": ["thirdPartyId"],
                                              "properties": {
                                                "thirdPartyId": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": "string"
                                                },
                                                "clients": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "clientType": {
                                                        "type": "string"
                                                      },
                                                      "clientId": {
                                                        "type": "string"
                                                      },
                                                      "clientSecret": {
                                                        "type": "string"
                                                      },
                                                      "scope": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "forcePKCE": {
                                                        "type": "boolean"
                                                      },
                                                      "additionalConfig": {
                                                        "type": "object"
                                                      }
                                                    }
                                                  }
                                                },
                                                "authorizationEndpoint": {
                                                  "type": "string"
                                                },
                                                "authorizationEndpointQueryParams": {
                                                  "type": "object"
                                                },
                                                "tokenEndpoint": {
                                                  "type": "string"
                                                },
                                                "tokenEndpointBodyParams": {
                                                  "type": "object"
                                                },
                                                "userInfoEndpoint": {
                                                  "type": "string"
                                                },
                                                "userInfoEndpointQueryParams": {
                                                  "type": "object"
                                                },
                                                "userInfoEndpointHeaders": {
                                                  "type": "object"
                                                },
                                                "jwksURI": {
                                                  "type": "string"
                                                },
                                                "oidcDiscoveryEndpoint": {
                                                  "type": "string"
                                                },
                                                "requireEmail": {
                                                  "type": "boolean",
                                                  "default": true
                                                },
                                                "userInfoMap": {
                                                  "type": "object",
                                                  "properties": {
                                                    "fromIdTokenPayload": {
                                                      "type": "object",
                                                      "properties": {
                                                        "userId": {
                                                          "type": "string"
                                                        },
                                                        "email": {
                                                          "type": "string"
                                                        },
                                                        "emailVerified": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "fromUserInfoAPI": {
                                                      "type": "object",
                                                      "properties": {
                                                        "userId": {
                                                          "type": "string"
                                                        },
                                                        "email": {
                                                          "type": "string"
                                                        },
                                                        "emailVerified": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "firstFactors": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "example": "emailpassword"
                                        }
                                      },
                                      "requiredSecondaryFactors": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "example": "otp-phone"
                                        }
                                      },
                                      "coreConfig": {
                                        "type": "object"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/app": {
      "put": {
        "summary": "Upsert app",
        "tags": ["Multitenancy Recipe"],
        "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still accepts those `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs for backward compatibility.\n\nCreate or update an app.\nSuperTokens subscription license key is required.\n\nIf creating a new app, only the login methods set to true will be enabled and rest will be disabled by default.\n\n`firstFactors` and `requiredSecondaryFactors` can be set to null to remove all entries in the core, or a non empty string array to be updated in the core. Setting of empty array is disallowed.\n\nNote: the create/update will fail if a login method is not enabled and a relavant factor is added to either `firstFactors` or `requiredSecondaryFactors`. For example, `emailPasswordEnabled` cannot be set to `false` if `emailpassword` is present in the `firstFactors` array.\n\nIf updating an existing app,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nNote: the newly created app will use the same connection uri domain from which\nthis request originates and the request must originate from public app and public tenant.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain, public app. In order to update config for the default connectionUriDomain and public app, you must edit the config.yaml or the docker env directly.\n",
        "operationId": "createOrUpdateAppPUT",
        "deprecated": true,
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["appId"],
                "properties": {
                  "appId": {
                    "type": "string",
                    "example": "app1"
                  },
                  "emailPasswordEnabled": {
                    "type": "boolean"
                  },
                  "thirdPartyEnabled": {
                    "type": "boolean"
                  },
                  "passwordlessEnabled": {
                    "type": "boolean"
                  },
                  "firstFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "emailpassword"
                    }
                  },
                  "requiredSecondaryFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "otp-phone"
                    }
                  },
                  "coreConfig": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create or Update app result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "createdNew"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "createdNew": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/app/v2": {
      "put": {
        "summary": "Upsert app",
        "tags": ["Multitenancy Recipe"],
        "description": "Create or update an app.\n\nSuperTokens subscription license key is required.\n\nThe `firstFactors` can be set to following values:\n\n- `null`: When set to `null`, all the login methods will be available for the app (public tenant).\n- `[]` (empty array): No login methods will be enabled for the app (public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the app (public tenant). For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.\n\nList of built-in first factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n\nIf first factors are not specified while creating a new app, all the login methods will be enabled by default.\n\nThe `requiredSecondaryFactors` can be set to following values:\n- `null`: When set to `null`, no secondary factors will be required for the users of the app (public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the app (public tenant) must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.\n\nList of built-in secondary factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n- Time based OTP: `totp`\n\nIf updating an existing app,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nNote: the newly created app will use the same connection uri domain from which\nthis request originates and the request must originate from public app and public tenant.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain, public app. In order to update config for the default connectionUriDomain and public app, you must edit the config.yaml or the docker env directly.\n",
        "operationId": "createOrUpdateAppV2PUT",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["appId"],
                "properties": {
                  "appId": {
                    "type": "string",
                    "example": "app1"
                  },
                  "firstFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "emailpassword"
                    }
                  },
                  "requiredSecondaryFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "otp-phone"
                    }
                  },
                  "coreConfig": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create or Update app result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "createdNew"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "createdNew": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/app/remove": {
      "post": {
        "summary": "Delete app",
        "tags": ["Multitenancy Recipe"],
        "description": "Delete an app.\n\nRequest must originate from public app and tenant.\n\nNote: No tenants (other than the public tenant) must belong to the app to be able to delete it.\n",
        "operationId": "deleteAppPOST",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["appId"],
                "properties": {
                  "appId": {
                    "type": "string",
                    "example": "app1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Remove app result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "didExist"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "didExist": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/app/list": {
      "get": {
        "summary": "List apps",
        "tags": ["Multitenancy Recipe"],
        "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371\n\nGet a list of all apps in a connection uri domain.\n\nRequest must originate from public app and tenant.\n",
        "operationId": "appListGET",
        "deprecated": true,
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of apps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "apps"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "apps": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "appId": {
                            "type": "string",
                            "example": "app1"
                          },
                          "tenants": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": ["emailPassword", "thirdParty", "passwordless", "coreConfig", "tenantId"],
                              "properties": {
                                "tenantId": {
                                  "type": "string",
                                  "example": "customer1"
                                },
                                "emailPassword": {
                                  "type": "object",
                                  "required": ["enabled"],
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "thirdParty": {
                                  "type": "object",
                                  "required": ["enabled"],
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean"
                                    },
                                    "providers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": ["thirdPartyId"],
                                        "properties": {
                                          "thirdPartyId": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "clients": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "clientType": {
                                                  "type": "string"
                                                },
                                                "clientId": {
                                                  "type": "string"
                                                },
                                                "clientSecret": {
                                                  "type": "string"
                                                },
                                                "scope": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "forcePKCE": {
                                                  "type": "boolean"
                                                },
                                                "additionalConfig": {
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          },
                                          "authorizationEndpoint": {
                                            "type": "string"
                                          },
                                          "authorizationEndpointQueryParams": {
                                            "type": "object"
                                          },
                                          "tokenEndpoint": {
                                            "type": "string"
                                          },
                                          "tokenEndpointBodyParams": {
                                            "type": "object"
                                          },
                                          "userInfoEndpoint": {
                                            "type": "string"
                                          },
                                          "userInfoEndpointQueryParams": {
                                            "type": "object"
                                          },
                                          "userInfoEndpointHeaders": {
                                            "type": "object"
                                          },
                                          "jwksURI": {
                                            "type": "string"
                                          },
                                          "oidcDiscoveryEndpoint": {
                                            "type": "string"
                                          },
                                          "requireEmail": {
                                            "type": "boolean",
                                            "default": true
                                          },
                                          "userInfoMap": {
                                            "type": "object",
                                            "properties": {
                                              "fromIdTokenPayload": {
                                                "type": "object",
                                                "properties": {
                                                  "userId": {
                                                    "type": "string"
                                                  },
                                                  "email": {
                                                    "type": "string"
                                                  },
                                                  "emailVerified": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "fromUserInfoAPI": {
                                                "type": "object",
                                                "properties": {
                                                  "userId": {
                                                    "type": "string"
                                                  },
                                                  "email": {
                                                    "type": "string"
                                                  },
                                                  "emailVerified": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "passwordless": {
                                  "type": "object",
                                  "required": ["enabled"],
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "firstFactors": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "example": "emailpassword"
                                  }
                                },
                                "requiredSecondaryFactors": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "example": "otp-phone"
                                  }
                                },
                                "coreConfig": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/recipe/multitenancy/app/list/v2": {
      "get": {
        "summary": "List apps",
        "tags": ["Multitenancy Recipe"],
        "description": "Get a list of all apps in a connection uri domain.\n\nThe value of `firstFactors` can be as follows:\n- `null`: When set to `null`, the SDK will use firstFactors defined in the SDK\n- `[]` (empty array): No first factors would be enabled for the tenant\n- non-empty array: The first factors that are enabled for the tenant\n\nRequest must originate from public app and tenant.\n",
        "operationId": "appListV2GET",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of apps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "apps"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "apps": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "appId": {
                            "type": "string",
                            "example": "app1"
                          },
                          "tenants": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": ["thirdParty", "coreConfig", "tenantId"],
                              "properties": {
                                "tenantId": {
                                  "type": "string",
                                  "example": "customer1"
                                },
                                "thirdParty": {
                                  "type": "object",
                                  "properties": {
                                    "providers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": ["thirdPartyId"],
                                        "properties": {
                                          "thirdPartyId": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "clients": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "clientType": {
                                                  "type": "string"
                                                },
                                                "clientId": {
                                                  "type": "string"
                                                },
                                                "clientSecret": {
                                                  "type": "string"
                                                },
                                                "scope": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "forcePKCE": {
                                                  "type": "boolean"
                                                },
                                                "additionalConfig": {
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          },
                                          "authorizationEndpoint": {
                                            "type": "string"
                                          },
                                          "authorizationEndpointQueryParams": {
                                            "type": "object"
                                          },
                                          "tokenEndpoint": {
                                            "type": "string"
                                          },
                                          "tokenEndpointBodyParams": {
                                            "type": "object"
                                          },
                                          "userInfoEndpoint": {
                                            "type": "string"
                                          },
                                          "userInfoEndpointQueryParams": {
                                            "type": "object"
                                          },
                                          "userInfoEndpointHeaders": {
                                            "type": "object"
                                          },
                                          "jwksURI": {
                                            "type": "string"
                                          },
                                          "oidcDiscoveryEndpoint": {
                                            "type": "string"
                                          },
                                          "requireEmail": {
                                            "type": "boolean",
                                            "default": true
                                          },
                                          "userInfoMap": {
                                            "type": "object",
                                            "properties": {
                                              "fromIdTokenPayload": {
                                                "type": "object",
                                                "properties": {
                                                  "userId": {
                                                    "type": "string"
                                                  },
                                                  "email": {
                                                    "type": "string"
                                                  },
                                                  "emailVerified": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "fromUserInfoAPI": {
                                                "type": "object",
                                                "properties": {
                                                  "userId": {
                                                    "type": "string"
                                                  },
                                                  "email": {
                                                    "type": "string"
                                                  },
                                                  "emailVerified": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "firstFactors": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "example": "emailpassword"
                                  }
                                },
                                "requiredSecondaryFactors": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "example": "otp-phone"
                                  }
                                },
                                "coreConfig": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/multitenancy/tenant": {
      "put": {
        "summary": "Upsert tenant",
        "tags": ["Multitenancy Recipe"],
        "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still accepts those `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs for backward compatibility.\n\nCreates or updates a tenant.\n\nSuperTokens subscription license key is required.\n\nIf creating a new tenant, only the login methods set to true will be enabled and rest will be disabled by default.\n\n`firstFactors` and `requiredSecondaryFactors` can be set to null to remove all entries in the core, or a non empty string array to be updated in the core. Setting of empty array is disallowed.\n\nNote: the create/update will fail if a login method is not enabled and a relavant factor is added to either `firstFactors` or `requiredSecondaryFactors`. For example, `emailPasswordEnabled` cannot be set to `false` if `emailpassword` is present in the `firstFactors` array.\n\nIf updating an existing tenant,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nThe request must originate from public tenant, and the new tenant will use connectionUriDomain and app from which the request originates.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain, public app and tenant. In order to update config for the default connectionUriDomain, public app and tenant, you must edit the config.yaml or the docker env directly.\n",
        "operationId": "createOrUpdateTenantPUT",
        "deprecated": true,
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["tenantId"],
                "properties": {
                  "tenantId": {
                    "type": "string",
                    "example": "customer1"
                  },
                  "emailPasswordEnabled": {
                    "type": "boolean"
                  },
                  "thirdPartyEnabled": {
                    "type": "boolean"
                  },
                  "passwordlessEnabled": {
                    "type": "boolean"
                  },
                  "firstFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "emailpassword"
                    }
                  },
                  "requiredSecondaryFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "otp-phone"
                    }
                  },
                  "coreConfig": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create or Update tenant result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "createdNew"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "createdNew": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/multitenancy/tenant/v2": {
      "put": {
        "summary": "Upsert tenant",
        "tags": ["Multitenancy Recipe"],
        "description": "Creates or updates a tenant.\n\nSuperTokens subscription license key is required.\n\nThe `firstFactors` can be set to following values:\n\n- `null`: When set to `null`, all the login methods will be available for the tenant.\n- `[]` (empty array): No login methods will be enabled for the tenant.\n- `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the tenant. For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.\n\nList of built-in first factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n\nIf first factors are not specified while creating a new tenant, all the login methods will be disabled by default.\n\nThe `requiredSecondaryFactors` can be set to following values:\n- `null`: When set to `null`, no secondary factors will be required for the users of the tenant.\n- `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the tenant must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.\n\nList of built-in secondary factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n- Time based OTP: `totp`\n\nIf updating an existing tenant,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nThe request must originate from public tenant, and the new tenant will use connectionUriDomain and app from which the request originates.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain, public app and tenant. In order to update config for the default connectionUriDomain, public app and tenant, you must edit the config.yaml or the docker env directly.\n",
        "operationId": "createOrUpdateTenantV2PUT",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["tenantId"],
                "properties": {
                  "tenantId": {
                    "type": "string",
                    "example": "customer1"
                  },
                  "firstFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "emailpassword"
                    }
                  },
                  "requiredSecondaryFactors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "otp-phone"
                    }
                  },
                  "coreConfig": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create or Update tenant result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "createdNew"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "createdNew": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/multitenancy/tenant": {
      "get": {
        "summary": "Get tenant configuration",
        "tags": ["Multitenancy Recipe"],
        "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371\n\nGet a tenant config of the tenant specified by the url prefix.\n\nSuperTokens subscription license key is required if querying any tenant other than the base tenant.\n\nReturns recipes with their enabled flag and recipe specific configs saved in core\n",
        "operationId": "tenantConfigGet",
        "deprecated": true,
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant config result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "tenantId": {
                          "type": "string",
                          "example": "customer1"
                        },
                        "emailPassword": {
                          "type": "object",
                          "required": ["enabled"],
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            }
                          }
                        },
                        "thirdParty": {
                          "type": "object",
                          "required": ["enabled"],
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "providers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": ["thirdPartyId"],
                                "properties": {
                                  "thirdPartyId": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "clients": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "clientType": {
                                          "type": "string"
                                        },
                                        "clientId": {
                                          "type": "string"
                                        },
                                        "clientSecret": {
                                          "type": "string"
                                        },
                                        "scope": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "forcePKCE": {
                                          "type": "boolean"
                                        },
                                        "additionalConfig": {
                                          "type": "object"
                                        }
                                      }
                                    }
                                  },
                                  "authorizationEndpoint": {
                                    "type": "string"
                                  },
                                  "authorizationEndpointQueryParams": {
                                    "type": "object"
                                  },
                                  "tokenEndpoint": {
                                    "type": "string"
                                  },
                                  "tokenEndpointBodyParams": {
                                    "type": "object"
                                  },
                                  "userInfoEndpoint": {
                                    "type": "string"
                                  },
                                  "userInfoEndpointQueryParams": {
                                    "type": "object"
                                  },
                                  "userInfoEndpointHeaders": {
                                    "type": "object"
                                  },
                                  "jwksURI": {
                                    "type": "string"
                                  },
                                  "oidcDiscoveryEndpoint": {
                                    "type": "string"
                                  },
                                  "requireEmail": {
                                    "type": "boolean",
                                    "default": true
                                  },
                                  "userInfoMap": {
                                    "type": "object",
                                    "properties": {
                                      "fromIdTokenPayload": {
                                        "type": "object",
                                        "properties": {
                                          "userId": {
                                            "type": "string"
                                          },
                                          "email": {
                                            "type": "string"
                                          },
                                          "emailVerified": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "fromUserInfoAPI": {
                                        "type": "object",
                                        "properties": {
                                          "userId": {
                                            "type": "string"
                                          },
                                          "email": {
                                            "type": "string"
                                          },
                                          "emailVerified": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "passwordless": {
                          "type": "object",
                          "required": ["enabled"],
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            }
                          }
                        },
                        "firstFactors": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "emailpassword"
                          }
                        },
                        "requiredSecondaryFactors": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "otp-phone"
                          }
                        },
                        "coreConfig": {
                          "type": "object"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["TENANT_NOT_FOUND_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/multitenancy/tenant/v2": {
      "get": {
        "summary": "Get tenant configuration",
        "tags": ["Multitenancy Recipe"],
        "description": "Get a tenant config of the tenant specified by the url prefix.\n\nThe value of `firstFactors` can be as follows:\n- `null`: When set to `null`, the SDK will use firstFactors defined in the SDK\n- `[]` (empty array): No first factors would be enabled for the tenant\n- non-empty array: The first factors that are enabled for the tenant\n\nSuperTokens subscription license key is required if querying any tenant other than the base tenant.\n\nReturns recipes with their enabled flag and recipe specific configs saved in core\n",
        "operationId": "tenantConfigV2Get",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant config result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "tenantId": {
                          "type": "string",
                          "example": "customer1"
                        },
                        "thirdParty": {
                          "type": "object",
                          "properties": {
                            "providers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": ["thirdPartyId"],
                                "properties": {
                                  "thirdPartyId": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "clients": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "clientType": {
                                          "type": "string"
                                        },
                                        "clientId": {
                                          "type": "string"
                                        },
                                        "clientSecret": {
                                          "type": "string"
                                        },
                                        "scope": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "forcePKCE": {
                                          "type": "boolean"
                                        },
                                        "additionalConfig": {
                                          "type": "object"
                                        }
                                      }
                                    }
                                  },
                                  "authorizationEndpoint": {
                                    "type": "string"
                                  },
                                  "authorizationEndpointQueryParams": {
                                    "type": "object"
                                  },
                                  "tokenEndpoint": {
                                    "type": "string"
                                  },
                                  "tokenEndpointBodyParams": {
                                    "type": "object"
                                  },
                                  "userInfoEndpoint": {
                                    "type": "string"
                                  },
                                  "userInfoEndpointQueryParams": {
                                    "type": "object"
                                  },
                                  "userInfoEndpointHeaders": {
                                    "type": "object"
                                  },
                                  "jwksURI": {
                                    "type": "string"
                                  },
                                  "oidcDiscoveryEndpoint": {
                                    "type": "string"
                                  },
                                  "requireEmail": {
                                    "type": "boolean",
                                    "default": true
                                  },
                                  "userInfoMap": {
                                    "type": "object",
                                    "properties": {
                                      "fromIdTokenPayload": {
                                        "type": "object",
                                        "properties": {
                                          "userId": {
                                            "type": "string"
                                          },
                                          "email": {
                                            "type": "string"
                                          },
                                          "emailVerified": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "fromUserInfoAPI": {
                                        "type": "object",
                                        "properties": {
                                          "userId": {
                                            "type": "string"
                                          },
                                          "email": {
                                            "type": "string"
                                          },
                                          "emailVerified": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "firstFactors": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "emailpassword"
                          }
                        },
                        "requiredSecondaryFactors": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "otp-phone"
                          }
                        },
                        "coreConfig": {
                          "type": "object"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["TENANT_NOT_FOUND_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/dashboard/tenant/core-config": {
      "get": {
        "tags": ["Dashboard Recipe"],
        "summary": "Get the core config",
        "description": "Get the core config of the tenant specified by the url prefix, along with the metadata of each of the fields.\n",
        "operationId": "tenantCoreConfigForDashboardGET",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant core config result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "config"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "config": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "password_reset_token_lifetime"
                          },
                          "valueType": {
                            "type": "string",
                            "enum": ["string", "number", "boolean"],
                            "nullable": true,
                            "example": "number"
                          },
                          "value": {
                            "nullable": true,
                            "type": "number",
                            "example": 3600000
                          },
                          "description": {
                            "type": "string",
                            "example": "Time in milliseconds for how long a password reset token / link is valid for. [Default: 3600000 (1 hour)]"
                          },
                          "isDifferentAcrossTenants": {
                            "type": "boolean"
                          },
                          "possibleValues": {
                            "nullable": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "isNullable": {
                            "type": "boolean",
                            "example": false
                          },
                          "defaultValue": {
                            "nullable": true,
                            "type": "number",
                            "example": 3600000
                          },
                          "isPluginProperty": {
                            "type": "boolean",
                            "example": false
                          },
                          "isPluginPropertyEditable": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/multitenancy/tenant/remove": {
      "post": {
        "summary": "Delete a tenant",
        "tags": ["Multitenancy Recipe"],
        "description": "Delete a tenant.\n\nRequest must originate from public tenant.\n",
        "operationId": "deleteTenantPOST",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["tenantId"],
                "properties": {
                  "tenantId": {
                    "type": "string",
                    "example": "customer1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Remove tenant result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "didExist"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "didExist": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/multitenancy/tenant/list": {
      "get": {
        "summary": "List tenants in an app",
        "tags": ["Multitenancy Recipe"],
        "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371\n\nGet a list of all tenants in an app.\n\nRequest must originate from public tenant.\n",
        "operationId": "tenantListGET",
        "deprecated": true,
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "tenants"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "tenants": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["emailPassword", "thirdParty", "passwordless", "coreConfig", "tenantId"],
                        "properties": {
                          "tenantId": {
                            "type": "string",
                            "example": "customer1"
                          },
                          "emailPassword": {
                            "type": "object",
                            "required": ["enabled"],
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              }
                            }
                          },
                          "thirdParty": {
                            "type": "object",
                            "required": ["enabled"],
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              },
                              "providers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": ["thirdPartyId"],
                                  "properties": {
                                    "thirdPartyId": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "clients": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "clientType": {
                                            "type": "string"
                                          },
                                          "clientId": {
                                            "type": "string"
                                          },
                                          "clientSecret": {
                                            "type": "string"
                                          },
                                          "scope": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "forcePKCE": {
                                            "type": "boolean"
                                          },
                                          "additionalConfig": {
                                            "type": "object"
                                          }
                                        }
                                      }
                                    },
                                    "authorizationEndpoint": {
                                      "type": "string"
                                    },
                                    "authorizationEndpointQueryParams": {
                                      "type": "object"
                                    },
                                    "tokenEndpoint": {
                                      "type": "string"
                                    },
                                    "tokenEndpointBodyParams": {
                                      "type": "object"
                                    },
                                    "userInfoEndpoint": {
                                      "type": "string"
                                    },
                                    "userInfoEndpointQueryParams": {
                                      "type": "object"
                                    },
                                    "userInfoEndpointHeaders": {
                                      "type": "object"
                                    },
                                    "jwksURI": {
                                      "type": "string"
                                    },
                                    "oidcDiscoveryEndpoint": {
                                      "type": "string"
                                    },
                                    "requireEmail": {
                                      "type": "boolean",
                                      "default": true
                                    },
                                    "userInfoMap": {
                                      "type": "object",
                                      "properties": {
                                        "fromIdTokenPayload": {
                                          "type": "object",
                                          "properties": {
                                            "userId": {
                                              "type": "string"
                                            },
                                            "email": {
                                              "type": "string"
                                            },
                                            "emailVerified": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "fromUserInfoAPI": {
                                          "type": "object",
                                          "properties": {
                                            "userId": {
                                              "type": "string"
                                            },
                                            "email": {
                                              "type": "string"
                                            },
                                            "emailVerified": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "passwordless": {
                            "type": "object",
                            "required": ["enabled"],
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              }
                            }
                          },
                          "firstFactors": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "emailpassword"
                            }
                          },
                          "requiredSecondaryFactors": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "otp-phone"
                            }
                          },
                          "coreConfig": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/multitenancy/tenant/list/v2": {
      "get": {
        "summary": "List tenants in an app",
        "tags": ["Multitenancy Recipe"],
        "description": "Get a list of all tenants in an app.\n\nThe value of `firstFactors` can be as follows:\n- `null`: When set to `null`, the SDK will use firstFactors defined in the SDK\n- `[]` (empty array): No first factors would be enabled for the tenant\n- non-empty array: The first factors that are enabled for the tenant\n\nRequest must originate from public tenant.\n",
        "operationId": "tenantListV2GET",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "tenants"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "tenants": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["thirdParty", "coreConfig", "tenantId"],
                        "properties": {
                          "tenantId": {
                            "type": "string",
                            "example": "customer1"
                          },
                          "thirdParty": {
                            "type": "object",
                            "properties": {
                              "providers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": ["thirdPartyId"],
                                  "properties": {
                                    "thirdPartyId": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "clients": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "clientType": {
                                            "type": "string"
                                          },
                                          "clientId": {
                                            "type": "string"
                                          },
                                          "clientSecret": {
                                            "type": "string"
                                          },
                                          "scope": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "forcePKCE": {
                                            "type": "boolean"
                                          },
                                          "additionalConfig": {
                                            "type": "object"
                                          }
                                        }
                                      }
                                    },
                                    "authorizationEndpoint": {
                                      "type": "string"
                                    },
                                    "authorizationEndpointQueryParams": {
                                      "type": "object"
                                    },
                                    "tokenEndpoint": {
                                      "type": "string"
                                    },
                                    "tokenEndpointBodyParams": {
                                      "type": "object"
                                    },
                                    "userInfoEndpoint": {
                                      "type": "string"
                                    },
                                    "userInfoEndpointQueryParams": {
                                      "type": "object"
                                    },
                                    "userInfoEndpointHeaders": {
                                      "type": "object"
                                    },
                                    "jwksURI": {
                                      "type": "string"
                                    },
                                    "oidcDiscoveryEndpoint": {
                                      "type": "string"
                                    },
                                    "requireEmail": {
                                      "type": "boolean",
                                      "default": true
                                    },
                                    "userInfoMap": {
                                      "type": "object",
                                      "properties": {
                                        "fromIdTokenPayload": {
                                          "type": "object",
                                          "properties": {
                                            "userId": {
                                              "type": "string"
                                            },
                                            "email": {
                                              "type": "string"
                                            },
                                            "emailVerified": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "fromUserInfoAPI": {
                                          "type": "object",
                                          "properties": {
                                            "userId": {
                                              "type": "string"
                                            },
                                            "email": {
                                              "type": "string"
                                            },
                                            "emailVerified": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "firstFactors": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "emailpassword"
                            }
                          },
                          "requiredSecondaryFactors": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "otp-phone"
                            }
                          },
                          "coreConfig": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/multitenancy/config/thirdparty": {
      "put": {
        "summary": "Upsert ThirdParty Provider configuration",
        "tags": ["Multitenancy Recipe"],
        "description": "Creates or updates ThirdParty Provider Config for a tenant.\n\nIf `skipValidation` is set to true, the config will be saved without any validation.\n\nIf the config already exists for the given `tenantId` and `thirdPartyId`, the config in the core will be completely replaced with the config provided in the request body.\n\n**Validations done by the core:**\n\n`thirdPartyId` and `name` are required\n\nCommon to all providers:\n  - `clients` list:\n    - can be undefined or empty\n    - if contains 1 element, clientType can be empty or undefined\n    - if contains more than 1 element, clientType must be defined and unique\n  - for each element in `clients`:\n    - `clientId` must not be empty\n\nBuilt-in provider's specific validation is invoked if the `thirdPartyId` starts with the provider's id\n\nApple (id: apple):\n  - `clients`\n    - if it contains elements, each of them are validated as follows:\n      - `clientSecret` must be empty or undefined\n      - `additionalConfig` should contain the following keys:\n        - `keyId` must be a non empty string\n        - `teamId` must be a non empty string\n        - `privateKey` must be a non empty string\n\nGoogle Workspaces (id: google-workspaces):\n  - `clients`\n    - if it contains elements, each of them are validated as follows:\n      - `additionalConfig` may contain the key `hd`\n        - `hd` is optional\n        - if specified, it must be either `\"*\"`, or a valid domain\n\nBoxy SAML (id: boxy-saml):\n  - `clients`\n    - `additionalConfig` in the each element must contain `boxyURL` and must be non-empty string\n",
        "operationId": "createOrUpdateTenantConfigPUT",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["config"],
                "properties": {
                  "config": {
                    "type": "object",
                    "required": ["thirdPartyId"],
                    "properties": {
                      "thirdPartyId": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "clients": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "clientType": {
                              "type": "string"
                            },
                            "clientId": {
                              "type": "string"
                            },
                            "clientSecret": {
                              "type": "string"
                            },
                            "scope": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "forcePKCE": {
                              "type": "boolean"
                            },
                            "additionalConfig": {
                              "type": "object"
                            }
                          }
                        }
                      },
                      "authorizationEndpoint": {
                        "type": "string"
                      },
                      "authorizationEndpointQueryParams": {
                        "type": "object"
                      },
                      "tokenEndpoint": {
                        "type": "string"
                      },
                      "tokenEndpointBodyParams": {
                        "type": "object"
                      },
                      "userInfoEndpoint": {
                        "type": "string"
                      },
                      "userInfoEndpointQueryParams": {
                        "type": "object"
                      },
                      "userInfoEndpointHeaders": {
                        "type": "object"
                      },
                      "jwksURI": {
                        "type": "string"
                      },
                      "oidcDiscoveryEndpoint": {
                        "type": "string"
                      },
                      "requireEmail": {
                        "type": "boolean",
                        "default": true
                      },
                      "userInfoMap": {
                        "type": "object",
                        "properties": {
                          "fromIdTokenPayload": {
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string"
                              },
                              "email": {
                                "type": "string"
                              },
                              "emailVerified": {
                                "type": "string"
                              }
                            }
                          },
                          "fromUserInfoAPI": {
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string"
                              },
                              "email": {
                                "type": "string"
                              },
                              "emailVerified": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "skipValidation": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create or Update result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": ["status", "createdNew"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "createdNew": {
                          "type": "boolean"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "reason"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["CONFIG_VALIDATION_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/multitenancy/config/thirdparty/remove": {
      "post": {
        "summary": "Delete ThirdParty Provider configuration",
        "tags": ["Multitenancy Recipe"],
        "description": "Delete ThirdParty Provider configuration for a tenant.\n",
        "operationId": "deleteTenantConfigPOST",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["thirdPartyId"],
                "properties": {
                  "thirdPartyId": {
                    "type": "string",
                    "example": "google"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Remove thirdParty config result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "didConfigExist": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/multitenancy/tenant/user": {
      "post": {
        "summary": "Add user tenant association",
        "tags": ["Multitenancy Recipe"],
        "description": "Add user's association with the tenant.\n\nUser will be added to the tenant based on the url prefix of the request.\n\nNote: To associate a user to a tenant, the tenant must be in the same database\nand user must already exist in the app\n",
        "operationId": "addUserToTenant",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["recipeUserId"],
                "properties": {
                  "recipeUserId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Association result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": ["status", "wasAlreadyAssociated"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "wasAlreadyAssociated": {
                          "type": "boolean"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "UNKNOWN_USER_ID_ERROR",
                            "EMAIL_ALREADY_EXISTS_ERROR",
                            "PHONE_NUMBER_ALREADY_EXISTS_ERROR",
                            "THIRD_PARTY_USER_ALREADY_EXISTS_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["ASSOCIATION_NOT_ALLOWED_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/multitenancy/tenant/user/remove": {
      "post": {
        "summary": "Remove user tenant association",
        "tags": ["Multitenancy Recipe"],
        "description": "Remove user's association with the tenant\n\nUser will be removed from the tenant based on the url prefix of the request.\n",
        "operationId": "removeUserFromTenant",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["recipeUserId"],
                "properties": {
                  "recipeUserId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Disassociation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "wasAssociated"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "wasAssociated": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/clients": {
      "get": {
        "summary": "Get OAuth2 Client",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Get OAuth2 Client\n",
        "operationId": "getOAuth2Client",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abcd"
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth2 Client Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": ["OK"]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                            },
                            "clientName": {
                              "type": "string",
                              "example": "Hello"
                            },
                            "clientSecret": {
                              "type": "string",
                              "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
                            },
                            "redirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000/auth/callback/ory"]
                            },
                            "grantTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["authorization_code", "refresh_token"]
                            },
                            "responseTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["code", "id_token"]
                            },
                            "scope": {
                              "type": "string",
                              "example": "offline_access openid email"
                            },
                            "audience": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "policyUri": {
                              "type": "string",
                              "example": ""
                            },
                            "allowedCorsOrigins": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "tosUri": {
                              "type": "string",
                              "example": ""
                            },
                            "clientUri": {
                              "type": "string",
                              "example": ""
                            },
                            "logoUri": {
                              "type": "string",
                              "example": ""
                            },
                            "tokenEndpointAuthMethod": {
                              "type": "string",
                              "example": "client_secret_post"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40.362463Z"
                            },
                            "postLogoutRedirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000"]
                            },
                            "metadata": {
                              "type": "object",
                              "additionalProperties": true,
                              "example": {}
                            },
                            "authorizationCodeGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "clientCredentialsGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "enableRefreshTokenRotation": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create OAuth2 Client",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Create OAuth2 Client\n",
        "operationId": "createOAuth2Client",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                  },
                  "clientName": {
                    "type": "string",
                    "example": "Hello"
                  },
                  "clientSecret": {
                    "type": "string",
                    "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
                  },
                  "redirectUris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["http://localhost:3000/auth/callback/ory"]
                  },
                  "grantTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["authorization_code", "refresh_token"]
                  },
                  "responseTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["code", "id_token"]
                  },
                  "scope": {
                    "type": "string",
                    "example": "offline_access openid email"
                  },
                  "audience": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": []
                  },
                  "policyUri": {
                    "type": "string",
                    "example": ""
                  },
                  "allowedCorsOrigins": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": []
                  },
                  "tosUri": {
                    "type": "string",
                    "example": ""
                  },
                  "clientUri": {
                    "type": "string",
                    "example": ""
                  },
                  "logoUri": {
                    "type": "string",
                    "example": ""
                  },
                  "tokenEndpointAuthMethod": {
                    "type": "string",
                    "example": "client_secret_post"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-02-24T08:14:40Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-02-24T08:14:40.362463Z"
                  },
                  "postLogoutRedirectUris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["http://localhost:3000"]
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": true,
                    "example": {}
                  },
                  "authorizationCodeGrantAccessTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "authorizationCodeGrantIdTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "authorizationCodeGrantRefreshTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "clientCredentialsGrantAccessTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "implicitGrantAccessTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "implicitGrantIdTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "refreshTokenGrantIdTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "refreshTokenGrantAccessTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "refreshTokenGrantRefreshTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "enableRefreshTokenRotation": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Client Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": ["OK"]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                            },
                            "clientName": {
                              "type": "string",
                              "example": "Hello"
                            },
                            "clientSecret": {
                              "type": "string",
                              "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
                            },
                            "redirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000/auth/callback/ory"]
                            },
                            "grantTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["authorization_code", "refresh_token"]
                            },
                            "responseTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["code", "id_token"]
                            },
                            "scope": {
                              "type": "string",
                              "example": "offline_access openid email"
                            },
                            "audience": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "policyUri": {
                              "type": "string",
                              "example": ""
                            },
                            "allowedCorsOrigins": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "tosUri": {
                              "type": "string",
                              "example": ""
                            },
                            "clientUri": {
                              "type": "string",
                              "example": ""
                            },
                            "logoUri": {
                              "type": "string",
                              "example": ""
                            },
                            "tokenEndpointAuthMethod": {
                              "type": "string",
                              "example": "client_secret_post"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40.362463Z"
                            },
                            "postLogoutRedirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000"]
                            },
                            "metadata": {
                              "type": "object",
                              "additionalProperties": true,
                              "example": {}
                            },
                            "authorizationCodeGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "clientCredentialsGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "enableRefreshTokenRotation": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update OAuth2 Client",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Update OAuth2 Client\n",
        "operationId": "updateOAuth2Client",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                  },
                  "clientName": {
                    "type": "string",
                    "example": "Hello"
                  },
                  "clientSecret": {
                    "type": "string",
                    "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
                  },
                  "redirectUris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["http://localhost:3000/auth/callback/ory"]
                  },
                  "grantTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["authorization_code", "refresh_token"]
                  },
                  "responseTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["code", "id_token"]
                  },
                  "scope": {
                    "type": "string",
                    "example": "offline_access openid email"
                  },
                  "audience": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": []
                  },
                  "policyUri": {
                    "type": "string",
                    "example": ""
                  },
                  "allowedCorsOrigins": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": []
                  },
                  "tosUri": {
                    "type": "string",
                    "example": ""
                  },
                  "clientUri": {
                    "type": "string",
                    "example": ""
                  },
                  "logoUri": {
                    "type": "string",
                    "example": ""
                  },
                  "tokenEndpointAuthMethod": {
                    "type": "string",
                    "example": "client_secret_post"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-02-24T08:14:40Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-02-24T08:14:40.362463Z"
                  },
                  "postLogoutRedirectUris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["http://localhost:3000"]
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": true,
                    "example": {}
                  },
                  "authorizationCodeGrantAccessTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "authorizationCodeGrantIdTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "authorizationCodeGrantRefreshTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "clientCredentialsGrantAccessTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "implicitGrantAccessTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "implicitGrantIdTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "refreshTokenGrantIdTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "refreshTokenGrantAccessTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "refreshTokenGrantRefreshTokenLifespan": {
                    "type": "string",
                    "nullable": true,
                    "example": "1h0m0s"
                  },
                  "enableRefreshTokenRotation": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Client Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": ["OK"]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                            },
                            "clientName": {
                              "type": "string",
                              "example": "Hello"
                            },
                            "clientSecret": {
                              "type": "string",
                              "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
                            },
                            "redirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000/auth/callback/ory"]
                            },
                            "grantTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["authorization_code", "refresh_token"]
                            },
                            "responseTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["code", "id_token"]
                            },
                            "scope": {
                              "type": "string",
                              "example": "offline_access openid email"
                            },
                            "audience": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "policyUri": {
                              "type": "string",
                              "example": ""
                            },
                            "allowedCorsOrigins": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "tosUri": {
                              "type": "string",
                              "example": ""
                            },
                            "clientUri": {
                              "type": "string",
                              "example": ""
                            },
                            "logoUri": {
                              "type": "string",
                              "example": ""
                            },
                            "tokenEndpointAuthMethod": {
                              "type": "string",
                              "example": "client_secret_post"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40.362463Z"
                            },
                            "postLogoutRedirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000"]
                            },
                            "metadata": {
                              "type": "object",
                              "additionalProperties": true,
                              "example": {}
                            },
                            "authorizationCodeGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "clientCredentialsGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "enableRefreshTokenRotation": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/clients/list": {
      "get": {
        "summary": "List OAuth2 Clients",
        "tags": ["OAuth2Provider Recipe"],
        "description": "List OAuth2 Clients\n",
        "operationId": "listOAuth2Clients",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 250
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          },
          {
            "name": "clientName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "My App"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth2 Client Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "clients": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "clientId": {
                                "type": "string",
                                "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                              },
                              "clientName": {
                                "type": "string",
                                "example": "Hello"
                              },
                              "clientSecret": {
                                "type": "string",
                                "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
                              },
                              "redirectUris": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": ["http://localhost:3000/auth/callback/ory"]
                              },
                              "grantTypes": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": ["authorization_code", "refresh_token"]
                              },
                              "responseTypes": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": ["code", "id_token"]
                              },
                              "scope": {
                                "type": "string",
                                "example": "offline_access openid email"
                              },
                              "audience": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": []
                              },
                              "policyUri": {
                                "type": "string",
                                "example": ""
                              },
                              "allowedCorsOrigins": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": []
                              },
                              "tosUri": {
                                "type": "string",
                                "example": ""
                              },
                              "clientUri": {
                                "type": "string",
                                "example": ""
                              },
                              "logoUri": {
                                "type": "string",
                                "example": ""
                              },
                              "tokenEndpointAuthMethod": {
                                "type": "string",
                                "example": "client_secret_post"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-02-24T08:14:40Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-02-24T08:14:40.362463Z"
                              },
                              "postLogoutRedirectUris": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": ["http://localhost:3000"]
                              },
                              "metadata": {
                                "type": "object",
                                "additionalProperties": true,
                                "example": {}
                              },
                              "authorizationCodeGrantAccessTokenLifespan": {
                                "type": "string",
                                "nullable": true,
                                "example": "1h0m0s"
                              },
                              "authorizationCodeGrantIdTokenLifespan": {
                                "type": "string",
                                "nullable": true,
                                "example": "1h0m0s"
                              },
                              "authorizationCodeGrantRefreshTokenLifespan": {
                                "type": "string",
                                "nullable": true,
                                "example": "1h0m0s"
                              },
                              "clientCredentialsGrantAccessTokenLifespan": {
                                "type": "string",
                                "nullable": true,
                                "example": "1h0m0s"
                              },
                              "implicitGrantAccessTokenLifespan": {
                                "type": "string",
                                "nullable": true,
                                "example": "1h0m0s"
                              },
                              "implicitGrantIdTokenLifespan": {
                                "type": "string",
                                "nullable": true,
                                "example": "1h0m0s"
                              },
                              "refreshTokenGrantIdTokenLifespan": {
                                "type": "string",
                                "nullable": true,
                                "example": "1h0m0s"
                              },
                              "refreshTokenGrantAccessTokenLifespan": {
                                "type": "string",
                                "nullable": true,
                                "example": "1h0m0s"
                              },
                              "refreshTokenGrantRefreshTokenLifespan": {
                                "type": "string",
                                "nullable": true,
                                "example": "1h0m0s"
                              },
                              "enableRefreshTokenRotation": {
                                "type": "boolean",
                                "example": false
                              }
                            }
                          }
                        },
                        "nextPaginationToken": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/clients/remove": {
      "post": {
        "summary": "Remove OAuth2 Client",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Remove OAuth2 Client\n",
        "operationId": "removeOAuth2Client",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Client Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "didExist": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/auth/requests/consent": {
      "get": {
        "summary": "Get OAuth2 Consent Request",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Get OAuth2 Consent Request\n",
        "operationId": "getOAuth2ConsentRequest",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consentChallenge",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth2 Consent Request Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "client": {
                          "type": "object",
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                            },
                            "clientName": {
                              "type": "string",
                              "example": "Hello"
                            },
                            "clientSecret": {
                              "type": "string",
                              "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
                            },
                            "redirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000/auth/callback/ory"]
                            },
                            "grantTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["authorization_code", "refresh_token"]
                            },
                            "responseTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["code", "id_token"]
                            },
                            "scope": {
                              "type": "string",
                              "example": "offline_access openid email"
                            },
                            "audience": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "policyUri": {
                              "type": "string",
                              "example": ""
                            },
                            "allowedCorsOrigins": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "tosUri": {
                              "type": "string",
                              "example": ""
                            },
                            "clientUri": {
                              "type": "string",
                              "example": ""
                            },
                            "logoUri": {
                              "type": "string",
                              "example": ""
                            },
                            "tokenEndpointAuthMethod": {
                              "type": "string",
                              "example": "client_secret_post"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40.362463Z"
                            },
                            "postLogoutRedirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000"]
                            },
                            "metadata": {
                              "type": "object",
                              "additionalProperties": true,
                              "example": {}
                            },
                            "authorizationCodeGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "clientCredentialsGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "enableRefreshTokenRotation": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        },
                        "requestedScope": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "requestedAudience": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "requestedClaims": {
                          "type": "object",
                          "properties": {
                            "idToken": {
                              "type": "object",
                              "properties": {
                                "property1": {
                                  "type": "string"
                                },
                                "property2": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "loginHint": {
                          "type": "string"
                        },
                        "uiLocales": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "acrValues": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "subject": {
                          "type": "string"
                        },
                        "requestUrl": {
                          "type": "string"
                        },
                        "skip": {
                          "type": "boolean"
                        },
                        "clientId": {
                          "type": "string"
                        },
                        "redirectUri": {
                          "type": "string"
                        },
                        "forceSubjectIdentifier": {
                          "type": "string"
                        },
                        "requestedAccessTokenAudience": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "context": {
                          "type": "object"
                        },
                        "sessionId": {
                          "type": "string"
                        },
                        "loginSessionId": {
                          "type": "string"
                        },
                        "loginChallenge": {
                          "type": "string"
                        },
                        "loginRequestedAt": {
                          "type": "string"
                        },
                        "consentRequestedAt": {
                          "type": "string"
                        },
                        "consentChallenge": {
                          "type": "string"
                        },
                        "consentSkip": {
                          "type": "boolean"
                        },
                        "consentRemember": {
                          "type": "boolean"
                        },
                        "consentRememberFor": {
                          "type": "integer"
                        },
                        "consentError": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "consentErrorDebug": {
                          "type": "string"
                        },
                        "consentErrorDescription": {
                          "type": "string"
                        },
                        "consentErrorHint": {
                          "type": "string"
                        },
                        "consentErrorCode": {
                          "type": "string"
                        },
                        "consentStatusCode": {
                          "type": "integer"
                        },
                        "sessionIdToken": {
                          "type": "object",
                          "properties": {
                            "property1": {
                              "type": "string"
                            },
                            "property2": {
                              "type": "string"
                            }
                          }
                        },
                        "sessionAccessToken": {
                          "type": "object",
                          "properties": {
                            "property1": {
                              "type": "string"
                            },
                            "property2": {
                              "type": "string"
                            }
                          }
                        },
                        "sessionToken": {
                          "type": "object",
                          "properties": {
                            "property1": {
                              "type": "string"
                            },
                            "property2": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/auth/requests/consent/accept": {
      "put": {
        "summary": "Accept OAuth2 Consent Request",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Accept OAuth2 Consent Request\n",
        "operationId": "acceptOAuth2ConsentRequest",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consentChallenge",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "object"
                  },
                  "grantAccessTokenAudience": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "grantScope": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "handledAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-08-24T14:15:22Z"
                  },
                  "remember": {
                    "type": "boolean"
                  },
                  "rememberFor": {
                    "type": "integer"
                  },
                  "session": {
                    "type": "object",
                    "properties": {
                      "accessToken": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "idToken": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Consent Request Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "redirectTo": {
                          "type": "string",
                          "example": "{apiDomain}/oauth/consent?..."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/auth/requests/consent/reject": {
      "put": {
        "summary": "Reject OAuth2 Consent Request",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Reject OAuth2 Consent Request\n",
        "operationId": "rejectOAuth2ConsentRequest",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consentChallenge",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string"
                  },
                  "errorDebug": {
                    "type": "string"
                  },
                  "errorDescription": {
                    "type": "string"
                  },
                  "errorHint": {
                    "type": "string"
                  },
                  "statusCode": {
                    "type": "integer",
                    "example": 400
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Consent Request Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "redirectTo": {
                          "type": "string",
                          "example": "{apiDomain}/oauth/consent?..."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/auth/requests/login": {
      "get": {
        "summary": "Get OAuth2 Login Request",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Get OAuth2 Login Request\n",
        "operationId": "getOAuth2LoginRequest",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loginChallenge",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth2 Login Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "challenge": {
                          "type": "string"
                        },
                        "client": {
                          "type": "object",
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                            },
                            "clientName": {
                              "type": "string",
                              "example": "Hello"
                            },
                            "clientSecret": {
                              "type": "string",
                              "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
                            },
                            "redirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000/auth/callback/ory"]
                            },
                            "grantTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["authorization_code", "refresh_token"]
                            },
                            "responseTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["code", "id_token"]
                            },
                            "scope": {
                              "type": "string",
                              "example": "offline_access openid email"
                            },
                            "audience": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "policyUri": {
                              "type": "string",
                              "example": ""
                            },
                            "allowedCorsOrigins": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "tosUri": {
                              "type": "string",
                              "example": ""
                            },
                            "clientUri": {
                              "type": "string",
                              "example": ""
                            },
                            "logoUri": {
                              "type": "string",
                              "example": ""
                            },
                            "tokenEndpointAuthMethod": {
                              "type": "string",
                              "example": "client_secret_post"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40.362463Z"
                            },
                            "postLogoutRedirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000"]
                            },
                            "metadata": {
                              "type": "object",
                              "additionalProperties": true,
                              "example": {}
                            },
                            "authorizationCodeGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "clientCredentialsGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "enableRefreshTokenRotation": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        },
                        "oidcContext": {
                          "type": "object",
                          "properties": {
                            "acrValues": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "display": {
                              "type": "string"
                            },
                            "idTokenHintClaims": {
                              "type": "object"
                            },
                            "loginHint": {
                              "type": "string"
                            },
                            "uiLocales": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "requestUrl": {
                              "type": "string"
                            },
                            "requestedAccessTokenAudience": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "requestedScope": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "sessionId": {
                              "type": "string"
                            },
                            "skip": {
                              "type": "boolean"
                            },
                            "subject": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/auth/requests/login/accept": {
      "put": {
        "summary": "Accept OAuth2 Login Request",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Accept OAuth2 Login Request\n",
        "operationId": "acceptOAuth2LoginRequest",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loginChallenge",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["subject"],
                "properties": {
                  "acr": {
                    "type": "string"
                  },
                  "amr": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "context": {
                    "type": "string",
                    "nullable": true
                  },
                  "extendSessionLifespan": {
                    "type": "boolean",
                    "example": true
                  },
                  "forceSubjectIdentifier": {
                    "type": "string"
                  },
                  "identityProviderSessionId": {
                    "type": "string"
                  },
                  "remember": {
                    "type": "boolean",
                    "example": true
                  },
                  "rememberFor": {
                    "type": "integer",
                    "example": 0
                  },
                  "subject": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Login Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "redirectTo": {
                          "type": "string",
                          "example": "{apiDomain}/oauth/login?..."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/auth/requests/login/reject": {
      "put": {
        "summary": "Reject OAuth2 Login Request",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Reject OAuth2 Login Request\n",
        "operationId": "rejectOAuth2LoginRequest",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loginChallenge",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string"
                  },
                  "errorDebug": {
                    "type": "string"
                  },
                  "errorDescription": {
                    "type": "string"
                  },
                  "errorHint": {
                    "type": "string"
                  },
                  "statusCode": {
                    "type": "integer",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Login Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "redirectTo": {
                          "type": "string",
                          "example": "{apiDomain}/oauth/login?..."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/auth/requests/logout/accept": {
      "put": {
        "summary": "Accept OAuth2 Logout Request",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Accept OAuth2 Logout Request\n",
        "operationId": "acceptOAuth2LogoutRequest",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "challenge": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Logout Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "redirectTo": {
                          "type": "string",
                          "example": "{apiDomain}/oauth/logout?..."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/auth/requests/logout/reject": {
      "put": {
        "summary": "Reject OAuth2 Logout Request",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Reject OAuth2 Logout Request\n",
        "operationId": "rejectOAuth2LogoutRequest",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "challenge": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Logout Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/session/revoke": {
      "post": {
        "summary": "Revoke OAuth2 Session",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Revoke OAuth2 Session\n",
        "operationId": "revokeOAuth2Session",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionHandle": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Session Revocation Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "didExist": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/token/revoke": {
      "post": {
        "summary": "Revoke OAuth2 Token",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Revoke OAuth2 Token\n",
        "operationId": "revokeOAuth2Token",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Token Revocation Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "didExist": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/tokens/revoke": {
      "post": {
        "summary": "Revoke OAuth2 Token",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Revoke OAuth2 Token\n",
        "operationId": "revokeOAuth2Tokens",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "example": "stcl_fed7cff0-cc6e-406e-b7a6-766148675a4a"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Token Revocation Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "didExist": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/auth": {
      "get": {
        "summary": "Get OAuth2 Auth",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Get OAuth2 Auth\n",
        "operationId": "getOAuth2Auth",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth2 Auth Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": ["OK"]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
                            },
                            "clientName": {
                              "type": "string",
                              "example": "Hello"
                            },
                            "clientSecret": {
                              "type": "string",
                              "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
                            },
                            "redirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000/auth/callback/ory"]
                            },
                            "grantTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["authorization_code", "refresh_token"]
                            },
                            "responseTypes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["code", "id_token"]
                            },
                            "scope": {
                              "type": "string",
                              "example": "offline_access openid email"
                            },
                            "audience": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "policyUri": {
                              "type": "string",
                              "example": ""
                            },
                            "allowedCorsOrigins": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": []
                            },
                            "tosUri": {
                              "type": "string",
                              "example": ""
                            },
                            "clientUri": {
                              "type": "string",
                              "example": ""
                            },
                            "logoUri": {
                              "type": "string",
                              "example": ""
                            },
                            "tokenEndpointAuthMethod": {
                              "type": "string",
                              "example": "client_secret_post"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2025-02-24T08:14:40.362463Z"
                            },
                            "postLogoutRedirectUris": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": ["http://localhost:3000"]
                            },
                            "metadata": {
                              "type": "object",
                              "additionalProperties": true,
                              "example": {}
                            },
                            "authorizationCodeGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "authorizationCodeGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "clientCredentialsGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "implicitGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantIdTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantAccessTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "refreshTokenGrantRefreshTokenLifespan": {
                              "type": "string",
                              "nullable": true,
                              "example": "1h0m0s"
                            },
                            "enableRefreshTokenRotation": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/token": {
      "post": {
        "summary": "Get OAuth2 Token",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Get OAuth2 Token\n",
        "operationId": "getOAuth2Token",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "iss": {
                    "type": "string",
                    "example": "https://api.auth.com"
                  },
                  "inputBody": {
                    "type": "object",
                    "example": {}
                  },
                  "useStaticSigningKey": {
                    "type": "boolean",
                    "example": false
                  },
                  "authorizationHeader": {
                    "type": "string",
                    "example": "Bearer 1234567890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Token Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": ["status", "access_token"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "access_token": {
                          "type": "string",
                          "example": "eyJraWQiOiJzLTBjZmVmMDdkLWQ2NDktNGIwOC04MTVjLWJkYjZlYTczNWQyZCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJpYXQiOjE3NDAzODU5MzcsImV4cCI6MTc0MDM4OTUzOCwiY2xpZW50X2lkIjoic3RjbF82NWUwODc1Mi0yYzU5LTQ5NjQtOTM0Yy02OTIwZDJmMDZlNjIiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjMwMDEvYXV0aCIsImp0aSI6Ijc1NTc2MmFmLTUwYTUtNDc1ZS04YWRkLTg3MDA1ZmU3YWJlNiIsIm5iZiI6MTc0MDM4NTkzNywic2NwIjpbIm9wZW5pZCIsIm9mZmxpbmVfYWNjZXNzIl0sInN1YiI6InNvbWV1c2VyaWQiLCJzdHQiOjEsImdpZCI6ImRjOGQ0OGUzLTcwOTgtNDhhNi1hYjU0LTgxMWMyODQ4N2I4MiIsInRJZCI6InB1YmxpYyIsInJzdWIiOiJzb21ldXNlcmlkIiwic2Vzc2lvbkhhbmRsZSI6InNlc3Npb24taGFuZGxlIn0.DgVgtD2gXgzHrDsC2lIUBa-wsYm8KO4Pg8L1Ov3aSBVgjwtjiCO40ldjBZ9qKdQBq5Qqk0ElAZNj6Bzc40ESfQumLH3_N2XtOj568s71JPuEOIg5hs9XAdK4vYfXMhVQRWn9iPUKHKrpRVf73IIH0mpkN8i6_MhcDoMMOuG5XPlXajG9VOyoY_5saHA61-uTafZLdAgKqnmYGvS8KmNEcEbBWLGwFB4QQKiDAUvatIi5n3juFBUxyt9t6DrqT1D04shesRppa0XhCZbCFBv1dixSrprdtqKhlPOrMgvOGNZ3cBLbYBOG9zoJRD5YlVMGw-j_pE7IbvpDWKL7tTJS1Q"
                        },
                        "expires_in": {
                          "type": "integer",
                          "example": 3599
                        },
                        "id_token": {
                          "type": "string",
                          "example": "eyJraWQiOiJzLTBjZmVmMDdkLWQ2NDktNGIwOC04MTVjLWJkYjZlYTczNWQyZCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJpYXQiOjE3NDAzODU5MzgsImV4cCI6MTc0MDM4OTUzOCwiYXRfaGFzaCI6IkNxOGNCSk01Nm5FcG9aaWREcnZvLVEiLCJhdWQiOiJzdGNsXzY1ZTA4NzUyLTJjNTktNDk2NC05MzRjLTY5MjBkMmYwNmU2MiIsImF1dGhfdGltZSI6MTc0MDM4NTkzNywiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDozMDAxL2F1dGgiLCJqdGkiOiIxZDA5OGUxZi04ZGIxLTQyNzUtYmMzYS0zYTA4NjdjOWE2NTAiLCJyYXQiOjE3NDAzODU3MzEsInNpZCI6InNlc3Npb24taGFuZGxlIiwic3ViIjoic29tZXVzZXJpZCIsInN0dCI6MiwiZ2lkIjoiYzk1OTVjYjItMWFjOS00MDI0LWFjNjMtNDJlZDEyODliY2RmIn0.PGsemf1qpLF-cE_616NHvKsRmanFiyba0yqF2j5fy87AWD5McI405A4eqi-wAlKsDxC-MPpuW8bx-08YUhs3x6ku4aFaDyA-M-Xhc65fJJ4SCPVaUL7qlUwl7wJwNs2rMRW3Ayyj4MDSlW5uqm39_K_bBqod2Qj1yqck-N0g78qh86uEcyX6Al3d5KSln1B21nwDsEgegk3xzE8lFMCQUTpZEYb5-1v2D0Bu_PblBfOCjA6mBtT1IIQkmSE27FvkTUS1H50EUyhFP4JH30kP3bUnQ9pOqGMTe405N2ruKtPyWsXHLPlQ4hcJCLO5GT5ZgtUjfz6Y3mCM9l69uDYDHg"
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "st_rt_d7LI9mGYHF2TAaVEFJi7fqOWo8ZQ8zEGpuxhHQs0R18.UZ0nbTuuYuDD8G54PCD8AKHdsh9cezu8BTxVlTy7pYw"
                        },
                        "scope": {
                          "type": "string",
                          "example": "openid offline_access"
                        },
                        "token_type": {
                          "type": "string",
                          "example": "bearer"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/sessions/logout": {
      "get": {
        "summary": "Get OAuth2 Sessions Logout",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Get OAuth2 Sessions Logout\n",
        "operationId": "getOAuth2SessionsLogout",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "stcl_fed7cff0-cc6e-406e-b7a6-766148675a4a"
            }
          },
          {
            "name": "idTokenHint",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postLogoutRedirectUri",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth2 Sessions Logout Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "redirectTo": {
                          "type": "string",
                          "example": "{apiDomain}/oauth/logout?..."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/recipe/oauth/introspect": {
      "post": {
        "summary": "Introspect OAuth2 Token",
        "tags": ["OAuth2Provider Recipe"],
        "description": "Introspect OAuth2 Token\n",
        "operationId": "introspectOAuth2Token",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/oauthRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token"],
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth2 Token Introspection Result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "active": {
                          "type": "boolean"
                        },
                        "iat": {
                          "type": "integer",
                          "example": 1740992368
                        },
                        "exp": {
                          "type": "integer",
                          "example": 1740995969
                        },
                        "client_id": {
                          "type": "string",
                          "example": "stcl_fed7cff0-cc6e-406e-b7a6-766148675a4a"
                        },
                        "iss": {
                          "type": "string",
                          "example": "http://localhost:3001/auth"
                        },
                        "jti": {
                          "type": "string",
                          "example": "1c229efe-c55b-44c1-98cf-9fa3a366502e"
                        },
                        "nbf": {
                          "type": "integer",
                          "example": 1740992368
                        },
                        "scp": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["openid", "offline_access"]
                        },
                        "sub": {
                          "type": "string",
                          "example": "137d053d-0d69-4dea-8a19-06ddbdfa4f96"
                        },
                        "stt": {
                          "type": "integer",
                          "example": 1
                        },
                        "sessionHandle": {
                          "type": "string",
                          "example": "87bcc2d8-f159-4e10-a097-0898179a2d7d"
                        },
                        "rsub": {
                          "type": "string",
                          "example": "137d053d-0d69-4dea-8a19-06ddbdfa4f96"
                        },
                        "tId": {
                          "type": "string",
                          "example": "public"
                        },
                        "gid": {
                          "type": "string",
                          "example": "575b7130-d982-4945-be49-3ecde2a49eaa"
                        },
                        "token_type": {
                          "type": "string",
                          "example": "Bearer"
                        },
                        "token_use": {
                          "type": "string",
                          "example": "access_token"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["status", "error", "errorDescription", "statusCode"],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OAUTH_ERROR"]
                        },
                        "error": {
                          "type": "string"
                        },
                        "errorDescription": {
                          "type": "string"
                        },
                        "statusCode": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "402": {
            "description": "error code 402",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["License Error"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/bulk-import/users": {
      "get": {
        "summary": "List bulk import users",
        "tags": ["Bulk Import"],
        "operationId": "getBulkImportUsers",
        "description": "Paginated API to get bulk import users\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "example": "ZmE3YTA4NDEtY...MjM5MTgwMzIyMzE=",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "$ref": "#/components/parameters/bulkImportUserStatus"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated Bulk Import Users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "fa7a0841-b533-4478-9253-0fde890c576"
                          },
                          "status": {
                            "type": "string",
                            "enum": ["NEW", "PROCESSING", "FAILED"]
                          },
                          "createdAt": {
                            "type": "number",
                            "example": 1623918032231
                          },
                          "updatedAt": {
                            "type": "number",
                            "example": 1623918032231
                          }
                        },
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalUserId": {
                                "type": "string",
                                "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                              },
                              "userMetadata": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "description": "should be a JSON object (not a JSON literal nor an array)",
                                  "example": {
                                    "preferences": {
                                      "theme": "dark"
                                    },
                                    "notifications": {
                                      "email": true
                                    },
                                    "todos": ["example"]
                                  }
                                }
                              },
                              "userRoles": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "role": {
                                      "type": "string",
                                      "example": "admin"
                                    },
                                    "tenantIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "example": "customer1"
                                      }
                                    }
                                  },
                                  "required": ["role", "tenantIds"]
                                }
                              },
                              "totpDevices": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "secretKey": {
                                      "type": "string",
                                      "example": "2PRXZWZAYYDAWCD"
                                    },
                                    "skew": {
                                      "type": "number",
                                      "example": 0
                                    },
                                    "period": {
                                      "type": "number",
                                      "example": 30
                                    },
                                    "deviceName": {
                                      "type": "string",
                                      "example": "My Authy App"
                                    }
                                  },
                                  "required": ["secretKey"]
                                }
                              },
                              "loginMethods": {
                                "type": "array",
                                "items": {
                                  "anyOf": [
                                    {
                                      "name": "Email/Password Login Method",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "tenantIds": {
                                              "type": "array",
                                              "description": "List of tenant IDs this login method is associated with",
                                              "items": {
                                                "type": "string",
                                                "example": "customer1"
                                              }
                                            },
                                            "isVerified": {
                                              "type": "boolean",
                                              "description": "Indicates whether the email is verified"
                                            },
                                            "isPrimary": {
                                              "type": "boolean",
                                              "description": "Indicates whether the login method is the primary login method"
                                            },
                                            "timeJoinedInMSSinceEpoch": {
                                              "type": "integer",
                                              "description": "Time joined in milliseconds since the epoch"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "recipeId": {
                                              "type": "string",
                                              "example": "emailpassword"
                                            },
                                            "email": {
                                              "type": "string",
                                              "example": "johndoe@gmail.com"
                                            },
                                            "passwordHash": {
                                              "type": "string",
                                              "example": "$argon2d$v=19$m=12,t=3,p=1$aGI4enNvMmd0Zm0wMDAwMA$r6p7qbr6HD+8CD7sBi4HVw"
                                            },
                                            "plainTextPassword": {
                                              "type": "string",
                                              "example": "passwordExample"
                                            },
                                            "hashingAlgorithm": {
                                              "type": "string",
                                              "enum": ["argon2", "bcrypt", "firebase_scrypt"]
                                            }
                                          },
                                          "required": ["email", "passwordHash", "hashingAlgorithm"]
                                        }
                                      ]
                                    },
                                    {
                                      "name": "Third Party Login Method",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "tenantIds": {
                                              "type": "array",
                                              "description": "List of tenant IDs this login method is associated with",
                                              "items": {
                                                "type": "string",
                                                "example": "customer1"
                                              }
                                            },
                                            "isVerified": {
                                              "type": "boolean",
                                              "description": "Indicates whether the email is verified"
                                            },
                                            "isPrimary": {
                                              "type": "boolean",
                                              "description": "Indicates whether the login method is the primary login method"
                                            },
                                            "timeJoinedInMSSinceEpoch": {
                                              "type": "integer",
                                              "description": "Time joined in milliseconds since the epoch"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "recipeId": {
                                              "type": "string",
                                              "example": "thirdparty"
                                            },
                                            "thirdPartyId": {
                                              "type": "string",
                                              "example": "google"
                                            },
                                            "thirdPartyUserId": {
                                              "type": "string",
                                              "example": 106347997792363870000
                                            }
                                          },
                                          "required": ["thirdPartyId", "thirdPartyUserId"]
                                        }
                                      ]
                                    },
                                    {
                                      "name": "Passwordless Login Method",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "tenantIds": {
                                              "type": "array",
                                              "description": "List of tenant IDs this login method is associated with",
                                              "items": {
                                                "type": "string",
                                                "example": "customer1"
                                              }
                                            },
                                            "isVerified": {
                                              "type": "boolean",
                                              "description": "Indicates whether the email is verified"
                                            },
                                            "isPrimary": {
                                              "type": "boolean",
                                              "description": "Indicates whether the login method is the primary login method"
                                            },
                                            "timeJoinedInMSSinceEpoch": {
                                              "type": "integer",
                                              "description": "Time joined in milliseconds since the epoch"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "recipeId": {
                                              "type": "string",
                                              "example": "passwordless"
                                            }
                                          }
                                        }
                                      ],
                                      "oneOf": [
                                        {
                                          "type": "string",
                                          "example": "johndoe@gmail.com"
                                        },
                                        {
                                          "type": "string",
                                          "example": "+14155552671"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "nextPaginationToken": {
                      "type": "string",
                      "example": "ZmE3YTA4ND...OzE2MjM5MTgwMzIyMzE="
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add bulk import users",
        "tags": ["Bulk Import"],
        "operationId": "addBulkImportUsers",
        "description": "Add users for bulk import. Maximum 10000 users can be added in one request.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "userMetadata": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "should be a JSON object (not a JSON literal nor an array)",
                            "example": {
                              "preferences": {
                                "theme": "dark"
                              },
                              "notifications": {
                                "email": true
                              },
                              "todos": ["example"]
                            }
                          }
                        },
                        "userRoles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "role": {
                                "type": "string",
                                "example": "admin"
                              },
                              "tenantIds": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "customer1"
                                }
                              }
                            },
                            "required": ["role", "tenantIds"]
                          }
                        },
                        "totpDevices": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "secretKey": {
                                "type": "string",
                                "example": "2PRXZWZAYYDAWCD"
                              },
                              "skew": {
                                "type": "number",
                                "example": 0
                              },
                              "period": {
                                "type": "number",
                                "example": 30
                              },
                              "deviceName": {
                                "type": "string",
                                "example": "My Authy App"
                              }
                            },
                            "required": ["secretKey"]
                          }
                        },
                        "loginMethods": {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "name": "Email/Password Login Method",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "tenantIds": {
                                        "type": "array",
                                        "description": "List of tenant IDs this login method is associated with",
                                        "items": {
                                          "type": "string",
                                          "example": "customer1"
                                        }
                                      },
                                      "isVerified": {
                                        "type": "boolean",
                                        "description": "Indicates whether the email is verified"
                                      },
                                      "isPrimary": {
                                        "type": "boolean",
                                        "description": "Indicates whether the login method is the primary login method"
                                      },
                                      "timeJoinedInMSSinceEpoch": {
                                        "type": "integer",
                                        "description": "Time joined in milliseconds since the epoch"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "recipeId": {
                                        "type": "string",
                                        "example": "emailpassword"
                                      },
                                      "email": {
                                        "type": "string",
                                        "example": "johndoe@gmail.com"
                                      },
                                      "passwordHash": {
                                        "type": "string",
                                        "example": "$argon2d$v=19$m=12,t=3,p=1$aGI4enNvMmd0Zm0wMDAwMA$r6p7qbr6HD+8CD7sBi4HVw"
                                      },
                                      "plainTextPassword": {
                                        "type": "string",
                                        "example": "passwordExample"
                                      },
                                      "hashingAlgorithm": {
                                        "type": "string",
                                        "enum": ["argon2", "bcrypt", "firebase_scrypt"]
                                      }
                                    },
                                    "required": ["email", "passwordHash", "hashingAlgorithm"]
                                  }
                                ]
                              },
                              {
                                "name": "Third Party Login Method",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "tenantIds": {
                                        "type": "array",
                                        "description": "List of tenant IDs this login method is associated with",
                                        "items": {
                                          "type": "string",
                                          "example": "customer1"
                                        }
                                      },
                                      "isVerified": {
                                        "type": "boolean",
                                        "description": "Indicates whether the email is verified"
                                      },
                                      "isPrimary": {
                                        "type": "boolean",
                                        "description": "Indicates whether the login method is the primary login method"
                                      },
                                      "timeJoinedInMSSinceEpoch": {
                                        "type": "integer",
                                        "description": "Time joined in milliseconds since the epoch"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "recipeId": {
                                        "type": "string",
                                        "example": "thirdparty"
                                      },
                                      "thirdPartyId": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "thirdPartyUserId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    },
                                    "required": ["thirdPartyId", "thirdPartyUserId"]
                                  }
                                ]
                              },
                              {
                                "name": "Passwordless Login Method",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "tenantIds": {
                                        "type": "array",
                                        "description": "List of tenant IDs this login method is associated with",
                                        "items": {
                                          "type": "string",
                                          "example": "customer1"
                                        }
                                      },
                                      "isVerified": {
                                        "type": "boolean",
                                        "description": "Indicates whether the email is verified"
                                      },
                                      "isPrimary": {
                                        "type": "boolean",
                                        "description": "Indicates whether the login method is the primary login method"
                                      },
                                      "timeJoinedInMSSinceEpoch": {
                                        "type": "integer",
                                        "description": "Time joined in milliseconds since the epoch"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "recipeId": {
                                        "type": "string",
                                        "example": "passwordless"
                                      }
                                    }
                                  }
                                ],
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  {
                                    "type": "string",
                                    "example": "+14155552671"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "required": ["users"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk Import Users added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "users": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "loginMethods": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "recipeId": {
                                "type": "string",
                                "example": "emailpassword"
                              },
                              "userId": {
                                "type": "string",
                                "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                              },
                              "tenants": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "customer1"
                                }
                              },
                              "email": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              },
                              "thirdpartyId": {
                                "type": "string",
                                "example": "google"
                              },
                              "thirdpartyUserId": {
                                "type": "string",
                                "example": 106347997792363870000
                              },
                              "phoneNumber": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "required": ["recipeId", "userId", "tenants", "email"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more users have invalid schema",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Data has missing or invalid fields. Please check the users field for more details."
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "number",
                            "example": 0,
                            "description": "Index of the user in the users array that has invalid schema"
                          },
                          "errors": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "List of errors for the user",
                              "example": "Invalid recipeId for loginMethod. Pass one of emailpassword, thirdparty or, passwordless!"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/bulk-import/users/remove": {
      "post": {
        "summary": "Delete bulk import users",
        "tags": ["Bulk Import"],
        "operationId": "deleteBulkImportUsers",
        "description": "Delete bulk import users by id. Multiple ids can be passed in the request body.\n",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "description": "List of bulk import user ids to be deleted",
                    "items": {
                      "type": "string",
                      "example": "fa7a0841-b533-4478-9253-0fde890c576"
                    }
                  }
                },
                "required": ["ids"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk Import Users deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deletedIds": {
                      "type": "array",
                      "description": "List of ids that were successfully deleted",
                      "items": {
                        "type": "string",
                        "example": "fa7a0841-b533-4478-9253-0fde890c576"
                      }
                    },
                    "invalidIds": {
                      "type": "array",
                      "description": "List of ids that were invalid",
                      "items": {
                        "type": "string",
                        "example": "fa7a0841-b533-4478-9253-0fde890c576"
                      },
                      "example": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-<appId>/bulk-import/users/count": {
      "get": {
        "tags": ["Bulk Import"],
        "operationId": "countBulkImportUsers",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Count bulk import users",
        "description": "Count users in the bulk import processing queue, by status or all of them (by passing `null` status).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/api-key"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/bulkImportUserStatus"
          }
        ],
        "responses": {
          "200": {
            "description": "The number of users in the bulk import processing queue by status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "count": {
                      "type": "number",
                      "description": "The number of users in the bulk import processing queue by status",
                      "example": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-<appId>/bulk-import/import": {
      "post": {
        "tags": ["Bulk Import"],
        "operationId": "importOneUserWithBulkImport",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Import one user directly",
        "description": "Import one user immediately with the Bulk Import functionality.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/api-key"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "externalUserId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "userMetadata": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "should be a JSON object (not a JSON literal nor an array)",
                      "example": {
                        "preferences": {
                          "theme": "dark"
                        },
                        "notifications": {
                          "email": true
                        },
                        "todos": ["example"]
                      }
                    }
                  },
                  "userRoles": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "example": "admin"
                        },
                        "tenantIds": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "customer1"
                          }
                        }
                      },
                      "required": ["role", "tenantIds"]
                    }
                  },
                  "totpDevices": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "secretKey": {
                          "type": "string",
                          "example": "2PRXZWZAYYDAWCD"
                        },
                        "skew": {
                          "type": "number",
                          "example": 0
                        },
                        "period": {
                          "type": "number",
                          "example": 30
                        },
                        "deviceName": {
                          "type": "string",
                          "example": "My Authy App"
                        }
                      },
                      "required": ["secretKey"]
                    }
                  },
                  "loginMethods": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "name": "Email/Password Login Method",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "tenantIds": {
                                  "type": "array",
                                  "description": "List of tenant IDs this login method is associated with",
                                  "items": {
                                    "type": "string",
                                    "example": "customer1"
                                  }
                                },
                                "isVerified": {
                                  "type": "boolean",
                                  "description": "Indicates whether the email is verified"
                                },
                                "isPrimary": {
                                  "type": "boolean",
                                  "description": "Indicates whether the login method is the primary login method"
                                },
                                "timeJoinedInMSSinceEpoch": {
                                  "type": "integer",
                                  "description": "Time joined in milliseconds since the epoch"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "recipeId": {
                                  "type": "string",
                                  "example": "emailpassword"
                                },
                                "email": {
                                  "type": "string",
                                  "example": "johndoe@gmail.com"
                                },
                                "passwordHash": {
                                  "type": "string",
                                  "example": "$argon2d$v=19$m=12,t=3,p=1$aGI4enNvMmd0Zm0wMDAwMA$r6p7qbr6HD+8CD7sBi4HVw"
                                },
                                "plainTextPassword": {
                                  "type": "string",
                                  "example": "passwordExample"
                                },
                                "hashingAlgorithm": {
                                  "type": "string",
                                  "enum": ["argon2", "bcrypt", "firebase_scrypt"]
                                }
                              },
                              "required": ["email", "passwordHash", "hashingAlgorithm"]
                            }
                          ]
                        },
                        {
                          "name": "Third Party Login Method",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "tenantIds": {
                                  "type": "array",
                                  "description": "List of tenant IDs this login method is associated with",
                                  "items": {
                                    "type": "string",
                                    "example": "customer1"
                                  }
                                },
                                "isVerified": {
                                  "type": "boolean",
                                  "description": "Indicates whether the email is verified"
                                },
                                "isPrimary": {
                                  "type": "boolean",
                                  "description": "Indicates whether the login method is the primary login method"
                                },
                                "timeJoinedInMSSinceEpoch": {
                                  "type": "integer",
                                  "description": "Time joined in milliseconds since the epoch"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "recipeId": {
                                  "type": "string",
                                  "example": "thirdparty"
                                },
                                "thirdPartyId": {
                                  "type": "string",
                                  "example": "google"
                                },
                                "thirdPartyUserId": {
                                  "type": "string",
                                  "example": 106347997792363870000
                                }
                              },
                              "required": ["thirdPartyId", "thirdPartyUserId"]
                            }
                          ]
                        },
                        {
                          "name": "Passwordless Login Method",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "tenantIds": {
                                  "type": "array",
                                  "description": "List of tenant IDs this login method is associated with",
                                  "items": {
                                    "type": "string",
                                    "example": "customer1"
                                  }
                                },
                                "isVerified": {
                                  "type": "boolean",
                                  "description": "Indicates whether the email is verified"
                                },
                                "isPrimary": {
                                  "type": "boolean",
                                  "description": "Indicates whether the login method is the primary login method"
                                },
                                "timeJoinedInMSSinceEpoch": {
                                  "type": "integer",
                                  "description": "Time joined in milliseconds since the epoch"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "recipeId": {
                                  "type": "string",
                                  "example": "passwordless"
                                }
                              }
                            }
                          ],
                          "oneOf": [
                            {
                              "type": "string",
                              "example": "johndoe@gmail.com"
                            },
                            {
                              "type": "string",
                              "example": "+14155552671"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["OK"]
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "isPrimaryUser": {
                          "type": "boolean",
                          "example": true
                        },
                        "tenantIds": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "customer1"
                          }
                        },
                        "timeJoined": {
                          "type": "number",
                          "example": 1623918032231
                        },
                        "emails": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "johndoe@gmail.com"
                          }
                        },
                        "phoneNumbers": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "+14155552671"
                          }
                        },
                        "thirdParty": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "google"
                              },
                              "userId": {
                                "type": "string",
                                "example": 106347997792363870000
                              }
                            }
                          }
                        },
                        "loginMethods": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tenantIds": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "customer1"
                                }
                              },
                              "recipeUserId": {
                                "type": "string",
                                "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                              },
                              "verified": {
                                "type": "boolean",
                                "example": true
                              },
                              "timeJoined": {
                                "type": "number",
                                "example": 1623918032231
                              },
                              "recipeId": {
                                "type": "string",
                                "enum": ["emailpassword", "passwordless", "thirdparty"]
                              },
                              "email": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              },
                              "phoneNumber": {
                                "type": "string",
                                "example": "+14155552671"
                              },
                              "thirdParty": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User has invalid schema",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Data has missing or invalid fields. Please check the users field for more details."
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "number",
                            "example": 0,
                            "description": "Index of the user in the users array that has invalid schema"
                          },
                          "errors": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "List of errors for the user",
                              "example": "Invalid recipeId for loginMethod. Pass one of emailpassword, thirdparty or, passwordless!"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/user/credential": {
      "get": {
        "summary": "Get WebAuthn credential",
        "tags": ["WebAuthn Recipe"],
        "description": "Get the WebAuthn credential for the user.",
        "operationId": "getWebAuthNCredential",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "recipeUserId",
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "webauthnCredentialId",
            "schema": {
              "type": "string",
              "example": "ea7a0931-b533-4478-9253-0fde890ca23"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "WebAuthn credential result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "credential": {
                          "type": "object",
                          "properties": {
                            "webauthnCredentialId": {
                              "type": "string",
                              "example": "ea7a0931-b533-4478-9253-0fde890ca23"
                            },
                            "recipeUserId": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-9253-0fde890c576"
                            },
                            "relyingPartyId": {
                              "type": "string",
                              "example": "example.com"
                            },
                            "createdAt": {
                              "type": "number",
                              "example": 1741793746
                            },
                            "updatedAt": {
                              "type": "number",
                              "example": 1741793746
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["CREDENTIAL_NOT_FOUND_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/user/credential/list": {
      "get": {
        "summary": "List WebAuthn credentials",
        "tags": ["WebAuthn Recipe"],
        "description": "List credentials that were created by the user.",
        "operationId": "listWebAuthNCredentials",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "recipeUserId",
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "WebAuthn credentials list result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "credentials": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "webauthnCredentialId": {
                                "type": "string",
                                "example": "ea7a0931-b533-4478-9253-0fde890ca23"
                              },
                              "recipeUserId": {
                                "type": "string",
                                "example": "fa7a0841-b533-4478-9253-0fde890c576"
                              },
                              "relyingPartyId": {
                                "type": "string",
                                "example": "example.com"
                              },
                              "createdAt": {
                                "type": "number",
                                "example": 1741793746
                              },
                              "updatedAt": {
                                "type": "number",
                                "example": 1741793746
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/options": {
      "get": {
        "summary": "Get WebAuthn options",
        "tags": ["WebAuthn Recipe"],
        "description": "Get the WebAuthn options.",
        "operationId": "getWebAuthNOptions",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "webauthnGeneratedOptionsId",
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "WebAuthn options result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "webauthnGeneratedOptionsId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "relyingPartyId": {
                          "type": "string",
                          "example": "example.com"
                        },
                        "relyingPartyName": {
                          "type": "string",
                          "example": "Example"
                        },
                        "challenge": {
                          "type": "string",
                          "example": "TQvEVDV8B64w_2zIifzKaPzBPfthqpx2uJkq_2PIB0k"
                        },
                        "timeout": {
                          "type": "number",
                          "example": 10000
                        },
                        "origin": {
                          "type": "string",
                          "example": "http://example.com"
                        },
                        "email": {
                          "type": "string",
                          "example": "email@example.com"
                        },
                        "userVerification": {
                          "type": "string",
                          "example": "required"
                        },
                        "userPresence": {
                          "type": "boolean",
                          "example": true
                        },
                        "createdAt": {
                          "type": "number",
                          "example": 1741793746
                        },
                        "expiresAt": {
                          "type": "number",
                          "example": 1741793746
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/user/recover": {
      "get": {
        "summary": "Recover WebAuthn user",
        "tags": ["WebAuthn Recipe"],
        "description": "Recover the user using the WebAuthn credential.",
        "operationId": "recoverWebAuthNUser",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": "string",
              "example": "ZmE3YTA4NDEtYjUzMy00NDc4LTkyNTMtMGZkZTg5MGM1NzY"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AuthRecipeUser for the token",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "recipeUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RECOVER_ACCOUNT_TOKEN_INVALID_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/options/register": {
      "post": {
        "summary": "Generate registration options",
        "tags": ["WebAuthn Recipe"],
        "description": "Generate the webauthn options for registration.",
        "operationId": "generateRegistrationOptions",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "relyingPartyId", "relyingPartyName", "origin"],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  },
                  "displayName": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "relyingPartyId": {
                    "type": "string",
                    "example": "example.com"
                  },
                  "relyingPartyName": {
                    "type": "string",
                    "example": "Example"
                  },
                  "origin": {
                    "type": "string",
                    "example": "http://example.com"
                  },
                  "timeout": {
                    "type": "number",
                    "example": 10000
                  },
                  "userVerification": {
                    "type": "string",
                    "example": "preferred"
                  },
                  "userPresence": {
                    "type": "boolean",
                    "example": false
                  },
                  "attestation": {
                    "type": "string",
                    "example": "none"
                  },
                  "residentKey": {
                    "type": "string",
                    "example": "required"
                  },
                  "supportedAlgorithmIDs": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "example": -7
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The generated register options response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "webauthnGeneratedOptionsId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "rp": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "example.com"
                            },
                            "name": {
                              "type": "string",
                              "example": "Example"
                            }
                          }
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-9253-0fde890c576"
                            },
                            "name": {
                              "type": "string",
                              "example": "John Doe"
                            },
                            "displayName": {
                              "type": "string",
                              "example": "John Doe"
                            }
                          }
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@gmail.com"
                        },
                        "challenge": {
                          "type": "string",
                          "example": "TQvEVDV8B64w_2zIifzKaPzBPfthqpx2uJkq_2PIB0k"
                        },
                        "timeout": {
                          "type": "number",
                          "example": 10000
                        },
                        "attestation": {
                          "type": "string",
                          "example": "none"
                        },
                        "createdAt": {
                          "type": "number",
                          "example": 1741793746
                        },
                        "expiresAt": {
                          "type": "number",
                          "example": 1741793746
                        },
                        "pubKeyCredParams": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "example": "public-key"
                              },
                              "alg": {
                                "type": "number",
                                "example": -7
                              }
                            }
                          }
                        },
                        "excludeCredentials": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "fa7a0841-b533-4478-9253-0fde890c576"
                              },
                              "transport": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "internal"
                                }
                              }
                            }
                          }
                        },
                        "authenticatorSelection": {
                          "type": "object",
                          "properties": {
                            "userVerification": {
                              "type": "string",
                              "example": "preferred"
                            },
                            "requireResidentKey": {
                              "type": "boolean",
                              "example": true
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_OPTIONS_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/options/signin": {
      "post": {
        "summary": "Generate authentication options",
        "tags": ["WebAuthn Recipe"],
        "description": "Generate the webauthn options for signin.",
        "operationId": "generateSigninOptions",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "relyingPartyId",
                  "relyingPartyName",
                  "origin",
                  "timeout",
                  "userVerification",
                  "userPresence"
                ],
                "properties": {
                  "relyingPartyId": {
                    "type": "string",
                    "example": "example.com"
                  },
                  "relyingPartyName": {
                    "type": "string",
                    "example": "Example"
                  },
                  "origin": {
                    "type": "string",
                    "example": "http://example.com"
                  },
                  "timeout": {
                    "type": "number",
                    "example": 10000
                  },
                  "userVerification": {
                    "type": "string",
                    "example": "preferred"
                  },
                  "userPresence": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AuthRecipeUser for the token",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "webauthnGeneratedOptionsId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "relyingPartyId": {
                          "type": "string",
                          "example": "example.com"
                        },
                        "challenge": {
                          "type": "string",
                          "example": "TQvEVDV8B64w_2zIifzKaPzBPfthqpx2uJkq_2PIB0k"
                        },
                        "timeout": {
                          "type": "number",
                          "example": 10000
                        },
                        "userVerification": {
                          "type": "string",
                          "example": "required"
                        },
                        "userPresence": {
                          "type": "boolean",
                          "example": true
                        },
                        "createdAt": {
                          "type": "number",
                          "example": 1741793746
                        },
                        "expiresAt": {
                          "type": "number",
                          "example": 1741793746
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_OPTIONS_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/user/credential/register": {
      "post": {
        "summary": "Register WebAuthn credential",
        "tags": ["WebAuthn Recipe"],
        "description": "Register a new credential for the user",
        "operationId": "registerWebAuthNCredential",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "recipeUserId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "webauthnGeneratedOptionsId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-9253-0fde890c576"
                  },
                  "credential": {
                    "type": "object",
                    "description": "Credential returned by the browser"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The stored credential",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "webauthnCredentialId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "relyingPartyId": {
                          "type": "string",
                          "example": "example.com"
                        },
                        "relyingPartyName": {
                          "type": "string",
                          "example": "Example"
                        },
                        "recipeUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@gmail.com"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_OPTIONS_ERROR", "INVALID_AUTHENTICATOR_ERROR", "INVALID_CREDENTIALS_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OPTIONS_NOT_FOUND_ERROR",
                            "CREDENTIAL_ALREADY_EXISTS_ERROR",
                            "UNKNOWN_USER_ID_ERROR"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/signup": {
      "post": {
        "summary": "Sign up WebAuthn user",
        "tags": ["WebAuthn Recipe"],
        "description": "Sign up the user using the WebAuthn credential.",
        "operationId": "signUpWebAuthNUser",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "webauthnGeneratedOptionsId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-9253-0fde890c576"
                  },
                  "credential": {
                    "type": "object",
                    "description": "Credential returned by the browser"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The signup result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "webauthnCredentialId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "relyingPartyId": {
                          "type": "string",
                          "example": "example.com"
                        },
                        "relyingPartyName": {
                          "type": "string",
                          "example": "Example"
                        },
                        "recipeUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_OPTIONS_ERROR", "INVALID_AUTHENTICATOR_ERROR", "INVALID_CREDENTIALS_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OPTIONS_NOT_FOUND_ERROR", "EMAIL_ALREADY_EXISTS_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/signin": {
      "post": {
        "summary": "Sign in WebAuthn user",
        "tags": ["WebAuthn Recipe"],
        "description": "Sign in the user using the WebAuthn credential.",
        "operationId": "signInWebAuthNUser",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "webauthnGeneratedOptionsId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-9253-0fde890c576"
                  },
                  "credential": {
                    "type": "object",
                    "description": "Credential returned by the browser"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The stored credential",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "recipeUserId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-9253-0fde890c576"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1623918032231
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "+14155552671"
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": 106347997792363870000
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "customer1"
                                    }
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1623918032231
                                  },
                                  "recipeId": {
                                    "type": "string",
                                    "enum": ["emailpassword", "passwordless", "thirdparty"]
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "+14155552671"
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": 106347997792363870000
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["INVALID_OPTIONS_ERROR", "INVALID_AUTHENTICATOR_ERROR", "INVALID_CREDENTIALS_ERROR"]
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OPTIONS_NOT_FOUND_ERROR", "CREDENTIAL_NOT_FOUND_ERROR", "UNKNOWN_USER_ID_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/user/recover/token": {
      "post": {
        "summary": "Generate recovery token",
        "tags": ["WebAuthn Recipe"],
        "description": "Generate a token to recover the user.",
        "operationId": "generateTokenForRecovery",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId", "email"],
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebAuthn options result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "token": {
                          "type": "string",
                          "example": "ZmE3YTA4NDEtYjUzMy00NDc4LTkyNTMtMGZkZTg5MGM1NzY"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["UNKNOWN_USER_ID_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/user/recover/token/consume": {
      "post": {
        "summary": "Consume recovery token",
        "tags": ["WebAuthn Recipe"],
        "description": "Consume the token to recover the user.",
        "operationId": "consumeWebAuthNToken",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "ZmE3YTA4NDEtYjUzMy00NDc4LTkyNTMtMGZkZTg5MGM1NzY"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Consume token result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        },
                        "userId": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@gmail.com"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["RECOVER_ACCOUNT_TOKEN_INVALID_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/user/email": {
      "put": {
        "summary": "Update email",
        "tags": ["WebAuthn Recipe"],
        "description": "Update the email of the user.",
        "operationId": "updateEmail",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["recipeUserId", "email"],
                "properties": {
                  "recipeUserId": {
                    "type": "string",
                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update email result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "UNKNOWN_USER_ID_ERROR",
                            "EMAIL_ALREADY_EXISTS_ERROR",
                            "USER_WITH_EMAIL_ALREADY_EXISTS_ERROR"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/user/credential/remove": {
      "delete": {
        "summary": "Remove WebAuthn credential",
        "tags": ["WebAuthn Recipe"],
        "description": "Remove the WebAuthn credential for the user.",
        "operationId": "removeWebAuthNCredential",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "recipeUserId",
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "webauthnCredentialId",
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete credential result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["CREDENTIAL_NOT_FOUND_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    },
    "/appid-{appId}/{tenantId}/recipe/webauthn/options/remove": {
      "delete": {
        "summary": "Remove WebAuthn options",
        "tags": ["WebAuthn Recipe"],
        "description": "Remove the WebAuthn options.",
        "operationId": "removeWebAuthNOptions",
        "security": [
          {
            "ApiKey": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "public"
            }
          },
          {
            "$ref": "#/components/parameters/webauthnRid"
          },
          {
            "name": "cdi-version",
            "in": "header",
            "description": "X.Y of the X.Y.Z CDI version.",
            "example": "5.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "webauthnGeneratedOptionsId",
            "schema": {
              "type": "string",
              "example": "fa7a0841-b533-4478-9253-0fde890c576"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete options result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OK"]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": ["OPTIONS_NOT_FOUND_ERROR"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "error code 401",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Invalid API key"]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Not Found"]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": ["Internal Error"]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "tenantId": {
        "name": "tenantId",
        "in": "path",
        "description": "The tenant against which the request is made. If left empty, the default tenant will be used.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "public"
        }
      },
      "rid": {
        "name": "rid",
        "in": "header",
        "example": "emailpassword",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "thirdPartyRid": {
        "name": "rid",
        "in": "header",
        "example": "thirdparty",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "passwordlessRid": {
        "name": "rid",
        "in": "header",
        "example": "passwordless",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "emailVerificationRid": {
        "name": "rid",
        "in": "header",
        "example": "emailverification",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "multitenancyRid": {
        "name": "rid",
        "in": "header",
        "example": "multitenancy",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "userMetadataRid": {
        "name": "rid",
        "in": "header",
        "example": "usermetadata",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "userRolesRid": {
        "name": "rid",
        "in": "header",
        "example": "userroles",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "sessionRid": {
        "name": "rid",
        "in": "header",
        "example": "session",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "jwtRID": {
        "name": "rid",
        "in": "header",
        "example": "jwt",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "userIdMappingRid": {
        "name": "rid",
        "in": "header",
        "example": "useridmapping",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "dashboardRid": {
        "name": "rid",
        "in": "header",
        "example": "dashboard",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "totpRid": {
        "name": "rid",
        "in": "header",
        "example": "totp",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "accountLinkingRid": {
        "name": "rid",
        "in": "header",
        "example": "accountlinking",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "cdi-version": {
        "name": "cdi-version",
        "in": "header",
        "description": "X.Y of the X.Y.Z CDI version.",
        "example": "5.1",
        "schema": {
          "type": "string"
        }
      },
      "paginationToken": {
        "name": "paginationToken",
        "in": "query",
        "example": "ZmE3YTA4NDEtY...MjM5MTgwMzIyMzE=",
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "example": 1,
        "schema": {
          "type": "number"
        }
      },
      "timeJoinedOrder": {
        "name": "timeJoinedOrder",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": ["ASC", "DESC"]
        }
      },
      "email": {
        "name": "email",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "johndoe@gmail.com"
        }
      },
      "userId": {
        "name": "userId",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "fa7a0841-b533-4478-9253-0fde890c576"
        }
      },
      "userIdRequired": {
        "name": "userId",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "fa7a0841-b533-4478-9253-0fde890c576"
        }
      },
      "roleRequired": {
        "name": "role",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "admin"
        }
      },
      "permissionRequired": {
        "name": "permission",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "permission"
        }
      },
      "includeRecipeIds": {
        "name": "includeRecipeIds",
        "in": "query",
        "required": false,
        "description": "The param should take an array of comma seperated strings",
        "schema": {
          "type": "string",
          "example": "val1,val2,val3.."
        }
      }
    },
    "responses": {
      "400": {
        "description": "error code 400",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "401": {
        "description": "error code 401",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "enum": ["Invalid API key"]
            }
          }
        }
      },
      "402": {
        "description": "error code 402",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "enum": ["License Error"]
            }
          }
        }
      },
      "404": {
        "description": "error code 404",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "enum": ["Not Found"]
            }
          }
        }
      },
      "405": {
        "description": "error code 405",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "enum": ["Method not supported"]
            }
          }
        }
      },
      "500": {
        "description": "error code 500",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "enum": ["Internal Error"]
            }
          }
        }
      },
      "hello": {
        "description": "return a simple hello message",
        "content": {
          "application/json": {
            "schema": {
              "type": "string",
              "enum": ["Hello"]
            }
          }
        }
      }
    },
    "schemas": {
      "authRecipeUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
          },
          "isPrimaryUser": {
            "type": "boolean",
            "example": true
          },
          "tenantIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "customer1"
            }
          },
          "timeJoined": {
            "type": "number",
            "example": 1623918032231
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "+14155552671"
            }
          },
          "thirdParty": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "google"
                },
                "userId": {
                  "type": "string",
                  "example": 106347997792363870000
                }
              }
            }
          },
          "loginMethods": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tenantIds": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "customer1"
                  }
                },
                "recipeUserId": {
                  "type": "string",
                  "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                },
                "verified": {
                  "type": "boolean",
                  "example": true
                },
                "timeJoined": {
                  "type": "number",
                  "example": 1623918032231
                },
                "recipeId": {
                  "type": "string",
                  "enum": ["emailpassword", "passwordless", "thirdparty"]
                },
                "email": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                },
                "phoneNumber": {
                  "type": "string",
                  "example": "+14155552671"
                },
                "thirdParty": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "google"
                    },
                    "userId": {
                      "type": "string",
                      "example": 106347997792363870000
                    }
                  }
                }
              }
            }
          }
        }
      },
      "recipeId": {
        "type": "string",
        "enum": ["emailpassword", "passwordless", "thirdparty"]
      },
      "token": {
        "type": "string",
        "example": "ZTRiOTBjNz...jI5MTZlODkxw"
      },
      "emailVerificationVerifyTokenRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
          },
          "email": {
            "type": "string",
            "example": "johndoe@gmail.com"
          }
        }
      },
      "thirdPartyId": {
        "type": "string",
        "example": "google"
      },
      "thirdPartyUserId": {
        "type": "string",
        "example": 106347997792363870000
      },
      "thirdPartyEmail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "isVerified": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "isVerified": {
        "type": "boolean",
        "example": true
      },
      "email": {
        "type": "string",
        "example": "johndoe@gmail.com"
      },
      "password": {
        "type": "string",
        "example": "password123"
      },
      "userId": {
        "type": "string",
        "example": "fa7a0841-b533-4478-95533-0fde890c3483"
      },
      "role": {
        "type": "string",
        "example": "admin"
      },
      "timeJoined": {
        "type": "number",
        "example": 1623918032231
      },
      "paginationToken": {
        "type": "string",
        "example": "ZmE3YTA4ND...OzE2MjM5MTgwMzIyMzE="
      },
      "phoneNumber": {
        "type": "string",
        "example": "+14155552671"
      },
      "codeId": {
        "type": "string",
        "description": "Uniquely identifies a code",
        "example": "QZ0Mx9zG9cfqNXmPI0I/67r9bpKghUBDQZeMMbayi+I="
      },
      "deviceId": {
        "type": "string",
        "description": "A random identifier that should be stored on the device that started the sign in process.",
        "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
      },
      "preAuthSessionId": {
        "type": "string",
        "description": "A random identifier that can be used to identify the login attempt/device.",
        "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
      },
      "userInputCode": {
        "type": "string",
        "description": "This can be used to authenticate the user when paired with the deviceId",
        "example": 456123
      },
      "linkCode": {
        "type": "string",
        "description": "URL-safe string that can be used to authenticate the user, without the deviceId",
        "example": "b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8"
      },
      "codeLifetime": {
        "type": "number",
        "description": "The maximum lifetime of the code in milliseconds",
        "example": 900000
      },
      "statusOK": {
        "type": "string",
        "enum": ["OK"]
      },
      "oauthClient": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "example": "stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb"
          },
          "clientName": {
            "type": "string",
            "example": "Hello"
          },
          "clientSecret": {
            "type": "string",
            "example": "T98n1YIMWqr4wOM.~bV4HOPFmO"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["http://localhost:3000/auth/callback/ory"]
          },
          "grantTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["authorization_code", "refresh_token"]
          },
          "responseTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["code", "id_token"]
          },
          "scope": {
            "type": "string",
            "example": "offline_access openid email"
          },
          "audience": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          },
          "policyUri": {
            "type": "string",
            "example": ""
          },
          "allowedCorsOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          },
          "tosUri": {
            "type": "string",
            "example": ""
          },
          "clientUri": {
            "type": "string",
            "example": ""
          },
          "logoUri": {
            "type": "string",
            "example": ""
          },
          "tokenEndpointAuthMethod": {
            "type": "string",
            "example": "client_secret_post"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-24T08:14:40Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-24T08:14:40.362463Z"
          },
          "postLogoutRedirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["http://localhost:3000"]
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "example": {}
          },
          "authorizationCodeGrantAccessTokenLifespan": {
            "type": "string",
            "nullable": true,
            "example": "1h0m0s"
          },
          "authorizationCodeGrantIdTokenLifespan": {
            "type": "string",
            "nullable": true,
            "example": "1h0m0s"
          },
          "authorizationCodeGrantRefreshTokenLifespan": {
            "type": "string",
            "nullable": true,
            "example": "1h0m0s"
          },
          "clientCredentialsGrantAccessTokenLifespan": {
            "type": "string",
            "nullable": true,
            "example": "1h0m0s"
          },
          "implicitGrantAccessTokenLifespan": {
            "type": "string",
            "nullable": true,
            "example": "1h0m0s"
          },
          "implicitGrantIdTokenLifespan": {
            "type": "string",
            "nullable": true,
            "example": "1h0m0s"
          },
          "refreshTokenGrantIdTokenLifespan": {
            "type": "string",
            "nullable": true,
            "example": "1h0m0s"
          },
          "refreshTokenGrantAccessTokenLifespan": {
            "type": "string",
            "nullable": true,
            "example": "1h0m0s"
          },
          "refreshTokenGrantRefreshTokenLifespan": {
            "type": "string",
            "nullable": true,
            "example": "1h0m0s"
          },
          "enableRefreshTokenRotation": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "userMetadata": {
        "type": "object",
        "description": "should be a JSON object (not a JSON literal nor an array)",
        "example": {
          "preferences": {
            "theme": "dark"
          },
          "notifications": {
            "email": true
          },
          "todos": ["example"]
        }
      },
      "userMetadataUpdate": {
        "type": "object",
        "description": "should be a JSON object (not a JSON literal nor an array)",
        "example": {
          "notifications": {
            "sms": true
          },
          "todos": null
        }
      },
      "userDataInJWT": {
        "type": "object",
        "description": "should be a JSON object (not a JSON literal nor an array)",
        "example": {
          "test": 123
        }
      },
      "userDataInDatabase": {
        "type": "object",
        "description": "should be a JSON object (not a JSON literal nor an array)",
        "example": {
          "test": 123
        }
      },
      "enableAntiCsrf": {
        "type": "boolean",
        "example": false
      },
      "handle": {
        "type": "string",
        "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
      },
      "message": {
        "type": "string",
        "example": "Error Message"
      },
      "session": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string",
            "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
          },
          "userId": {
            "type": "string",
            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
          },
          "userDataInJWT": {
            "type": "object",
            "description": "should be a JSON object (not a JSON literal nor an array)",
            "example": {
              "test": 123
            }
          },
          "tenantId": {
            "type": "string",
            "example": "customer1"
          },
          "recipeUserId": {
            "type": "string",
            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
          }
        }
      },
      "cookieInfo": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "ZTRiOTBjNz...jI5MTZlODkxw"
          },
          "expiry": {
            "type": "number",
            "example": 1637262633029
          },
          "createdTime": {
            "type": "number",
            "example": 1637262633029
          }
        }
      },
      "expiry": {
        "type": "number",
        "example": 1637262633029
      },
      "timeCreated": {
        "type": "number",
        "example": 1637262633029
      },
      "sessionHandles": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "68en6gd6-865b-4af6-ba00-96e5c153257d"
        }
      },
      "createJWTPayload": {
        "type": "object",
        "description": "The payload of the JWT, should be a JSON object.",
        "example": {
          "custom-claim": ""
        }
      },
      "createJWTAlgorithm": {
        "type": "string",
        "description": "The algorithm to use when creating the JWT.",
        "enum": ["RS256"]
      },
      "jwksDomain": {
        "type": "string",
        "description": "This is used as the value for the issuer claim in the JWT payload.",
        "example": "https://api.test.com/"
      },
      "jwtValidity": {
        "type": "number",
        "description": "Duration in seconds, used to calculate JWT expiry",
        "example": 86400
      },
      "jwk": {
        "type": "object",
        "description": "A JWK that can be used to verify a JWT",
        "properties": {
          "alg": {
            "type": "string",
            "description": "The algorithm to use when creating the JWT.",
            "enum": ["RS256"]
          },
          "kty": {
            "type": "string",
            "example": "RSA"
          },
          "use": {
            "type": "string",
            "example": "sig"
          },
          "kid": {
            "type": "string",
            "description": "Unique identifier for the JWK"
          },
          "x5c": {
            "type": "array",
            "description": "X.509 Certificate Chain",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "unauthorisedMessageResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["UNAUTHORISED"]
          },
          "message": {
            "type": "string",
            "example": "Error Message"
          }
        }
      },
      "helloResponse": {
        "type": "string",
        "enum": ["Hello"]
      },
      "statusOKResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["OK"]
          }
        }
      },
      "wrongCredentialsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["WRONG_CREDENTIALS_ERROR"]
          }
        }
      },
      "unknownUserIdResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["UNKNOWN_USER_ID_ERROR"]
          }
        }
      },
      "unknownRoleResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["UNKNOWN_ROLE_ERROR"]
          }
        }
      },
      "tokenTheftResponse": {
        "type": "string",
        "enum": ["TOKEN_THEFT_DETECTED"]
      },
      "unauthorisedResponse": {
        "type": "string",
        "enum": ["UNAUTHORISED"]
      },
      "tryRefreshTokenResponse": {
        "type": "string",
        "enum": ["TRY_REFRESH_TOKEN"]
      },
      "internalError": {
        "type": "string",
        "enum": ["Internal Error"]
      },
      "notFound": {
        "type": "string",
        "enum": ["Not Found"]
      },
      "methodNotSupported": {
        "type": "string",
        "enum": ["Method not supported"]
      },
      "invalidJSON": {
        "type": "string"
      },
      "requestUnauthorised": {
        "type": "string",
        "enum": ["Invalid API key"]
      },
      "licenseError": {
        "type": "string",
        "enum": ["License Error"]
      },
      "tenantId": {
        "type": "string",
        "example": "customer1"
      },
      "thirdPartyProviderConfig": {
        "type": "object",
        "required": ["thirdPartyId"],
        "properties": {
          "thirdPartyId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "clients": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "clientType": {
                  "type": "string"
                },
                "clientId": {
                  "type": "string"
                },
                "clientSecret": {
                  "type": "string"
                },
                "scope": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "forcePKCE": {
                  "type": "boolean"
                },
                "additionalConfig": {
                  "type": "object"
                }
              }
            }
          },
          "authorizationEndpoint": {
            "type": "string"
          },
          "authorizationEndpointQueryParams": {
            "type": "object"
          },
          "tokenEndpoint": {
            "type": "string"
          },
          "tokenEndpointBodyParams": {
            "type": "object"
          },
          "userInfoEndpoint": {
            "type": "string"
          },
          "userInfoEndpointQueryParams": {
            "type": "object"
          },
          "userInfoEndpointHeaders": {
            "type": "object"
          },
          "jwksURI": {
            "type": "string"
          },
          "oidcDiscoveryEndpoint": {
            "type": "string"
          },
          "requireEmail": {
            "type": "boolean",
            "default": true
          },
          "userInfoMap": {
            "type": "object",
            "properties": {
              "fromIdTokenPayload": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "emailVerified": {
                    "type": "string"
                  }
                }
              },
              "fromUserInfoAPI": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "emailVerified": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "firstFactors": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "emailpassword"
        }
      },
      "requiredSecondaryFactors": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "otp-phone"
        }
      },
      "tenantInput": {
        "type": "object",
        "properties": {
          "emailPasswordEnabled": {
            "type": "boolean"
          },
          "thirdPartyEnabled": {
            "type": "boolean"
          },
          "passwordlessEnabled": {
            "type": "boolean"
          },
          "firstFactors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "emailpassword"
            }
          },
          "requiredSecondaryFactors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "otp-phone"
            }
          },
          "coreConfig": {
            "type": "object"
          }
        }
      },
      "tenantInputV2": {
        "type": "object",
        "properties": {
          "firstFactors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "emailpassword"
            }
          },
          "requiredSecondaryFactors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "otp-phone"
            }
          },
          "coreConfig": {
            "type": "object"
          }
        }
      },
      "tenantConfig": {
        "type": "object",
        "required": ["emailPassword", "thirdParty", "passwordless", "coreConfig", "tenantId"],
        "properties": {
          "tenantId": {
            "type": "string",
            "example": "customer1"
          },
          "emailPassword": {
            "type": "object",
            "required": ["enabled"],
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "thirdParty": {
            "type": "object",
            "required": ["enabled"],
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "providers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["thirdPartyId"],
                  "properties": {
                    "thirdPartyId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "clients": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "clientType": {
                            "type": "string"
                          },
                          "clientId": {
                            "type": "string"
                          },
                          "clientSecret": {
                            "type": "string"
                          },
                          "scope": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "forcePKCE": {
                            "type": "boolean"
                          },
                          "additionalConfig": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "authorizationEndpoint": {
                      "type": "string"
                    },
                    "authorizationEndpointQueryParams": {
                      "type": "object"
                    },
                    "tokenEndpoint": {
                      "type": "string"
                    },
                    "tokenEndpointBodyParams": {
                      "type": "object"
                    },
                    "userInfoEndpoint": {
                      "type": "string"
                    },
                    "userInfoEndpointQueryParams": {
                      "type": "object"
                    },
                    "userInfoEndpointHeaders": {
                      "type": "object"
                    },
                    "jwksURI": {
                      "type": "string"
                    },
                    "oidcDiscoveryEndpoint": {
                      "type": "string"
                    },
                    "requireEmail": {
                      "type": "boolean",
                      "default": true
                    },
                    "userInfoMap": {
                      "type": "object",
                      "properties": {
                        "fromIdTokenPayload": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "emailVerified": {
                              "type": "string"
                            }
                          }
                        },
                        "fromUserInfoAPI": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "emailVerified": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "passwordless": {
            "type": "object",
            "required": ["enabled"],
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "firstFactors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "emailpassword"
            }
          },
          "requiredSecondaryFactors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "otp-phone"
            }
          },
          "coreConfig": {
            "type": "object"
          }
        }
      },
      "tenantConfigV2": {
        "type": "object",
        "required": ["thirdParty", "coreConfig", "tenantId"],
        "properties": {
          "tenantId": {
            "type": "string",
            "example": "customer1"
          },
          "thirdParty": {
            "type": "object",
            "properties": {
              "providers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["thirdPartyId"],
                  "properties": {
                    "thirdPartyId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "clients": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "clientType": {
                            "type": "string"
                          },
                          "clientId": {
                            "type": "string"
                          },
                          "clientSecret": {
                            "type": "string"
                          },
                          "scope": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "forcePKCE": {
                            "type": "boolean"
                          },
                          "additionalConfig": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "authorizationEndpoint": {
                      "type": "string"
                    },
                    "authorizationEndpointQueryParams": {
                      "type": "object"
                    },
                    "tokenEndpoint": {
                      "type": "string"
                    },
                    "tokenEndpointBodyParams": {
                      "type": "object"
                    },
                    "userInfoEndpoint": {
                      "type": "string"
                    },
                    "userInfoEndpointQueryParams": {
                      "type": "object"
                    },
                    "userInfoEndpointHeaders": {
                      "type": "object"
                    },
                    "jwksURI": {
                      "type": "string"
                    },
                    "oidcDiscoveryEndpoint": {
                      "type": "string"
                    },
                    "requireEmail": {
                      "type": "boolean",
                      "default": true
                    },
                    "userInfoMap": {
                      "type": "object",
                      "properties": {
                        "fromIdTokenPayload": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "emailVerified": {
                              "type": "string"
                            }
                          }
                        },
                        "fromUserInfoAPI": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "emailVerified": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "firstFactors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "emailpassword"
            }
          },
          "requiredSecondaryFactors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "otp-phone"
            }
          },
          "coreConfig": {
            "type": "object"
          }
        }
      },
      "passwordHash": {
        "type": "string",
        "example": "$argon2d$v=19$m=12,t=3,p=1$aGI4enNvMmd0Zm0wMDAwMA$r6p7qbr6HD+8CD7sBi4HVw"
      },
      "hashingAlgorithm": {
        "type": "string",
        "enum": ["argon2", "bcrypt", "firebase_scrypt"]
      },
      "bulkImportUserId": {
        "type": "string",
        "example": "fa7a0841-b533-4478-9253-0fde890c576"
      },
      "bulkImportUserStatus": {
        "type": "string",
        "enum": ["NEW", "PROCESSING", "FAILED"]
      },
      "bulkImportUserRole": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "example": "admin"
          },
          "tenantIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "customer1"
            }
          }
        },
        "required": ["role", "tenantIds"]
      },
      "bulkImportTotpDevice": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "example": "2PRXZWZAYYDAWCD"
          },
          "skew": {
            "type": "number",
            "example": 0
          },
          "period": {
            "type": "number",
            "example": 30
          },
          "deviceName": {
            "type": "string",
            "example": "My Authy App"
          }
        },
        "required": ["secretKey"]
      },
      "bulkImportUserLoginMethodFields": {
        "type": "object",
        "properties": {
          "tenantIds": {
            "type": "array",
            "description": "List of tenant IDs this login method is associated with",
            "items": {
              "type": "string",
              "example": "customer1"
            }
          },
          "isVerified": {
            "type": "boolean",
            "description": "Indicates whether the email is verified"
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Indicates whether the login method is the primary login method"
          },
          "timeJoinedInMSSinceEpoch": {
            "type": "integer",
            "description": "Time joined in milliseconds since the epoch"
          }
        }
      },
      "bulkImportUserEmailPasswordLoginMethod": {
        "name": "Email/Password Login Method",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "tenantIds": {
                "type": "array",
                "description": "List of tenant IDs this login method is associated with",
                "items": {
                  "type": "string",
                  "example": "customer1"
                }
              },
              "isVerified": {
                "type": "boolean",
                "description": "Indicates whether the email is verified"
              },
              "isPrimary": {
                "type": "boolean",
                "description": "Indicates whether the login method is the primary login method"
              },
              "timeJoinedInMSSinceEpoch": {
                "type": "integer",
                "description": "Time joined in milliseconds since the epoch"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "recipeId": {
                "type": "string",
                "example": "emailpassword"
              },
              "email": {
                "type": "string",
                "example": "johndoe@gmail.com"
              },
              "passwordHash": {
                "type": "string",
                "example": "$argon2d$v=19$m=12,t=3,p=1$aGI4enNvMmd0Zm0wMDAwMA$r6p7qbr6HD+8CD7sBi4HVw"
              },
              "plainTextPassword": {
                "type": "string",
                "example": "passwordExample"
              },
              "hashingAlgorithm": {
                "type": "string",
                "enum": ["argon2", "bcrypt", "firebase_scrypt"]
              }
            },
            "required": ["email", "passwordHash", "hashingAlgorithm"]
          }
        ]
      },
      "addBulkImportUserLoginMethodResponse": {
        "type": "object",
        "properties": {
          "recipeId": {
            "type": "string",
            "example": "emailpassword"
          },
          "userId": {
            "type": "string",
            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
          },
          "tenants": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "customer1"
            }
          },
          "email": {
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "thirdpartyId": {
            "type": "string",
            "example": "google"
          },
          "thirdpartyUserId": {
            "type": "string",
            "example": 106347997792363870000
          },
          "phoneNumber": {
            "type": "string",
            "example": "+14155552671"
          }
        },
        "required": ["recipeId", "userId", "tenants", "email"]
      },
      "bulkImportUserThirdPartyLoginMethod": {
        "name": "Third Party Login Method",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "tenantIds": {
                "type": "array",
                "description": "List of tenant IDs this login method is associated with",
                "items": {
                  "type": "string",
                  "example": "customer1"
                }
              },
              "isVerified": {
                "type": "boolean",
                "description": "Indicates whether the email is verified"
              },
              "isPrimary": {
                "type": "boolean",
                "description": "Indicates whether the login method is the primary login method"
              },
              "timeJoinedInMSSinceEpoch": {
                "type": "integer",
                "description": "Time joined in milliseconds since the epoch"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "recipeId": {
                "type": "string",
                "example": "thirdparty"
              },
              "thirdPartyId": {
                "type": "string",
                "example": "google"
              },
              "thirdPartyUserId": {
                "type": "string",
                "example": 106347997792363870000
              }
            },
            "required": ["thirdPartyId", "thirdPartyUserId"]
          }
        ]
      },
      "bulkImportUserPasswordlessLoginMethod": {
        "name": "Passwordless Login Method",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "tenantIds": {
                "type": "array",
                "description": "List of tenant IDs this login method is associated with",
                "items": {
                  "type": "string",
                  "example": "customer1"
                }
              },
              "isVerified": {
                "type": "boolean",
                "description": "Indicates whether the email is verified"
              },
              "isPrimary": {
                "type": "boolean",
                "description": "Indicates whether the login method is the primary login method"
              },
              "timeJoinedInMSSinceEpoch": {
                "type": "integer",
                "description": "Time joined in milliseconds since the epoch"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "recipeId": {
                "type": "string",
                "example": "passwordless"
              }
            }
          }
        ],
        "oneOf": [
          {
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          {
            "type": "string",
            "example": "+14155552671"
          }
        ]
      },
      "bulkImportUser": {
        "type": "object",
        "properties": {
          "externalUserId": {
            "type": "string",
            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
          },
          "userMetadata": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "should be a JSON object (not a JSON literal nor an array)",
              "example": {
                "preferences": {
                  "theme": "dark"
                },
                "notifications": {
                  "email": true
                },
                "todos": ["example"]
              }
            }
          },
          "userRoles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "example": "admin"
                },
                "tenantIds": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "customer1"
                  }
                }
              },
              "required": ["role", "tenantIds"]
            }
          },
          "totpDevices": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "secretKey": {
                  "type": "string",
                  "example": "2PRXZWZAYYDAWCD"
                },
                "skew": {
                  "type": "number",
                  "example": 0
                },
                "period": {
                  "type": "number",
                  "example": 30
                },
                "deviceName": {
                  "type": "string",
                  "example": "My Authy App"
                }
              },
              "required": ["secretKey"]
            }
          },
          "loginMethods": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "name": "Email/Password Login Method",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "tenantIds": {
                          "type": "array",
                          "description": "List of tenant IDs this login method is associated with",
                          "items": {
                            "type": "string",
                            "example": "customer1"
                          }
                        },
                        "isVerified": {
                          "type": "boolean",
                          "description": "Indicates whether the email is verified"
                        },
                        "isPrimary": {
                          "type": "boolean",
                          "description": "Indicates whether the login method is the primary login method"
                        },
                        "timeJoinedInMSSinceEpoch": {
                          "type": "integer",
                          "description": "Time joined in milliseconds since the epoch"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "recipeId": {
                          "type": "string",
                          "example": "emailpassword"
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@gmail.com"
                        },
                        "passwordHash": {
                          "type": "string",
                          "example": "$argon2d$v=19$m=12,t=3,p=1$aGI4enNvMmd0Zm0wMDAwMA$r6p7qbr6HD+8CD7sBi4HVw"
                        },
                        "plainTextPassword": {
                          "type": "string",
                          "example": "passwordExample"
                        },
                        "hashingAlgorithm": {
                          "type": "string",
                          "enum": ["argon2", "bcrypt", "firebase_scrypt"]
                        }
                      },
                      "required": ["email", "passwordHash", "hashingAlgorithm"]
                    }
                  ]
                },
                {
                  "name": "Third Party Login Method",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "tenantIds": {
                          "type": "array",
                          "description": "List of tenant IDs this login method is associated with",
                          "items": {
                            "type": "string",
                            "example": "customer1"
                          }
                        },
                        "isVerified": {
                          "type": "boolean",
                          "description": "Indicates whether the email is verified"
                        },
                        "isPrimary": {
                          "type": "boolean",
                          "description": "Indicates whether the login method is the primary login method"
                        },
                        "timeJoinedInMSSinceEpoch": {
                          "type": "integer",
                          "description": "Time joined in milliseconds since the epoch"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "recipeId": {
                          "type": "string",
                          "example": "thirdparty"
                        },
                        "thirdPartyId": {
                          "type": "string",
                          "example": "google"
                        },
                        "thirdPartyUserId": {
                          "type": "string",
                          "example": 106347997792363870000
                        }
                      },
                      "required": ["thirdPartyId", "thirdPartyUserId"]
                    }
                  ]
                },
                {
                  "name": "Passwordless Login Method",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "tenantIds": {
                          "type": "array",
                          "description": "List of tenant IDs this login method is associated with",
                          "items": {
                            "type": "string",
                            "example": "customer1"
                          }
                        },
                        "isVerified": {
                          "type": "boolean",
                          "description": "Indicates whether the email is verified"
                        },
                        "isPrimary": {
                          "type": "boolean",
                          "description": "Indicates whether the login method is the primary login method"
                        },
                        "timeJoinedInMSSinceEpoch": {
                          "type": "integer",
                          "description": "Time joined in milliseconds since the epoch"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "recipeId": {
                          "type": "string",
                          "example": "passwordless"
                        }
                      }
                    }
                  ],
                  "oneOf": [
                    {
                      "type": "string",
                      "example": "johndoe@gmail.com"
                    },
                    {
                      "type": "string",
                      "example": "+14155552671"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "addBulkImportUserResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
          },
          "loginMethods": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "recipeId": {
                  "type": "string",
                  "example": "emailpassword"
                },
                "userId": {
                  "type": "string",
                  "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                },
                "tenants": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "customer1"
                  }
                },
                "email": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                },
                "thirdpartyId": {
                  "type": "string",
                  "example": "google"
                },
                "thirdpartyUserId": {
                  "type": "string",
                  "example": 106347997792363870000
                },
                "phoneNumber": {
                  "type": "string",
                  "example": "+14155552671"
                }
              },
              "required": ["recipeId", "userId", "tenants", "email"]
            }
          }
        }
      },
      "bulkImportUserResponse": {
        "properties": {
          "id": {
            "type": "string",
            "example": "fa7a0841-b533-4478-9253-0fde890c576"
          },
          "status": {
            "type": "string",
            "enum": ["NEW", "PROCESSING", "FAILED"]
          },
          "createdAt": {
            "type": "number",
            "example": 1623918032231
          },
          "updatedAt": {
            "type": "number",
            "example": 1623918032231
          }
        },
        "allOf": [
          {
            "type": "object",
            "properties": {
              "externalUserId": {
                "type": "string",
                "example": "fa7a0841-b533-4478-95533-0fde890c3483"
              },
              "userMetadata": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "should be a JSON object (not a JSON literal nor an array)",
                  "example": {
                    "preferences": {
                      "theme": "dark"
                    },
                    "notifications": {
                      "email": true
                    },
                    "todos": ["example"]
                  }
                }
              },
              "userRoles": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "example": "admin"
                    },
                    "tenantIds": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "customer1"
                      }
                    }
                  },
                  "required": ["role", "tenantIds"]
                }
              },
              "totpDevices": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "secretKey": {
                      "type": "string",
                      "example": "2PRXZWZAYYDAWCD"
                    },
                    "skew": {
                      "type": "number",
                      "example": 0
                    },
                    "period": {
                      "type": "number",
                      "example": 30
                    },
                    "deviceName": {
                      "type": "string",
                      "example": "My Authy App"
                    }
                  },
                  "required": ["secretKey"]
                }
              },
              "loginMethods": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "name": "Email/Password Login Method",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "tenantIds": {
                              "type": "array",
                              "description": "List of tenant IDs this login method is associated with",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "isVerified": {
                              "type": "boolean",
                              "description": "Indicates whether the email is verified"
                            },
                            "isPrimary": {
                              "type": "boolean",
                              "description": "Indicates whether the login method is the primary login method"
                            },
                            "timeJoinedInMSSinceEpoch": {
                              "type": "integer",
                              "description": "Time joined in milliseconds since the epoch"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "recipeId": {
                              "type": "string",
                              "example": "emailpassword"
                            },
                            "email": {
                              "type": "string",
                              "example": "johndoe@gmail.com"
                            },
                            "passwordHash": {
                              "type": "string",
                              "example": "$argon2d$v=19$m=12,t=3,p=1$aGI4enNvMmd0Zm0wMDAwMA$r6p7qbr6HD+8CD7sBi4HVw"
                            },
                            "plainTextPassword": {
                              "type": "string",
                              "example": "passwordExample"
                            },
                            "hashingAlgorithm": {
                              "type": "string",
                              "enum": ["argon2", "bcrypt", "firebase_scrypt"]
                            }
                          },
                          "required": ["email", "passwordHash", "hashingAlgorithm"]
                        }
                      ]
                    },
                    {
                      "name": "Third Party Login Method",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "tenantIds": {
                              "type": "array",
                              "description": "List of tenant IDs this login method is associated with",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "isVerified": {
                              "type": "boolean",
                              "description": "Indicates whether the email is verified"
                            },
                            "isPrimary": {
                              "type": "boolean",
                              "description": "Indicates whether the login method is the primary login method"
                            },
                            "timeJoinedInMSSinceEpoch": {
                              "type": "integer",
                              "description": "Time joined in milliseconds since the epoch"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "recipeId": {
                              "type": "string",
                              "example": "thirdparty"
                            },
                            "thirdPartyId": {
                              "type": "string",
                              "example": "google"
                            },
                            "thirdPartyUserId": {
                              "type": "string",
                              "example": 106347997792363870000
                            }
                          },
                          "required": ["thirdPartyId", "thirdPartyUserId"]
                        }
                      ]
                    },
                    {
                      "name": "Passwordless Login Method",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "tenantIds": {
                              "type": "array",
                              "description": "List of tenant IDs this login method is associated with",
                              "items": {
                                "type": "string",
                                "example": "customer1"
                              }
                            },
                            "isVerified": {
                              "type": "boolean",
                              "description": "Indicates whether the email is verified"
                            },
                            "isPrimary": {
                              "type": "boolean",
                              "description": "Indicates whether the login method is the primary login method"
                            },
                            "timeJoinedInMSSinceEpoch": {
                              "type": "integer",
                              "description": "Time joined in milliseconds since the epoch"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "recipeId": {
                              "type": "string",
                              "example": "passwordless"
                            }
                          }
                        }
                      ],
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "johndoe@gmail.com"
                        },
                        {
                          "type": "string",
                          "example": "+14155552671"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object"
          }
        ]
      },
      "oauthError": {
        "type": "object",
        "required": ["status", "error", "errorDescription", "statusCode"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["OAUTH_ERROR"]
          },
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "name": "api-key",
        "description": "The core service API token. If you are using a self-hosted core service and you have not generated a token, you can omit the header.",
        "type": "apiKey",
        "in": "header",
        "example": "ajs30Nlbs0DjvsdFIne934n8NVee5n"
      }
    }
  }
}
