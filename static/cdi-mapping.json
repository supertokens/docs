{
  "canCreatePrimaryUser": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Check primary user creation possibility",
      "title": "Check primary user creation possibility",
      "description": "Check if primary user can be created for given user id\n"
    },
    "path": "/appid-{appId}/recipe/accountlinking/user/primary/check",
    "method": "get",
    "filePath": "/cdi/account-linking/get-accountlinking-user-primary-check.mdx"
  },
  "canLinkAccounts": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Check account linking possibility",
      "title": "Check account linking possibility",
      "description": "Check if accounts can be linked for given primary and recipe user id\n"
    },
    "path": "/appid-{appId}/recipe/accountlinking/user/link/check",
    "method": "get",
    "filePath": "/cdi/account-linking/get-accountlinking-user-link-check.mdx"
  },
  "createPrimaryUser": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "post Create primary user account",
      "title": "Create primary user account",
      "description": "Create a primary user for given user id\n"
    },
    "path": "/appid-{appId}/recipe/accountlinking/user/primary",
    "method": "post",
    "filePath": "/cdi/account-linking/post-accountlinking-user-primary.mdx"
  },
  "linkAccounts": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "post Link user accounts together",
      "title": "Link user accounts together",
      "description": "Link accounts for given primary and recipe user id\n"
    },
    "path": "/appid-{appId}/recipe/accountlinking/user/link",
    "method": "post",
    "filePath": "/cdi/account-linking/post-accountlinking-user-link.mdx"
  },
  "unlinkAccounts": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "post Unlink user accounts",
      "title": "Unlink user accounts",
      "description": "Unlink accounts for given recipe user id\n"
    },
    "path": "/appid-{appId}/recipe/accountlinking/user/unlink",
    "method": "post",
    "filePath": "/cdi/account-linking/post-accountlinking-user-unlink.mdx"
  },
  "createTotpDevice": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "post Add TOTP device for user",
      "title": "Add TOTP device for user",
      "description": "Add a TOTP device for a user and enable TOTP if not already enabled.\n"
    },
    "path": "/appid-{appId}/recipe/totp/device",
    "method": "post",
    "filePath": "/cdi/mfa/post-totp-device.mdx"
  },
  "updateTotpDeviceName": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "put Update TOTP device name",
      "title": "Update TOTP device name",
      "description": "Update the name of a TOTP device for a user.\n"
    },
    "path": "/appid-{appId}/recipe/totp/device",
    "method": "put",
    "filePath": "/cdi/mfa/put-totp-device.mdx"
  },
  "getTotpDevices": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get List user TOTP devices",
      "title": "List user TOTP devices",
      "description": "Retrieve a list of TOTP devices for a user.\n"
    },
    "path": "/appid-{appId}/recipe/totp/device/list",
    "method": "get",
    "filePath": "/cdi/mfa/get-totp-device-list.mdx"
  },
  "importTotpDevice": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "post Import existing TOTP device",
      "title": "Import existing TOTP device",
      "description": "Add a TOTP device for a user and enable TOTP if not already enabled.\n"
    },
    "path": "/recipe/totp/device/import",
    "method": "post",
    "filePath": "/cdi/mfa/post-totp-device-import.mdx"
  },
  "removeTotpDevice": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "post Remove TOTP device",
      "title": "Remove TOTP device",
      "description": "Remove a TOTP device for a user. If all devices are removed, TOTP is disabled for the user.\n"
    },
    "path": "/appid-{appId}/recipe/totp/device/remove",
    "method": "post",
    "filePath": "/cdi/mfa/post-totp-device-remove.mdx"
  },
  "verifyTotpCode": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "post Verify TOTP code",
      "title": "Verify TOTP code",
      "description": "Check if a TOTP code is valid against any of the TOTP devices for a user.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/totp/verify",
    "method": "post",
    "filePath": "/cdi/mfa/post-totp-verify.mdx"
  },
  "verifyTotpDevice": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "post Verify TOTP device",
      "title": "Verify TOTP device",
      "description": "Mark a TOTP device as verified if the given TOTP code is valid for that device.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/totp/device/verify",
    "method": "post",
    "filePath": "/cdi/mfa/post-totp-device-verify.mdx"
  },
  "userIdMappingCreateMapping": {
    "frontmatter": {
      "sidebar_position": 17,
      "sidebar_label": "post Create user ID mapping",
      "title": "Create user ID mapping",
      "description": "Create a mapping between a SuperTokens userId and an external userId.\n"
    },
    "path": "/appid-{appId}/recipe/userid/map",
    "method": "post",
    "filePath": "/cdi/core/post-userid-map.mdx"
  },
  "userIdMappingGetMapping": {
    "frontmatter": {
      "sidebar_position": 9,
      "sidebar_label": "get Get user ID mapping",
      "title": "Get user ID mapping",
      "description": "Retrieve a UserIdMapping\n"
    },
    "path": "/appid-{appId}/recipe/userid/map",
    "method": "get",
    "filePath": "/cdi/core/get-userid-map.mdx"
  },
  "userIdMappingRemoveMapping": {
    "frontmatter": {
      "sidebar_position": 18,
      "sidebar_label": "post Remove user ID mapping",
      "title": "Remove user ID mapping",
      "description": "Delete a mapping between a SuperTokens userId and an external userId.\n"
    },
    "path": "/appid-{appId}/recipe/userid/map/remove",
    "method": "post",
    "filePath": "/cdi/core/post-userid-map-remove.mdx"
  },
  "userIdMappingUpateExternalUserIdInfo": {
    "frontmatter": {
      "sidebar_position": 22,
      "sidebar_label": "put Update external user info",
      "title": "Update external user info",
      "description": "Update or delete externalUserIdInfo\n"
    },
    "path": "/appid-{appId}/recipe/userid/external-user-id-info",
    "method": "put",
    "filePath": "/cdi/core/put-userid-external-user-id-info.mdx"
  },
  "passwordlessCheckCode": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "post Check passwordless code",
      "title": "Check passwordless code",
      "description": "Tries to check if the passed userInputCode+deviceId combo or the linkCode is valid\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/signinup/code/check",
    "method": "post",
    "filePath": "/cdi/passwordless/post-signinup-code-check.mdx"
  },
  "passwordlessTryUseCode": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "post Consume passwordless code",
      "title": "Consume passwordless code",
      "description": "Tries to consume the passed userInputCode+deviceId combo or the linkCode to sign the user in\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/signinup/code/consume",
    "method": "post",
    "filePath": "/cdi/passwordless/post-signinup-code-consume.mdx"
  },
  "passwordlessStartSignIn": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "post Start passwordless sign in",
      "title": "Start passwordless sign in",
      "description": "Starts a sign in process by requesting a linkCode and a deviceId + userInputCode combination the user can use to sign in.\nPassing the optional deviceId signifies a resend code flow.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/signinup/code",
    "method": "post",
    "filePath": "/cdi/passwordless/post-signinup-code.mdx"
  },
  "passwordlessRevokeCode": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "post Revoke passwordless code",
      "title": "Revoke passwordless code",
      "description": "Revokes a code by id\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/signinup/code/remove",
    "method": "post",
    "filePath": "/cdi/passwordless/post-signinup-code-remove.mdx"
  },
  "passwordlessListCodes": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get List passwordless codes",
      "title": "List passwordless codes",
      "description": "Lists all active passwordless codes of the user\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/signinup/codes",
    "method": "get",
    "filePath": "/cdi/passwordless/get-signinup-codes.mdx"
  },
  "passwordlessRevokeAllCodesOfUser": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "post Revoke all user codes",
      "title": "Revoke all user codes",
      "description": "Revokes all codes issued for the user\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/signinup/codes/remove",
    "method": "post",
    "filePath": "/cdi/passwordless/post-signinup-codes-remove.mdx"
  },
  "passwordlessGetUser": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Get passwordless user (deprecated)",
      "title": "Get passwordless user",
      "description": "Get a user's information.\n\nAPI is tenant specific if querying by email or phone number.\nIf querying by userId, tenantId will be ignored.\n\nNote that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user â €",
    "method": "get",
    "filePath": "/cdi/passwordless/get-user.mdx"
  },
  "passwordlessPutUser": {
    "frontmatter": {
      "sidebar_position": 8,
      "sidebar_label": "put Update passwordless user",
      "title": "Update passwordless user",
      "description": "Update a user's information.\nIf the email or phoneNumber is set to null the previous value will be deleted. If they are not set (i.e., undefined/missing from the request), they are left as-is.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user â €",
    "method": "put",
    "filePath": "/cdi/passwordless/put-user.mdx"
  },
  "emailPasswordSignin": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "post Sign in user",
      "title": "Sign in user",
      "description": "Signin a user with email ID and password\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/signin",
    "method": "post",
    "filePath": "/cdi/email-password/post-signin.mdx"
  },
  "emailPasswordSignup": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "post Sign up user",
      "title": "Sign up user",
      "description": "Signup a user with email ID and password\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/signup",
    "method": "post",
    "filePath": "/cdi/email-password/post-signup.mdx"
  },
  "emailPasswordGetUser": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get email password user (deprecated)",
      "title": "Get email password user",
      "description": "Get a user's information\n\nAPI is tenant specific if querying by email.\nIf querying by userId, tenantId will be ignored.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user",
    "method": "get",
    "filePath": "/cdi/email-password/get-user.mdx"
  },
  "emailPasswordPutUser": {
    "frontmatter": {
      "sidebar_position": 8,
      "sidebar_label": "put Update user info",
      "title": "Update user info",
      "description": "Update a user's information\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user",
    "method": "put",
    "filePath": "/cdi/email-password/put-user.mdx"
  },
  "emailPasswordGetPasswordResetToken": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "post Generate password reset token",
      "title": "Generate password reset token",
      "description": "Generate a new reset password token for this user\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/password/reset/token",
    "method": "post",
    "filePath": "/cdi/email-password/post-user-password-reset-token.mdx"
  },
  "emailPasswordGetPasswordReset": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "post Reset user password (deprecated)",
      "title": "Reset user password",
      "description": "Reset a password using password reset token\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/password/reset",
    "method": "post",
    "filePath": "/cdi/email-password/post-user-password-reset.mdx"
  },
  "userImport": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "post Import user with hash",
      "title": "Import user with hash",
      "description": "Import a user with email ID and password hash\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/passwordhash/import",
    "method": "post",
    "filePath": "/cdi/email-password/post-user-passwordhash-import.mdx"
  },
  "emailPasswordResetPasswordConsumeToken": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "post Consume password reset token",
      "title": "Consume password reset token",
      "description": "Consume a password reset token\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/password/reset/token/consume",
    "method": "post",
    "filePath": "/cdi/email-password/post-user-password-reset-token-consume.mdx"
  },
  "thirdPartySigninup": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "post Sign in/up third party user",
      "title": "Sign in/up third party user",
      "description": "Signin/up a user\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/signinup",
    "method": "post",
    "filePath": "/cdi/thirdparty/post-signinup.mdx"
  },
  "thirdPartyGetUser": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get third party user (deprecated)",
      "title": "Get third party user",
      "description": "Get a user's information.\n\nAPI is tenant specific if querying by email.\nIf querying by userId, tenantId will be ignored.\n\nNote that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/userâ €",
    "method": "get",
    "filePath": "/cdi/thirdparty/get-user.mdx"
  },
  "thirdPartyGetUsersByEmail": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Get users by email (deprecated)",
      "title": "Get users by email",
      "description": "Get all users accounts associated with given email\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/users/by-email",
    "method": "get",
    "filePath": "/cdi/thirdparty/get-users-by-email.mdx"
  },
  "emailVerificationVerifyToken": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "post Generate email verification token",
      "title": "Generate email verification token",
      "description": "Generate a new email verification token for this user\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/email/verify/token",
    "method": "post",
    "filePath": "/cdi/email-verification/post-user-email-verify-token.mdx"
  },
  "emailVerificationVerifyTokenRemove": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "post Remove email verification tokens",
      "title": "Remove email verification tokens",
      "description": "Remove all unused email verification tokens for this user\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/email/verify/token/remove",
    "method": "post",
    "filePath": "/cdi/email-verification/post-user-email-verify-token-remove.mdx"
  },
  "emailVerificationVerify": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "post Verify email",
      "title": "Verify email",
      "description": "Verify an email\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/email/verify",
    "method": "post",
    "filePath": "/cdi/email-verification/post-user-email-verify.mdx"
  },
  "emailVerificationVerifyGet": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Check email verification",
      "title": "Check email verification",
      "description": "Check if an email is verified\n"
    },
    "path": "/appid-{appId}/recipe/user/email/verify",
    "method": "get",
    "filePath": "/cdi/email-verification/get-user-email-verify.mdx"
  },
  "emailVerificationVerifyRemove": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "post Unverify email",
      "title": "Unverify email",
      "description": "Unverify an email\n"
    },
    "path": "/appid-{appId}/recipe/user/email/verify/remove",
    "method": "post",
    "filePath": "/cdi/email-verification/post-user-email-verify-remove.mdx"
  },
  "userMetadataRead": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get user metadata",
      "title": "Get user metadata",
      "description": "Gets the stored metadata object of the user\n"
    },
    "path": "/appid-{appId}/recipe/user/metadata",
    "method": "get",
    "filePath": "/cdi/user-metadata/get-user-metadata.mdx"
  },
  "userMetadataUpdate": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "put Update user metadata",
      "title": "Update user metadata",
      "description": "Updates the metadata object stored about the user by doing a shallow merge of the stored and the update JSONs\nand removing properties set to null on the root level of the update object. The merged object is then reserialized and stored.\n\ne.g.:\n  - stored: `{ \"preferences\": { \"theme\":\"dark\" }, \"notifications\": { \"email\": true }, \"todos\": [\"example\"] }`\n\n  - update: `{ \"notifications\": { \"sms\": true }, \"todos\": null }`\n\n  - result: `{ \"preferences\": { \"theme\":\"dark\" }, \"notifications\": { \"sms\": true } }`\n"
    },
    "path": "/appid-{appId}/recipe/user/metadata",
    "method": "put",
    "filePath": "/cdi/user-metadata/put-user-metadata.mdx"
  },
  "userMetadataDelete": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "post Remove user metadata",
      "title": "Remove user metadata",
      "description": "Removes the entire metadata JSON stored about the user.\n"
    },
    "path": "/appid-{appId}/recipe/user/metadata/remove",
    "method": "post",
    "filePath": "/cdi/user-metadata/post-user-metadata-remove.mdx"
  },
  "addUserRole": {
    "frontmatter": {
      "sidebar_position": 9,
      "sidebar_label": "put Add user role",
      "title": "Add user role",
      "description": "Creates a User Role mapping\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/role",
    "method": "put",
    "filePath": "/cdi/user-roles/put-user-role.mdx"
  },
  "removeUserRole": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "post Remove user role",
      "title": "Remove user role",
      "description": "Removes a User Role mapping\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/role/remove",
    "method": "post",
    "filePath": "/cdi/user-roles/post-user-role-remove.mdx"
  },
  "getUserRoles": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Get user roles",
      "title": "Get user roles",
      "description": "Retrive the roles associated with the user.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/user/roles",
    "method": "get",
    "filePath": "/cdi/user-roles/get-user-roles.mdx"
  },
  "getRoleUsers": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get users with role",
      "title": "Get users with role",
      "description": "Retrive the users associated with the role.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/role/users",
    "method": "get",
    "filePath": "/cdi/user-roles/get-role-users.mdx"
  },
  "putRole": {
    "frontmatter": {
      "sidebar_position": 10,
      "sidebar_label": "put Create or update role",
      "title": "Create or update role",
      "description": "Creates a role with permissions, can also be used to add permissions to a role\n"
    },
    "path": "/appid-{appId}/recipe/role",
    "method": "put",
    "filePath": "/cdi/user-roles/put-role.mdx"
  },
  "getRolePermissions": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "get Get role permissions",
      "title": "Get role permissions",
      "description": "Retrive the permissions associated with a role\n"
    },
    "path": "/appid-{appId}/recipe/role/permissions",
    "method": "get",
    "filePath": "/cdi/user-roles/get-role-permissions.mdx"
  },
  "removeRolePermissions": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "post Remove role permissions",
      "title": "Remove role permissions",
      "description": "Removes permissions mapped to a role, if no permissions are passed all permissions mapped to the role are removed\n"
    },
    "path": "/appid-{appId}/recipe/role/permissions/remove",
    "method": "post",
    "filePath": "/cdi/user-roles/post-role-permissions-remove.mdx"
  },
  "getPermissionRoles": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "get Get permission roles",
      "title": "Get permission roles",
      "description": "Retrive the roles associated with the permission\n"
    },
    "path": "/appid-{appId}/recipe/permission/roles",
    "method": "get",
    "filePath": "/cdi/user-roles/get-permission-roles.mdx"
  },
  "removeRole": {
    "frontmatter": {
      "sidebar_position": 8,
      "sidebar_label": "post Delete role",
      "title": "Delete role",
      "description": "Deletes a role\n"
    },
    "path": "/appid-{appId}/recipe/role/remove",
    "method": "post",
    "filePath": "/cdi/user-roles/post-role-remove.mdx"
  },
  "getRoles": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "get Get all roles",
      "title": "Get all roles",
      "description": "Retrive all created roles\n"
    },
    "path": "/appid-{appId}/recipe/roles",
    "method": "get",
    "filePath": "/cdi/user-roles/get-roles.mdx"
  },
  "createNewSession": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "post Create new session",
      "title": "Create new session",
      "description": "Create a new Session\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/session",
    "method": "post",
    "filePath": "/cdi/session/post-session.mdx"
  },
  "getSessionInfo": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "get Get session info",
      "title": "Get session info",
      "description": "Get user and session information for a given session handle\n"
    },
    "path": "/appid-{appId}/recipe/session",
    "method": "get",
    "filePath": "/cdi/session/get-session.mdx"
  },
  "deleteSession": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "post Delete session",
      "title": "Delete session",
      "description": "Delete a sesion\n\nIf revoking session by `userId`, the sessions are cleared across all tenants by default.\n\nNote: If `revokeAcrossAllTenants` is set to `true`, this API can only be called from `public` tenant.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/session/remove",
    "method": "post",
    "filePath": "/cdi/session/post-session-remove.mdx"
  },
  "verifySession": {
    "frontmatter": {
      "sidebar_position": 10,
      "sidebar_label": "post Verify session",
      "title": "Verify session",
      "description": "Verify a Session\n"
    },
    "path": "/appid-{appId}/recipe/session/verify",
    "method": "post",
    "filePath": "/cdi/session/post-session-verify.mdx"
  },
  "refreshSession": {
    "frontmatter": {
      "sidebar_position": 8,
      "sidebar_label": "post Refresh session",
      "title": "Refresh session",
      "description": "Refresh a Session\n"
    },
    "path": "/appid-{appId}/recipe/session/refresh",
    "method": "post",
    "filePath": "/cdi/session/post-session-refresh.mdx"
  },
  "getUserSessionHandles": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Get user session handles",
      "title": "Get user session handles",
      "description": "Get session handles for a user\n\nBy default, the session handles are fetched across all tenants. Set `fetchAcrossAllTenants` to `false` to get sessionHandles for the user for a particular tenant.\n\nNote: If `fetchAcrossAllTenants` is set to `true`, this API can only be called from `public` tenant.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/session/user",
    "method": "get",
    "filePath": "/cdi/session/get-session-user.mdx"
  },
  "regenerateSession": {
    "frontmatter": {
      "sidebar_position": 9,
      "sidebar_label": "post Regenerate session",
      "title": "Regenerate session",
      "description": "Regenerate a session\n"
    },
    "path": "/appid-{appId}/recipe/session/regenerate",
    "method": "post",
    "filePath": "/cdi/session/post-session-regenerate.mdx"
  },
  "getSessionData": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "get Get session data (deprecated)",
      "title": "Get session data",
      "description": "Get session data\n"
    },
    "path": "/appid-{appId}/recipe/session/data",
    "method": "get",
    "filePath": "/cdi/session/get-session-data.mdx"
  },
  "putSessionData": {
    "frontmatter": {
      "sidebar_position": 12,
      "sidebar_label": "put Update session data",
      "title": "Update session data",
      "description": "Change session data\n"
    },
    "path": "/appid-{appId}/recipe/session/data",
    "method": "put",
    "filePath": "/cdi/session/put-session-data.mdx"
  },
  "createSignedJWT": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "post Create signed JWT",
      "title": "Create signed JWT",
      "description": "Create a signed JWT\n"
    },
    "path": "/appid-{appId}/recipe/jwt",
    "method": "post",
    "filePath": "/cdi/session/post-jwt.mdx"
  },
  "getJWKS": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Get JWT keys (deprecated)",
      "title": "Get JWT keys",
      "description": "Retrieve JWKs for JWT verification, containing both static and dynamic keys.\n"
    },
    "path": "/appid-{appId}/recipe/jwt/jwks",
    "method": "get",
    "filePath": "/cdi/oauth/get-jwks.mdx"
  },
  "getWellKnownJWKS": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get well-known JWT keys",
      "title": "Get well-known JWT keys",
      "description": "Retrieve JWKs for JWT verification, containing both static and dynamic keys.\n"
    },
    "path": "/appid-{appId}/.well-known/jwks.json",
    "method": "get",
    "filePath": "/cdi/oauth/get-well-known-jwks.mdx"
  },
  "getJWTData": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get JWT data (deprecated)",
      "title": "Get JWT data",
      "description": "Get JWT data for a session\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/jwt/data",
    "method": "get",
    "filePath": "/cdi/session/get-jwt-data.mdx"
  },
  "putJWTData": {
    "frontmatter": {
      "sidebar_position": 11,
      "sidebar_label": "put Update JWT data",
      "title": "Update JWT data",
      "description": "Change JWT data for a session\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/jwt/data",
    "method": "put",
    "filePath": "/cdi/session/put-jwt-data.mdx"
  },
  "createDashboardUser": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "post Create dashboard user",
      "title": "Create dashboard user",
      "description": "Create a dashboard user\n"
    },
    "path": "/appid-{appId}/recipe/dashboard/user",
    "method": "post",
    "filePath": "/cdi/dashboard/post-dashboard-user.mdx"
  },
  "updateDashboardUser": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "put Update dashboard user",
      "title": "Update dashboard user",
      "description": "Update a user's email or password\n"
    },
    "path": "/appid-{appId}/recipe/dashboard/user",
    "method": "put",
    "filePath": "/cdi/dashboard/put-dashboard-user.mdx"
  },
  "deleteDashboardUser": {
    "frontmatter": {
      "sidebar_position": 9,
      "sidebar_label": "delete Delete dashboard user",
      "title": "Delete dashboard user",
      "description": "Delete a dashboard user with their userId or email\n"
    },
    "path": "/appid-{appId}/recipe/dashboard/user",
    "method": "delete",
    "filePath": "/cdi/dashboard/delete-dashboard-user.mdx"
  },
  "getAllDashboardUsers": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "get Get all dashboard users",
      "title": "Get all dashboard users",
      "description": "Get a list of call the dashboard users\n"
    },
    "path": "/appid-{appId}/recipe/dashboard/users",
    "method": "get",
    "filePath": "/cdi/dashboard/get-dashboard-users.mdx"
  },
  "verifyDashboardUserSession": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "post Verify dashboard user session",
      "title": "Verify dashboard user session",
      "description": "Verify a Dashboard user's sessionId\n"
    },
    "path": "/appid-{appId}/recipe/dashboard/session/verify",
    "method": "post",
    "filePath": "/cdi/dashboard/post-dashboard-session-verify.mdx"
  },
  "RevokeDashboardUsersSession": {
    "frontmatter": {
      "sidebar_position": 8,
      "sidebar_label": "delete Revoke dashboard user session",
      "title": "Revoke dashboard user session",
      "description": "Revoke a Dashboard user's session\n"
    },
    "path": "/appid-{appId}/recipe/dashboard/session",
    "method": "delete",
    "filePath": "/cdi/dashboard/delete-dashboard-session.mdx"
  },
  "signInDashboardUser": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "post Sign in dashboard user",
      "title": "Sign in dashboard user",
      "description": "Signin a Dashboard user\n"
    },
    "path": "/appid-{appId}/recipe/dashboard/signin",
    "method": "post",
    "filePath": "/cdi/dashboard/post-dashboard-signin.mdx"
  },
  "getAllSessionsForDashboardUser": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Get all sessions for dashboard user",
      "title": "Get all sessions for dashboard user",
      "description": "Get a list of the sessions for the dashboard user\n"
    },
    "path": "/appid-{appId}/recipe/dashboard/user/sessions",
    "method": "get",
    "filePath": "/cdi/dashboard/get-dashboard-user-sessions.mdx"
  },
  "getApiVersion": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "get Get API version",
      "title": "Get API version",
      "description": "Get a list of compatible CDI versions\n"
    },
    "path": "/appid-{appId}/apiversion",
    "method": "get",
    "filePath": "/cdi/core/get-apiversion.mdx"
  },
  "getConfig": {
    "frontmatter": {
      "sidebar_position": 15,
      "sidebar_label": "get Get config file path",
      "title": "Get config file path",
      "description": "Get path to the loaded config file\n"
    },
    "path": "/config",
    "method": "get",
    "filePath": "/cdi/core/get-config.mdx"
  },
  "getHelloOnRootPath": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get hello message on root path",
      "title": "Get hello message on root path",
      "description": "Return a simple hello message\n"
    },
    "path": "/appid-{appId}/{tenantId}/",
    "method": "get",
    "filePath": "/cdi/core/get-root.mdx"
  },
  "getHello": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Get hello message",
      "title": "Get hello message",
      "description": "Return a simple hello message\n"
    },
    "path": "/appid-{appId}/{tenantId}/hello",
    "method": "get",
    "filePath": "/cdi/core/get-hello.mdx"
  },
  "putHello": {
    "frontmatter": {
      "sidebar_position": 20,
      "sidebar_label": "put Put hello message",
      "title": "Put hello message",
      "description": "Return a simple hello message\n"
    },
    "path": "/appid-{appId}/{tenantId}/hello",
    "method": "put",
    "filePath": "/cdi/core/put-hello.mdx"
  },
  "postHello": {
    "frontmatter": {
      "sidebar_position": 16,
      "sidebar_label": "post Post hello message",
      "title": "Post hello message",
      "description": "Return a simple hello message\n"
    },
    "path": "/appid-{appId}/{tenantId}/hello",
    "method": "post",
    "filePath": "/cdi/core/post-hello.mdx"
  },
  "deleteHello": {
    "frontmatter": {
      "sidebar_position": 23,
      "sidebar_label": "delete Delete hello message",
      "title": "Delete hello message",
      "description": "Return a simple hello message\n"
    },
    "path": "/appid-{appId}/{tenantId}/hello",
    "method": "delete",
    "filePath": "/cdi/core/delete-hello.mdx"
  },
  "getTelemetry": {
    "frontmatter": {
      "sidebar_position": 11,
      "sidebar_label": "get Get telemetry ID",
      "title": "Get telemetry ID",
      "description": "Returns the telemetryID if it exists\n"
    },
    "path": "/appid-{appId}/telemetry",
    "method": "get",
    "filePath": "/cdi/core/get-telemetry.mdx"
  },
  "getUsersCount": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "get Get users count",
      "title": "Get users count",
      "description": "Get number of users.\n\nAPI is tenant specific if `includeAllTenants` is false.\nElse, `tenantId` is ignored.\n"
    },
    "path": "/appid-{appId}/{tenantId}/users/count",
    "method": "get",
    "filePath": "/cdi/core/get-users-count.mdx"
  },
  "getActiveUsersCount": {
    "frontmatter": {
      "sidebar_position": 14,
      "sidebar_label": "get Get active users count",
      "title": "Get active users count",
      "description": "Get number of active users.\n"
    },
    "path": "/appid-{appId}/users/count/active",
    "method": "get",
    "filePath": "/cdi/core/get-users-count-active.mdx"
  },
  "getUsers": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "get Get users",
      "title": "Get users",
      "description": "Get users.\n\nAPI is tenant specific if `includeAllTenants` is false.\nElse, `tenantId` is ignored.\n"
    },
    "path": "/appid-{appId}/{tenantId}/users",
    "method": "get",
    "filePath": "/cdi/core/get-users.mdx"
  },
  "deleteUser": {
    "frontmatter": {
      "sidebar_position": 19,
      "sidebar_label": "post Delete user",
      "title": "Delete user",
      "description": "Delete user\n"
    },
    "path": "/appid-{appId}/user/remove",
    "method": "post",
    "filePath": "/cdi/core/post-user-remove.mdx"
  },
  "getSearchTags": {
    "frontmatter": {
      "sidebar_position": 13,
      "sidebar_label": "get Get search tags",
      "title": "Get search tags",
      "description": "Retrieve available tags for search\n"
    },
    "path": "/appid-{appId}/user/search/tags",
    "method": "get",
    "filePath": "/cdi/core/get-user-search-tags.mdx"
  },
  "getFeatureFlag": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "get Get enterprise features",
      "title": "Get enterprise features",
      "description": "Get a list of the enabled enterprise features\n"
    },
    "path": "/appid-{appId}/ee/featureflag",
    "method": "get",
    "filePath": "/cdi/core/get-ee-featureflag.mdx"
  },
  "setLicense": {
    "frontmatter": {
      "sidebar_position": 21,
      "sidebar_label": "put Set license key",
      "title": "Set license key",
      "description": "Set or sync license key\n"
    },
    "path": "/appid-{appId}/ee/license",
    "method": "put",
    "filePath": "/cdi/core/put-ee-license.mdx"
  },
  "deleteLicense": {
    "frontmatter": {
      "sidebar_position": 24,
      "sidebar_label": "delete Delete license key",
      "title": "Delete license key",
      "description": "Delete license key\n"
    },
    "path": "/appid-{appId}/ee/license",
    "method": "delete",
    "filePath": "/cdi/core/delete-ee-license.mdx"
  },
  "getLicense": {
    "frontmatter": {
      "sidebar_position": 8,
      "sidebar_label": "get Get license key",
      "title": "Get license key",
      "description": "Retrieve license key\n"
    },
    "path": "/appid-{appId}/ee/license",
    "method": "get",
    "filePath": "/cdi/core/get-ee-license.mdx"
  },
  "getUserId": {
    "frontmatter": {
      "sidebar_position": 12,
      "sidebar_label": "get Get user ID",
      "title": "Get user ID",
      "description": "Get user id from email or phone number\n"
    },
    "path": "/appid-{appId}/user/id",
    "method": "get",
    "filePath": "/cdi/core/get-user-id.mdx"
  },
  "getUsersByAccountInfo": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "get Get users by account info",
      "title": "Get users by account info",
      "description": "Get users by email, phoneNumber or thirdParty info\n"
    },
    "path": "/appid-{appId}/{tenantId}/users/by-accountinfo",
    "method": "get",
    "filePath": "/cdi/core/get-users-by-accountinfo.mdx"
  },
  "getRequestsStats": {
    "frontmatter": {
      "sidebar_position": 10,
      "sidebar_label": "get Get requests stats",
      "title": "Get requests stats",
      "description": "Get requests stats for last 24 hours\n\n`averageRequestsPerSecond` and `peakRequestsPerSecond` would countain `1440` values corresponding to `now - 1440 minutes` until `now - 1 minute`.\n\nA value of `-1` would mean that there is no data for that minute.\n"
    },
    "path": "/appid-{appId}/requests/stats",
    "method": "get",
    "filePath": "/cdi/core/get-requests-stats.mdx"
  },
  "createOrUpdateConnectionURIDomainPUT": {
    "frontmatter": {
      "sidebar_position": 20,
      "sidebar_label": "put Upsert connection URI domain (deprecated)",
      "title": "Upsert connection URI domain",
      "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still accepts those `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs for backward compatibility.\n\nCreate or update a connection uri domain.\n\nSuperTokens subscription license key is required, if not using the base connection uri domain.\n\nThis request must originate from public app and public tenant on the base\nconnection uri domain.\n\nIf creating a new connection uri domain, only the login methods set to true will be enabled and rest will be disabled by default.\n\n`firstFactors` and `requiredSecondaryFactors` can be set to null to remove all entries in the core, or a non empty string array to be updated in the core. Setting of empty array is disallowed.\n\nNote: the create/update will fail if a login method is not enabled and a relavant factor is added to either `firstFactors` or `requiredSecondaryFactors`. For example, `emailPasswordEnabled` cannot be set to `false` if `emailpassword` is present in the `firstFactors` array.\n\nIf updating an existing connection uri domain,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nNote: The core config must contain a unique connection to the storage layer, because sharing of database between 2 different connection uri domains is not allowed.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain. In order to update config for the default connectionUriDomain, you must edit the config.yaml or the docker env directly.\n"
    },
    "path": "/recipe/multitenancy/connectionuridomain",
    "method": "put",
    "filePath": "/cdi/multitenancy/put-multitenancy-connectionuridomain.mdx"
  },
  "createOrUpdateConnectionURIDomainV2PUT": {
    "frontmatter": {
      "sidebar_position": 21,
      "sidebar_label": "put Upsert connection uri domain",
      "title": "Upsert connection uri domain",
      "description": "Create or update a connection uri domain.\n\nSuperTokens subscription license key is required, if not using the base connection uri domain.\n\nThis request must originate from public app and public tenant on the base\nconnection uri domain.\n\nThe `firstFactors` can be set to following values:\n\n- `null`: When set to `null`, all the login methods will be available for the connection URI domain (public app, public tenant).\n- `[]` (empty array): No login methods will be enabled for the connection URI domain (public app, public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the connection URI domain (public app, public tenant). For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.\n\nList of built-in first factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n\nIf first factors are not specified while creating a new connection uri domain, all the login methods will be enabled by default.\n\nThe `requiredSecondaryFactors` can be set to following values:\n- `null`: When set to `null`, no secondary factors will be required for the users of the connection URI domain (public app, public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the connection URI domain (public app, public tenant) must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.\n\nList of built-in secondary factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n- Time based OTP: `totp`\n\nIf updating an existing connection uri domain,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nNote: The core config must contain a unique connection to the storage layer, because sharing of database between 2 different connection uri domains is not allowed.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain. In order to update config for the default connectionUriDomain, you must edit the config.yaml or the docker env directly.\n"
    },
    "path": "/recipe/multitenancy/connectionuridomain/v2",
    "method": "put",
    "filePath": "/cdi/multitenancy/put-multitenancy-connectionuridomain-v2.mdx"
  },
  "deleteConnectionUriDomainPOST": {
    "frontmatter": {
      "sidebar_position": 14,
      "sidebar_label": "post Remove connection uri domain",
      "title": "Remove connection uri domain",
      "description": "Delete a connection uri domain.\n\nDeletion of base connection uri domain is not allowed.\n\nThe request must originate from base connection uri domain and public app and tenant.\n\nNote: There should be no apps or tenants (other than the public app and public tenant) belonging to the connection uri domain to be able to delete it.\n"
    },
    "path": "/recipe/multitenancy/connectionuridomain/remove",
    "method": "post",
    "filePath": "/cdi/multitenancy/post-multitenancy-connectionuridomain-remove.mdx"
  },
  "connectionUriDomainListGET": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "get List connection uri domains (deprecated)",
      "title": "List connection uri domains",
      "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371\n\nGet a list of all connection uri domains.\n\nRequest must originate from base connection uri domain and public app and tenant.\n"
    },
    "path": "/recipe/multitenancy/connectionuridomain/list",
    "method": "get",
    "filePath": "/cdi/multitenancy/get-multitenancy-connectionuridomain-list.mdx"
  },
  "connectionUriDomainListV2GET": {
    "frontmatter": {
      "sidebar_position": 8,
      "sidebar_label": "get List connection uri domains",
      "title": "List connection uri domains",
      "description": "Get a list of all connection uri domains.\n\nThe value of `firstFactors` can be as follows:\n- `null`: When set to `null`, the SDK will use firstFactors defined in the SDK\n- `[]` (empty array): No first factors would be enabled for the tenant\n- non-empty array: The first factors that are enabled for the tenant\n\nRequest must originate from base connection uri domain and public app and tenant.\n"
    },
    "path": "/recipe/multitenancy/connectionuridomain/list/v2",
    "method": "get",
    "filePath": "/cdi/multitenancy/get-multitenancy-connectionuridomain-list-v2.mdx"
  },
  "createOrUpdateAppPUT": {
    "frontmatter": {
      "sidebar_position": 18,
      "sidebar_label": "put Upsert app (deprecated)",
      "title": "Upsert app",
      "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still accepts those `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs for backward compatibility.\n\nCreate or update an app.\nSuperTokens subscription license key is required.\n\nIf creating a new app, only the login methods set to true will be enabled and rest will be disabled by default.\n\n`firstFactors` and `requiredSecondaryFactors` can be set to null to remove all entries in the core, or a non empty string array to be updated in the core. Setting of empty array is disallowed.\n\nNote: the create/update will fail if a login method is not enabled and a relavant factor is added to either `firstFactors` or `requiredSecondaryFactors`. For example, `emailPasswordEnabled` cannot be set to `false` if `emailpassword` is present in the `firstFactors` array.\n\nIf updating an existing app,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nNote: the newly created app will use the same connection uri domain from which\nthis request originates and the request must originate from public app and public tenant.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain, public app. In order to update config for the default connectionUriDomain and public app, you must edit the config.yaml or the docker env directly.\n"
    },
    "path": "/recipe/multitenancy/app",
    "method": "put",
    "filePath": "/cdi/multitenancy/put-multitenancy-app.mdx"
  },
  "createOrUpdateAppV2PUT": {
    "frontmatter": {
      "sidebar_position": 19,
      "sidebar_label": "put Upsert app",
      "title": "Upsert app",
      "description": "Create or update an app.\n\nSuperTokens subscription license key is required.\n\nThe `firstFactors` can be set to following values:\n\n- `null`: When set to `null`, all the login methods will be available for the app (public tenant).\n- `[]` (empty array): No login methods will be enabled for the app (public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the app (public tenant). For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.\n\nList of built-in first factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n\nIf first factors are not specified while creating a new app, all the login methods will be enabled by default.\n\nThe `requiredSecondaryFactors` can be set to following values:\n- `null`: When set to `null`, no secondary factors will be required for the users of the app (public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the app (public tenant) must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.\n\nList of built-in secondary factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n- Time based OTP: `totp`\n\nIf updating an existing app,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nNote: the newly created app will use the same connection uri domain from which\nthis request originates and the request must originate from public app and public tenant.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain, public app. In order to update config for the default connectionUriDomain and public app, you must edit the config.yaml or the docker env directly.\n"
    },
    "path": "/recipe/multitenancy/app/v2",
    "method": "put",
    "filePath": "/cdi/multitenancy/put-multitenancy-app-v2.mdx"
  },
  "deleteAppPOST": {
    "frontmatter": {
      "sidebar_position": 13,
      "sidebar_label": "post Delete app",
      "title": "Delete app",
      "description": "Delete an app.\n\nRequest must originate from public app and tenant.\n\nNote: No tenants (other than the public tenant) must belong to the app to be able to delete it.\n"
    },
    "path": "/recipe/multitenancy/app/remove",
    "method": "post",
    "filePath": "/cdi/multitenancy/post-multitenancy-app-remove.mdx"
  },
  "appListGET": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "get List apps (deprecated)",
      "title": "List apps",
      "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371\n\nGet a list of all apps in a connection uri domain.\n\nRequest must originate from public app and tenant.\n"
    },
    "path": "/recipe/multitenancy/app/list",
    "method": "get",
    "filePath": "/cdi/multitenancy/get-multitenancy-app-list.mdx"
  },
  "appListV2GET": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "get List apps",
      "title": "List apps",
      "description": "Get a list of all apps in a connection uri domain.\n\nThe value of `firstFactors` can be as follows:\n- `null`: When set to `null`, the SDK will use firstFactors defined in the SDK\n- `[]` (empty array): No first factors would be enabled for the tenant\n- non-empty array: The first factors that are enabled for the tenant\n\nRequest must originate from public app and tenant.\n"
    },
    "path": "/recipe/multitenancy/app/list/v2",
    "method": "get",
    "filePath": "/cdi/multitenancy/get-multitenancy-app-list-v2.mdx"
  },
  "createOrUpdateTenantPUT": {
    "frontmatter": {
      "sidebar_position": 16,
      "sidebar_label": "put Upsert tenant (deprecated)",
      "title": "Upsert tenant",
      "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still accepts those `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs for backward compatibility.\n\nCreates or updates a tenant.\n\nSuperTokens subscription license key is required.\n\nIf creating a new tenant, only the login methods set to true will be enabled and rest will be disabled by default.\n\n`firstFactors` and `requiredSecondaryFactors` can be set to null to remove all entries in the core, or a non empty string array to be updated in the core. Setting of empty array is disallowed.\n\nNote: the create/update will fail if a login method is not enabled and a relavant factor is added to either `firstFactors` or `requiredSecondaryFactors`. For example, `emailPasswordEnabled` cannot be set to `false` if `emailpassword` is present in the `firstFactors` array.\n\nIf updating an existing tenant,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nThe request must originate from public tenant, and the new tenant will use connectionUriDomain and app from which the request originates.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain, public app and tenant. In order to update config for the default connectionUriDomain, public app and tenant, you must edit the config.yaml or the docker env directly.\n"
    },
    "path": "/appid-{appId}/recipe/multitenancy/tenant",
    "method": "put",
    "filePath": "/cdi/multitenancy/put-multitenancy-tenant.mdx"
  },
  "createOrUpdateTenantV2PUT": {
    "frontmatter": {
      "sidebar_position": 17,
      "sidebar_label": "put Upsert tenant",
      "title": "Upsert tenant",
      "description": "Creates or updates a tenant.\n\nSuperTokens subscription license key is required.\n\nThe `firstFactors` can be set to following values:\n\n- `null`: When set to `null`, all the login methods will be available for the tenant.\n- `[]` (empty array): No login methods will be enabled for the tenant.\n- `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the tenant. For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.\n\nList of built-in first factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n\nIf first factors are not specified while creating a new tenant, all the login methods will be disabled by default.\n\nThe `requiredSecondaryFactors` can be set to following values:\n- `null`: When set to `null`, no secondary factors will be required for the users of the tenant.\n- `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the tenant must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.\n\nList of built-in secondary factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n- Time based OTP: `totp`\n\nIf updating an existing tenant,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nThe request must originate from public tenant, and the new tenant will use connectionUriDomain and app from which the request originates.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain, public app and tenant. In order to update config for the default connectionUriDomain, public app and tenant, you must edit the config.yaml or the docker env directly.\n"
    },
    "path": "/appid-{appId}/recipe/multitenancy/tenant/v2",
    "method": "put",
    "filePath": "/cdi/multitenancy/put-multitenancy-tenant-v2.mdx"
  },
  "tenantConfigGet": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get tenant configuration (deprecated)",
      "title": "Get tenant configuration",
      "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371\n\nGet a tenant config of the tenant specified by the url prefix.\n\nSuperTokens subscription license key is required if querying any tenant other than the base tenant.\n\nReturns recipes with their enabled flag and recipe specific configs saved in core\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/multitenancy/tenant",
    "method": "get",
    "filePath": "/cdi/multitenancy/get-multitenancy-tenant.mdx"
  },
  "tenantConfigV2Get": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Get tenant configuration",
      "title": "Get tenant configuration",
      "description": "Get a tenant config of the tenant specified by the url prefix.\n\nThe value of `firstFactors` can be as follows:\n- `null`: When set to `null`, the SDK will use firstFactors defined in the SDK\n- `[]` (empty array): No first factors would be enabled for the tenant\n- non-empty array: The first factors that are enabled for the tenant\n\nSuperTokens subscription license key is required if querying any tenant other than the base tenant.\n\nReturns recipes with their enabled flag and recipe specific configs saved in core\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/multitenancy/tenant/v2",
    "method": "get",
    "filePath": "/cdi/multitenancy/get-multitenancy-tenant-v2.mdx"
  },
  "tenantCoreConfigForDashboardGET": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get the core config",
      "title": "Get the core config",
      "description": "Get the core config of the tenant specified by the url prefix, along with the metadata of each of the fields.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/dashboard/tenant/core-config",
    "method": "get",
    "filePath": "/cdi/dashboard/get-dashboard-tenant-core-config.mdx"
  },
  "deleteTenantPOST": {
    "frontmatter": {
      "sidebar_position": 12,
      "sidebar_label": "post Delete a tenant",
      "title": "Delete a tenant",
      "description": "Delete a tenant.\n\nRequest must originate from public tenant.\n"
    },
    "path": "/appid-{appId}/recipe/multitenancy/tenant/remove",
    "method": "post",
    "filePath": "/cdi/multitenancy/post-multitenancy-tenant-remove.mdx"
  },
  "tenantListGET": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "get List tenants in an app (deprecated)",
      "title": "List tenants in an app",
      "description": "This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.\n\nNote: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371\n\nGet a list of all tenants in an app.\n\nRequest must originate from public tenant.\n"
    },
    "path": "/appid-{appId}/recipe/multitenancy/tenant/list",
    "method": "get",
    "filePath": "/cdi/multitenancy/get-multitenancy-tenant-list.mdx"
  },
  "tenantListV2GET": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "get List tenants in an app",
      "title": "List tenants in an app",
      "description": "Get a list of all tenants in an app.\n\nThe value of `firstFactors` can be as follows:\n- `null`: When set to `null`, the SDK will use firstFactors defined in the SDK\n- `[]` (empty array): No first factors would be enabled for the tenant\n- non-empty array: The first factors that are enabled for the tenant\n\nRequest must originate from public tenant.\n"
    },
    "path": "/appid-{appId}/recipe/multitenancy/tenant/list/v2",
    "method": "get",
    "filePath": "/cdi/multitenancy/get-multitenancy-tenant-list-v2.mdx"
  },
  "createOrUpdateTenantConfigPUT": {
    "frontmatter": {
      "sidebar_position": 15,
      "sidebar_label": "put Upsert ThirdParty Provider configuration",
      "title": "Upsert ThirdParty Provider configuration",
      "description": "Creates or updates ThirdParty Provider Config for a tenant.\n\nIf `skipValidation` is set to true, the config will be saved without any validation.\n\nIf the config already exists for the given `tenantId` and `thirdPartyId`, the config in the core will be completely replaced with the config provided in the request body.\n\n**Validations done by the core:**\n\n`thirdPartyId` and `name` are required\n\nCommon to all providers:\n  - `clients` list:\n    - can be undefined or empty\n    - if contains 1 element, clientType can be empty or undefined\n    - if contains more than 1 element, clientType must be defined and unique\n  - for each element in `clients`:\n    - `clientId` must not be empty\n\nBuilt-in provider's specific validation is invoked if the `thirdPartyId` starts with the provider's id\n\nApple (id: apple):\n  - `clients`\n    - if it contains elements, each of them are validated as follows:\n      - `clientSecret` must be empty or undefined\n      - `additionalConfig` should contain the following keys:\n        - `keyId` must be a non empty string\n        - `teamId` must be a non empty string\n        - `privateKey` must be a non empty string\n\nGoogle Workspaces (id: google-workspaces):\n  - `clients`\n    - if it contains elements, each of them are validated as follows:\n      - `additionalConfig` may contain the key `hd`\n        - `hd` is optional\n        - if specified, it must be either `\"*\"`, or a valid domain\n\nBoxy SAML (id: boxy-saml):\n  - `clients`\n    - `additionalConfig` in the each element must contain `boxyURL` and must be non-empty string\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/multitenancy/config/thirdparty",
    "method": "put",
    "filePath": "/cdi/multitenancy/put-multitenancy-config-thirdparty.mdx"
  },
  "deleteTenantConfigPOST": {
    "frontmatter": {
      "sidebar_position": 9,
      "sidebar_label": "post Delete ThirdParty Provider configuration",
      "title": "Delete ThirdParty Provider configuration",
      "description": "Delete ThirdParty Provider configuration for a tenant.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/multitenancy/config/thirdparty/remove",
    "method": "post",
    "filePath": "/cdi/multitenancy/post-multitenancy-config-thirdparty-remove.mdx"
  },
  "addUserToTenant": {
    "frontmatter": {
      "sidebar_position": 10,
      "sidebar_label": "post Add user tenant association",
      "title": "Add user tenant association",
      "description": "Add user's association with the tenant.\n\nUser will be added to the tenant based on the url prefix of the request.\n\nNote: To associate a user to a tenant, the tenant must be in the same database\nand user must already exist in the app\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/multitenancy/tenant/user",
    "method": "post",
    "filePath": "/cdi/multitenancy/post-multitenancy-tenant-user.mdx"
  },
  "removeUserFromTenant": {
    "frontmatter": {
      "sidebar_position": 11,
      "sidebar_label": "post Remove user tenant association",
      "title": "Remove user tenant association",
      "description": "Remove user's association with the tenant\n\nUser will be removed from the tenant based on the url prefix of the request.\n"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/multitenancy/tenant/user/remove",
    "method": "post",
    "filePath": "/cdi/multitenancy/post-multitenancy-tenant-user-remove.mdx"
  },
  "getOAuth2Client": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "get Get OAuth2 Client",
      "title": "Get OAuth2 Client",
      "description": "Get OAuth2 Client\n"
    },
    "path": "/appid-{appId}/recipe/oauth/clients",
    "method": "get",
    "filePath": "/cdi/oauth/get-oauth2-client.mdx"
  },
  "createOAuth2Client": {
    "frontmatter": {
      "sidebar_position": 9,
      "sidebar_label": "post Create OAuth2 Client",
      "title": "Create OAuth2 Client",
      "description": "Create OAuth2 Client\n"
    },
    "path": "/appid-{appId}/recipe/oauth/clients",
    "method": "post",
    "filePath": "/cdi/oauth/post-oauth2-client.mdx"
  },
  "updateOAuth2Client": {
    "frontmatter": {
      "sidebar_position": 22,
      "sidebar_label": "put Update OAuth2 Client",
      "title": "Update OAuth2 Client",
      "description": "Update OAuth2 Client\n"
    },
    "path": "/appid-{appId}/recipe/oauth/clients",
    "method": "put",
    "filePath": "/cdi/oauth/put-oauth2-client.mdx"
  },
  "listOAuth2Clients": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "get List OAuth2 Clients",
      "title": "List OAuth2 Clients",
      "description": "List OAuth2 Clients\n"
    },
    "path": "/appid-{appId}/recipe/oauth/clients/list",
    "method": "get",
    "filePath": "/cdi/oauth/get-oauth2-clients.mdx"
  },
  "removeOAuth2Client": {
    "frontmatter": {
      "sidebar_position": 10,
      "sidebar_label": "post Remove OAuth2 Client",
      "title": "Remove OAuth2 Client",
      "description": "Remove OAuth2 Client\n"
    },
    "path": "/appid-{appId}/recipe/oauth/clients/remove",
    "method": "post",
    "filePath": "/cdi/oauth/post-oauth2-client-remove.mdx"
  },
  "getOAuth2ConsentRequest": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "get Get OAuth2 Consent Request",
      "title": "Get OAuth2 Consent Request",
      "description": "Get OAuth2 Consent Request\n"
    },
    "path": "/appid-{appId}/recipe/oauth/auth/requests/consent",
    "method": "get",
    "filePath": "/cdi/oauth/get-oauth2-consent-request.mdx"
  },
  "acceptOAuth2ConsentRequest": {
    "frontmatter": {
      "sidebar_position": 16,
      "sidebar_label": "put Accept OAuth2 Consent Request",
      "title": "Accept OAuth2 Consent Request",
      "description": "Accept OAuth2 Consent Request\n"
    },
    "path": "/appid-{appId}/recipe/oauth/auth/requests/consent/accept",
    "method": "put",
    "filePath": "/cdi/oauth/post-oauth2-consent-request-accept.mdx"
  },
  "rejectOAuth2ConsentRequest": {
    "frontmatter": {
      "sidebar_position": 17,
      "sidebar_label": "put Reject OAuth2 Consent Request",
      "title": "Reject OAuth2 Consent Request",
      "description": "Reject OAuth2 Consent Request\n"
    },
    "path": "/appid-{appId}/recipe/oauth/auth/requests/consent/reject",
    "method": "put",
    "filePath": "/cdi/oauth/post-oauth2-consent-request-reject.mdx"
  },
  "getOAuth2LoginRequest": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "get Get OAuth2 Login Request",
      "title": "Get OAuth2 Login Request",
      "description": "Get OAuth2 Login Request\n"
    },
    "path": "/appid-{appId}/recipe/oauth/auth/requests/login",
    "method": "get",
    "filePath": "/cdi/oauth/get-oauth2-login-request.mdx"
  },
  "acceptOAuth2LoginRequest": {
    "frontmatter": {
      "sidebar_position": 18,
      "sidebar_label": "put Accept OAuth2 Login Request",
      "title": "Accept OAuth2 Login Request",
      "description": "Accept OAuth2 Login Request\n"
    },
    "path": "/appid-{appId}/recipe/oauth/auth/requests/login/accept",
    "method": "put",
    "filePath": "/cdi/oauth/post-oauth2-login-request-accept.mdx"
  },
  "rejectOAuth2LoginRequest": {
    "frontmatter": {
      "sidebar_position": 19,
      "sidebar_label": "put Reject OAuth2 Login Request",
      "title": "Reject OAuth2 Login Request",
      "description": "Reject OAuth2 Login Request\n"
    },
    "path": "/appid-{appId}/recipe/oauth/auth/requests/login/reject",
    "method": "put",
    "filePath": "/cdi/oauth/post-oauth2-login-request-reject.mdx"
  },
  "acceptOAuth2LogoutRequest": {
    "frontmatter": {
      "sidebar_position": 20,
      "sidebar_label": "put Accept OAuth2 Logout Request",
      "title": "Accept OAuth2 Logout Request",
      "description": "Accept OAuth2 Logout Request\n"
    },
    "path": "/appid-{appId}/recipe/oauth/auth/requests/logout/accept",
    "method": "put",
    "filePath": "/cdi/oauth/post-oauth2-logout-request-accept.mdx"
  },
  "rejectOAuth2LogoutRequest": {
    "frontmatter": {
      "sidebar_position": 21,
      "sidebar_label": "put Reject OAuth2 Logout Request",
      "title": "Reject OAuth2 Logout Request",
      "description": "Reject OAuth2 Logout Request\n"
    },
    "path": "/appid-{appId}/recipe/oauth/auth/requests/logout/reject",
    "method": "put",
    "filePath": "/cdi/oauth/post-oauth2-logout-request-reject.mdx"
  },
  "revokeOAuth2Session": {
    "frontmatter": {
      "sidebar_position": 12,
      "sidebar_label": "post Revoke OAuth2 Session",
      "title": "Revoke OAuth2 Session",
      "description": "Revoke OAuth2 Session\n"
    },
    "path": "/appid-{appId}/recipe/oauth/session/revoke",
    "method": "post",
    "filePath": "/cdi/oauth/post-oauth2-session-revoke.mdx"
  },
  "revokeOAuth2Token": {
    "frontmatter": {
      "sidebar_position": 14,
      "sidebar_label": "post Revoke OAuth2 Token",
      "title": "Revoke OAuth2 Token",
      "description": "Revoke OAuth2 Token\n"
    },
    "path": "/appid-{appId}/recipe/oauth/token/revoke",
    "method": "post",
    "filePath": "/cdi/oauth/post-oauth2-token-revoke.mdx"
  },
  "revokeOAuth2Tokens": {
    "frontmatter": {
      "sidebar_position": 15,
      "sidebar_label": "post Revoke OAuth2 Token",
      "title": "Revoke OAuth2 Token",
      "description": "Revoke OAuth2 Token\n"
    },
    "path": "/appid-{appId}/recipe/oauth/tokens/revoke",
    "method": "post",
    "filePath": "/cdi/oauth/post-oauth2-tokens-revoke.mdx"
  },
  "getOAuth2Auth": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "get Get OAuth2 Auth",
      "title": "Get OAuth2 Auth",
      "description": "Get OAuth2 Auth\n"
    },
    "path": "/appid-{appId}/recipe/oauth/auth",
    "method": "get",
    "filePath": "/cdi/oauth/get-oauth2-auth.mdx"
  },
  "getOAuth2Token": {
    "frontmatter": {
      "sidebar_position": 13,
      "sidebar_label": "post Get OAuth2 Token",
      "title": "Get OAuth2 Token",
      "description": "Get OAuth2 Token\n"
    },
    "path": "/appid-{appId}/recipe/oauth/token",
    "method": "post",
    "filePath": "/cdi/oauth/get-oauth2-token.mdx"
  },
  "getOAuth2SessionsLogout": {
    "frontmatter": {
      "sidebar_position": 8,
      "sidebar_label": "get Get OAuth2 Sessions Logout",
      "title": "Get OAuth2 Sessions Logout",
      "description": "Get OAuth2 Sessions Logout\n"
    },
    "path": "/appid-{appId}/recipe/oauth/sessions/logout",
    "method": "get",
    "filePath": "/cdi/oauth/get-oauth2-sessions-logout.mdx"
  },
  "introspectOAuth2Token": {
    "frontmatter": {
      "sidebar_position": 11,
      "sidebar_label": "post Introspect OAuth2 Token",
      "title": "Introspect OAuth2 Token",
      "description": "Introspect OAuth2 Token\n"
    },
    "path": "/appid-{appId}/recipe/oauth/introspect",
    "method": "post",
    "filePath": "/cdi/oauth/post-oauth2-token-introspect.mdx"
  },
  "getBulkImportUsers": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get List bulk import users",
      "title": "List bulk import users",
      "description": "Paginated API to get bulk import users\n"
    },
    "path": "/appid-{appId}/bulk-import/users",
    "method": "get",
    "filePath": "/cdi/import/get-bulk-import-users.mdx"
  },
  "addBulkImportUsers": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "post Add bulk import users",
      "title": "Add bulk import users",
      "description": "Add users for bulk import. Maximum 10000 users can be added in one request.\n"
    },
    "path": "/appid-{appId}/bulk-import/users",
    "method": "post",
    "filePath": "/cdi/import/post-bulk-import-users.mdx"
  },
  "deleteBulkImportUsers": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "post Delete bulk import users",
      "title": "Delete bulk import users",
      "description": "Delete bulk import users by id. Multiple ids can be passed in the request body.\n"
    },
    "path": "/appid-{appId}/bulk-import/users/remove",
    "method": "post",
    "filePath": "/cdi/import/delete-bulk-import-users.mdx"
  },
  "countBulkImportUsers": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Count bulk import users",
      "title": "Count bulk import users",
      "description": "Count users in the bulk import processing queue, by status or all of them (by passing `null` status).\n"
    },
    "path": "/appid-<appId>/bulk-import/users/count",
    "method": "get",
    "filePath": "/cdi/import/post-bulk-import-import.mdx"
  },
  "importOneUserWithBulkImport": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "post Import one user directly",
      "title": "Import one user directly",
      "description": "Import one user immediately with the Bulk Import functionality.\n"
    },
    "path": "/appid-<appId>/bulk-import/import",
    "method": "post",
    "filePath": "/cdi/import/get-bulk-import-users-count.mdx"
  },
  "getWebAuthNCredential": {
    "frontmatter": {
      "sidebar_position": 2,
      "sidebar_label": "get Get WebAuthn credential",
      "title": "Get WebAuthn credential",
      "description": "Get the WebAuthn credential for the user."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/user/credential",
    "method": "get",
    "filePath": "/cdi/webauthn/get-webauthn-credential.mdx"
  },
  "listWebAuthNCredentials": {
    "frontmatter": {
      "sidebar_position": 3,
      "sidebar_label": "get List WebAuthn credentials",
      "title": "List WebAuthn credentials",
      "description": "List credentials that were created by the user."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/user/credential/list",
    "method": "get",
    "filePath": "/cdi/webauthn/get-webauthn-credentials.mdx"
  },
  "getWebAuthNOptions": {
    "frontmatter": {
      "sidebar_position": 1,
      "sidebar_label": "get Get WebAuthn options",
      "title": "Get WebAuthn options",
      "description": "Get the WebAuthn options."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/options",
    "method": "get",
    "filePath": "/cdi/webauthn/get-webauthn-options.mdx"
  },
  "recoverWebAuthNUser": {
    "frontmatter": {
      "sidebar_position": 4,
      "sidebar_label": "get Recover WebAuthn user",
      "title": "Recover WebAuthn user",
      "description": "Recover the user using the WebAuthn credential."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/user/recover",
    "method": "get",
    "filePath": "/cdi/webauthn/post-webauthn-recover.mdx"
  },
  "generateRegistrationOptions": {
    "frontmatter": {
      "sidebar_position": 5,
      "sidebar_label": "post Generate registration options",
      "title": "Generate registration options",
      "description": "Generate the webauthn options for registration."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/options/register",
    "method": "post",
    "filePath": "/cdi/webauthn/post-webauthn-registration-options.mdx"
  },
  "generateSigninOptions": {
    "frontmatter": {
      "sidebar_position": 6,
      "sidebar_label": "post Generate authentication options",
      "title": "Generate authentication options",
      "description": "Generate the webauthn options for signin."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/options/signin",
    "method": "post",
    "filePath": "/cdi/webauthn/post-webauthn-signin-options.mdx"
  },
  "registerWebAuthNCredential": {
    "frontmatter": {
      "sidebar_position": 9,
      "sidebar_label": "post Register WebAuthn credential",
      "title": "Register WebAuthn credential",
      "description": "Register a new credential for the user"
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/user/credential/register",
    "method": "post",
    "filePath": "/cdi/webauthn/post-webauthn-register.mdx"
  },
  "signUpWebAuthNUser": {
    "frontmatter": {
      "sidebar_position": 8,
      "sidebar_label": "post Sign up WebAuthn user",
      "title": "Sign up WebAuthn user",
      "description": "Sign up the user using the WebAuthn credential."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/signup",
    "method": "post",
    "filePath": "/cdi/webauthn/post-webauthn-signup.mdx"
  },
  "signInWebAuthNUser": {
    "frontmatter": {
      "sidebar_position": 7,
      "sidebar_label": "post Sign in WebAuthn user",
      "title": "Sign in WebAuthn user",
      "description": "Sign in the user using the WebAuthn credential."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/signin",
    "method": "post",
    "filePath": "/cdi/webauthn/post-webauthn-signin.mdx"
  },
  "generateTokenForRecovery": {
    "frontmatter": {
      "sidebar_position": 10,
      "sidebar_label": "post Generate recovery token",
      "title": "Generate recovery token",
      "description": "Generate a token to recover the user."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/user/recover/token",
    "method": "post",
    "filePath": "/cdi/webauthn/post-webauthn-token-recovery.mdx"
  },
  "consumeWebAuthNToken": {
    "frontmatter": {
      "sidebar_position": 11,
      "sidebar_label": "post Consume recovery token",
      "title": "Consume recovery token",
      "description": "Consume the token to recover the user."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/user/recover/token/consume",
    "method": "post",
    "filePath": "/cdi/webauthn/post-webauthn-token-consume.mdx"
  },
  "updateEmail": {
    "frontmatter": {
      "sidebar_position": 12,
      "sidebar_label": "put Update email",
      "title": "Update email",
      "description": "Update the email of the user."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/user/email",
    "method": "put",
    "filePath": "/cdi/webauthn/put-webauthn-email.mdx"
  },
  "removeWebAuthNCredential": {
    "frontmatter": {
      "sidebar_position": 14,
      "sidebar_label": "delete Remove WebAuthn credential",
      "title": "Remove WebAuthn credential",
      "description": "Remove the WebAuthn credential for the user."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/user/credential/remove",
    "method": "delete",
    "filePath": "/cdi/webauthn/delete-webauthn-credential.mdx"
  },
  "removeWebAuthNOptions": {
    "frontmatter": {
      "sidebar_position": 13,
      "sidebar_label": "delete Remove WebAuthn options",
      "title": "Remove WebAuthn options",
      "description": "Remove the WebAuthn options."
    },
    "path": "/appid-{appId}/{tenantId}/recipe/webauthn/options/remove",
    "method": "delete",
    "filePath": "/cdi/webauthn/delete-webauthn-options.mdx"
  }
}
