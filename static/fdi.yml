openapi: 3.0.0
servers: []
info:
  description: |
    These are the APIs exposed by our backend SDK. To be consumed by the frontend only.
    `{tenantId}` in all the APIs are optional. Its default value is `public`
  version: "4.1.0"
  title: Frontend Driver Interface
  contact:
    email: support@supertokens.io
tags:
  - name: Session Recipe
  - name: EmailPassword Recipe
  - name: ThirdParty Recipe
  - name: Passwordless Recipe
  - name: EmailVerification Recipe
  - name: MultiFactorAuth Recipe
  - name: TOTP Recipe
  - name: JWT Recipe
  - name: OpenId Recipe
  - name: WebAuthn Recipe
  - name: OAuth2Provider Recipe
paths:
  /{apiBasePath}/mfa/info:
    put:
      tags:
        - MultiFactorAuth Recipe
      operationId: getMFAInfo
      summary: Get MFA factors information
      description: |
        Returns information about the auth factors of the current user and refreshes the related session claim
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/multiFactorAuthRid"
        - $ref: "#/components/parameters/anti-csrf"
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []

      responses:
        "200":
          description: Information about the auth factors of the current user and optionally the session with a refreshed MFA claim
          headers:
            Set-Cookie:
              description: Sent in cookie-based sessions if the access token is updated
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: Sent in cookie-based sessions if the access token is updated
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: Sent if enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              description: Sent if the access token is updated
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token"
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: MFA Info Response
                    description: Successful response containing information about the auth factors of the current user
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      factors:
                        type: object
                        properties:
                          alreadySetup:
                            type: array
                            items:
                              type: string
                          allowedToSetup:
                            type: array
                            items:
                              type: string
                          next:
                            type: array
                            items:
                              type: string
                      emails:
                        type: object
                        properties:
                          emailpassword:
                            type: array
                            items:
                              type: string
                          otp-email:
                            type: array
                            items:
                              type: string
                          link-email:
                            type: array
                            items:
                              type: string
                      phoneNumbers:
                        type: object
                        properties:
                          otp-phone:
                            type: array
                            items:
                              type: string
                          link-phone:
                            type: array
                            items:
                              type: string
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/totp/device/list:
    get:
      tags:
        - TOTP Recipe
      operationId: listTOTPdevices
      summary: List TOTP devices
      description: |
        List the TOTP devices of the current user
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/anti-csrf"
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []
      responses:
        "200":
          description: The list of the TOTP devices of the session user
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: TOTP Devices List Response
                    description: Successful response containing the list of TOTP devices for the current user
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      devices:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: "asdf123"
                            period:
                              type: number
                              example: 30
                            skew:
                              type: number
                              example: 30
                            verified:
                              type: boolean
                              example: false
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/totp/device:
    post:
      tags:
        - TOTP Recipe
      operationId: createTOTPDevice
      summary: Create TOTP device
      description: |
        Creates an unverified totp device
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/anti-csrf"
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceName:
                  type: string
                  example: "asdf123"
      responses:
        "200":
          description: |
            Information about the created (unverified) device. Based on the this,
            the user can add the device to their TOTP app and verify it.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: TOTP Device Creation Response
                    description: Successful response containing information about the created TOTP device
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      deviceName:
                        type: string
                        example: "asfd123"
                      qrCodeString:
                        type: string
                        example: "otpauth://totp/Supertokens:alice@google.com?secret=JBSWY3DPEHPK3PXP&issuer=Supertokens"
                      secret:
                        type: string
                        example: "JBSWY3DPEHPK3PXP"
                  - type: object
                    title: TOTP Device Already Exists Error
                    description: Error response when attempting to create a TOTP device that already exists
                    properties:
                      status:
                        type: string
                        enum: ["DEVICE_ALREADY_EXISTS_ERROR"]
                  - $ref: "#/components/schemas/generalErrorResponse"

        "403":
          $ref: "#/components/responses/403-factor-setup"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/totp/device/remove:
    post:
      tags:
        - TOTP Recipe
      operationId: removeTOTPDevice
      summary: Remove TOTP device
      description: |
        Removes a totp device
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/anti-csrf"
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceName:
                  type: string
                  example: "asdf123"
      responses:
        "200":
          description: Success report
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: TOTP Device Removal Response
                    description: Successful response indicating whether the TOTP device was removed
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      didDeviceExist:
                        type: boolean
                        example: true
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/totp/device/verify:
    post:
      tags:
        - TOTP Recipe
      operationId: verifyTOTPDevice
      summary: Verify TOTP device
      description: |
        Checks that the TOTP sent in the body belongs to the totp device (specified by deviceName, belonging to the session user)
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/anti-csrf"
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                totp:
                  type: string
                  example: "123456"
                deviceName:
                  type: string
                  example: "asdf123asdf"

      responses:
        "200":
          description: Verification result and optionally the session with a refreshed MFA claim
          headers:
            Set-Cookie:
              description: Sent in cookie-based sessions if the access token payload is updated
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: Sent in cookie-based sessions if the access token payload is updated
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: Sent if enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              description: Sent if the access token payload is updated
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token"
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: TOTP Device Verification Success
                    description: Successful response when TOTP device verification succeeds
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                  - type: object
                    title: Unknown TOTP Device Error
                    description: Error response when attempting to verify an unknown TOTP device
                    properties:
                      status:
                        type: string
                        enum: ["UNKNOWN_DEVICE_ERROR"]
                  - type: object
                    title: Invalid TOTP Error
                    description: Error response when the provided TOTP code is invalid
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_TOTP_ERROR"]
                      currentNumberOfFailedAttempts:
                        type: number
                        example: 2
                      maxNumberOfFailedAttempts:
                        type: number
                        example: 5
                  - type: object
                    title: TOTP Rate Limit Error
                    description: Error response when too many failed TOTP attempts have been made
                    properties:
                      status:
                        type: string
                        enum: ["LIMIT_REACHED_ERROR"]
                      retryAfterMs:
                        type: number
                        example: 30000
                  - $ref: "#/components/schemas/generalErrorResponse"

        "403":
          $ref: "#/components/responses/403-factor-setup"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/totp/verify:
    post:
      tags:
        - TOTP Recipe
      operationId: verifyTOTP
      summary: Verify TOTP code
      description: |
        Checks that the TOTP sent in the body belongs to a verified totp device of the session user
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/anti-csrf"
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                totp:
                  type: string
                  example: "123456"
      responses:
        "200":
          description: Verification result and optionally the session with a refreshed MFA claim
          headers:
            Set-Cookie:
              description: Sent in cookie-based sessions if the access token payload is updated
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: Sent in cookie-based sessions if the access token payload is updated
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: Sent if enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              description: Sent if the access token payload is updated
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token"
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Sign Out Response
                    description: Successful response when user is signed out
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_TOTP_ERROR"]
                      currentNumberOfFailedAttempts:
                        type: number
                        example: 2
                      maxNumberOfFailedAttempts:
                        type: number
                        example: 5
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["LIMIT_REACHED_ERROR"]
                      retryAfterMs:
                        type: number
                        example: 30000
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/signinup/code:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessSignInUpStart
      summary: Start passwordless sign in/up
      description: |
        Start sign in/up process with passwordless
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/passwordlessRid"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    email:
                      $ref: "#/components/schemas/email"
                    shouldTryLinkingWithSessionUser:
                      type: boolean
                      example: false
                  required:
                    - email
                - type: object
                  properties:
                    phoneNumber:
                      $ref: "#/components/schemas/phoneNumber"
                    shouldTryLinkingWithSessionUser:
                      type: boolean
                      example: false
                  required:
                    - phoneNumber

      responses:
        "200":
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Passwordless Sign In/Up Start Response
                    description: Successful response containing information to continue the passwordless sign in/up process
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      deviceId:
                        $ref: "#/components/schemas/deviceId"
                      preAuthSessionId:
                        $ref: "#/components/schemas/preAuthSessionId"
                      flowType:
                        type: string
                        enum: ["MAGIC_LINK", "USER_INPUT_CODE_AND_MAGIC_LINK", "USER_INPUT_CODE"]
                  - type: object
                    title: Sign In/Up Not Allowed Error
                    description: Error response when sign in/up is not allowed due to security reasons
                    properties:
                      status:
                        type: string
                        enum: ["SIGN_IN_UP_NOT_ALLOWED"]
                      reason:
                        type: string
                        example: "Cannot sign in / up due to security reasons. Please contact support. (IS_SIGN_IN_ALLOWED_FALSE)"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "403":
          $ref: "#/components/responses/403-factor-setup"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/signinup/code/resend:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessSignInUpResend
      summary: Resend passwordless code
      description: |
        Resend passwordless code
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/passwordlessRid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  $ref: "#/components/schemas/deviceId"
                preAuthSessionId:
                  $ref: "#/components/schemas/preAuthSessionId"
                shouldTryLinkingWithSessionUser:
                  type: boolean
                  example: false
              required:
                - deviceId
                - preAuthSessionId

      responses:
        "200":
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Passwordless Code Resend Response
                    description: Response indicating the status of the passwordless code resend attempt
                    properties:
                      status:
                        type: string
                        enum: ["OK", "RESTART_FLOW_ERROR"]
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/signinup/code/consume:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessSignInUpConsume
      summary: Complete passwordless sign in/up
      description: |
        Finish sign in/up process with passwordless
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/passwordlessRid"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    preAuthSessionId:
                      $ref: "#/components/schemas/preAuthSessionId"
                    shouldTryLinkingWithSessionUser:
                      type: boolean
                      example: false
                    linkCode:
                      type: string
                      example: b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8
                  required:
                    - preAuthSessionId
                    - linkCode

                - type: object
                  properties:
                    preAuthSessionId:
                      $ref: "#/components/schemas/preAuthSessionId"
                    shouldTryLinkingWithSessionUser:
                      type: boolean
                      example: false
                    deviceId:
                      $ref: "#/components/schemas/deviceId"
                    userInputCode:
                      type: string
                      example: 432123
                  required:
                    - preAuthSessionId
                    - deviceId
                    - userInputCode
      responses:
        "200":
          description: Signin/up a user
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            st-refresh-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: If enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token, st-refresh-token"
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Passwordless Sign In/Up Response
                    description: Successful response containing user information after passwordless sign in/up
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      createdNewRecipeUser:
                        type: boolean
                        example: true
                      user:
                        $ref: "#/components/schemas/user"

                  - type: object
                    title: Incorrect User Input Code Error
                    description: Error response when the user input code is incorrect
                    properties:
                      status:
                        type: string
                        enum: ["INCORRECT_USER_INPUT_CODE_ERROR", "EXPIRED_USER_INPUT_CODE_ERROR"]

                      failedCodeInputAttemptCount:
                        type: number
                        example: 2
                      maximumCodeInputAttempts:
                        type: number
                        example: 5
                  - type: object
                    title: Restart Flow Error
                    description: Error response indicating the flow needs to be restarted
                    properties:
                      status:
                        type: string
                        enum: ["RESTART_FLOW_ERROR"]
                  - type: object
                    title: Sign In/Up Not Allowed Error
                    description: Error response when sign in/up is not allowed due to security reasons
                    properties:
                      status:
                        type: string
                        enum: ["SIGN_IN_UP_NOT_ALLOWED"]
                      reason:
                        type: string
                        example: "Cannot sign in / up due to security reasons. Please contact support. (IS_SIGN_IN_ALLOWED_FALSE)"

                  - $ref: "#/components/schemas/generalErrorResponse"

        "403":
          $ref: "#/components/responses/403-factor-setup"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/signup/email/exists⠀⠀:
    get:
      deprecated: true
      tags:
        - Passwordless Recipe
      operationId: passwordlessEmailExistsDepr
      summary: Check email exists (deprecated)
      description: |
        Check if an email exists
        Note that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/email"
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Email Exists Response
                    description: Response indicating whether the email exists in the system
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      exists:
                        $ref: "#/components/schemas/exists"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/passwordless/email/exists:
    get:
      tags:
        - Passwordless Recipe
      operationId: passwordlessEmailExists
      summary: Check email exists
      description: |
        Check if an email exists
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/email"
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Email Exists Response
                    description: Response indicating whether the email exists in the system
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      exists:
                        $ref: "#/components/schemas/exists"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/signup/phoneNumber/exists:
    get:
      deprecated: true
      tags:
        - Passwordless Recipe
      operationId: passwordlessPhoneNumberExistsDepr
      summary: Check phone exists (deprecated)
      description: |
        Check if a phone number exists
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/phoneNumber"
      responses:
        "200":
          description: Checks if a phone number exists
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Phone Number Exists Response
                    description: Response indicating whether the phone number exists in the system
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      exists:
                        $ref: "#/components/schemas/exists"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/passwordless/phoneNumber/exists:
    get:
      tags:
        - Passwordless Recipe
      operationId: passwordlessPhoneNumberExists
      summary: Check phone exists
      description: |
        Check if a phone number exists
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/phoneNumber"
      responses:
        "200":
          description: Checks if a phone number exists
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      exists:
                        $ref: "#/components/schemas/exists"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/signout:
    post:
      tags:
        - Session Recipe
      operationId: signout
      summary: Sign out user
      description: |
        Logout user
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/rid"
        - $ref: "#/components/parameters/anti-csrf"
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Logout user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "sAccessToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax sRefreshToken=; Path=/auth/session/refresh; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: Set to an empty string to trigger token clearing in the client SDK
              schema:
                type: string
                example: ""
            st-refresh-token:
              description: Set to an empty string to trigger token clearing in the client SDK
              schema:
                type: string
                example: ""
            front-token:
              schema:
                type: string
                example: remove
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/session/refresh:
    post:
      tags:
        - Session Recipe
      operationId: refresh
      summary: Refresh user session
      description: |
        Refresh the user session
      security:
        - RefreshTokenBearer: []
        - RefreshTokenCookie: []
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/rid"
        - $ref: "#/components/parameters/anti-csrf"
      responses:
        "200":
          description: Refresh users
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            st-refresh-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: If enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token, st-refresh-token"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/signin:
    post:
      tags:
        - EmailPassword Recipe
      operationId: signIn
      summary: Sign in with email
      description: |
        Signin a user with email ID and password
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/rid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - formFields
              properties:
                formFields:
                  $ref: "#/components/schemas/formFields"
                shouldTryLinkingWithSessionUser:
                  type: boolean
                  example: false
      responses:
        "200":
          description: Sign in Response
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            st-refresh-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: If enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token, st-refresh-token"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/signInResponse"
                  - $ref: "#/components/schemas/signInNotAllowedResponse"
                  - $ref: "#/components/schemas/fieldErrorResponse"
                  - $ref: "#/components/schemas/wrongCredentialsResponse"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "403":
          $ref: "#/components/responses/403-factor-setup"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/signup:
    post:
      tags:
        - EmailPassword Recipe
      operationId: signUp
      summary: Sign up with email
      description: |
        Signup a user with email ID and password
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/emailPasswordRid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - formFields
              properties:
                formFields:
                  $ref: "#/components/schemas/formFields"
                shouldTryLinkingWithSessionUser:
                  type: boolean
                  example: false
      responses:
        "200":
          description: Sign up Response
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            st-refresh-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: If enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token, st-refresh-token"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/signupResponse"
                  - $ref: "#/components/schemas/signUpNotAllowedResponse"
                  - $ref: "#/components/schemas/fieldErrorResponse"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "403":
          $ref: "#/components/responses/403-factor-setup"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/signup/email/exists:
    get:
      deprecated: true
      tags:
        - EmailPassword Recipe
      operationId: emailExistsDepr
      summary: Check email exists (deprecated)
      description: |
        Check if an email exists
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/emailPasswordRid"
        - $ref: "#/components/parameters/email"
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      exists:
                        $ref: "#/components/schemas/exists"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/emailpassword/email/exists:
    get:
      tags:
        - EmailPassword Recipe
      operationId: emailExists
      summary: Check email exists
      description: |
        Check if an email exists
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/emailPasswordRid"
        - $ref: "#/components/parameters/email"
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      exists:
                        $ref: "#/components/schemas/exists"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/user/password/reset/token:
    post:
      tags:
        - EmailPassword Recipe
      operationId: passwordResetToken
      summary: Generate password reset token
      description: |
        Generate a new reset password token for this user
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/emailPasswordRid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: "#/components/schemas/formFields"
              example: { formFields: [{ id: "email", value: "test@email.com" }] }
      responses:
        "200":
          description: Generate a new reset password token for this user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/passwordResetTokenResponse"
                  - $ref: "#/components/schemas/passwordResetNotAllowedResponse"
                  - $ref: "#/components/schemas/fieldErrorResponse"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/user/password/reset:
    post:
      tags:
        - EmailPassword Recipe
      operationId: passwordReset
      summary: Reset user password
      description: |
        Reset a password using password reset token
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/emailPasswordRid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  $ref: "#/components/schemas/method"
                formfields:
                  $ref: "#/components/schemas/formFields"
                token:
                  $ref: "#/components/schemas/token"
              example:
                {
                  method: "token",
                  formFields: [{ id: "password", value: "newPass123" }],
                  token: "ZTRiOTBjNz...jI5MTZlODkxw",
                }
      responses:
        "200":
          description: Reset a password using password reset token
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/passwordResetResponse"
                  - $ref: "#/components/schemas/passwordResetErrorResponse"
                  - $ref: "#/components/schemas/fieldErrorResponse"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/signinup:
    post:
      tags:
        - ThirdParty Recipe
      operationId: signInUp
      summary: Sign in/up with third party
      description: |
        Signin/up a user
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/thirdPartyRid"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - thirdPartyId
                    - redirectURIInfo
                  properties:
                    thirdPartyId:
                      $ref: "#/components/schemas/thirdPartyId"
                    clientType:
                      $ref: "#/components/schemas/clientType"
                    redirectURIInfo:
                      type: object
                      required:
                        - redirectURIOnProviderDashboard
                        - redirectURIQueryParams
                      properties:
                        redirectURIOnProviderDashboard:
                          $ref: "#/components/schemas/redirectURI"
                        redirectURIQueryParams:
                          type: object
                          example:
                            code: "neqmpdsfuqe141m5lk437867masdf"
                            state: "ljayfgqewertbh13245njw0"
                        pkceCodeVerifier:
                          type: string
                          example: abcd1234
                    shouldTryLinkingWithSessionUser:
                      type: boolean
                      example: false
                - type: object
                  required:
                    - thirdPartyId
                    - oAuthTokens
                  properties:
                    thirdPartyId:
                      $ref: "#/components/schemas/thirdPartyId"
                    clientType:
                      $ref: "#/components/schemas/clientType"
                    oAuthTokens:
                      $ref: "#/components/schemas/oAuthTokens"
                    shouldTryLinkingWithSessionUser:
                      type: boolean
                      example: false
      responses:
        "200":
          description: Signin/up a user
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            st-refresh-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: If enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token, st-refresh-token"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/signinupResponse"
                  - $ref: "#/components/schemas/signinupErrorResponse"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "403":
          $ref: "#/components/responses/403-factor-setup"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/authorisationurl:
    get:
      tags:
        - ThirdParty Recipe
      operationId: authorisationUrl
      summary: Get third party auth URL
      description: |
        Get the thirdparty provider's authorisation URL to which the user should be redirected to.
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/thirdPartyRid"
        - in: query
          name: thirdPartyId
          required: true
          schema:
            $ref: "#/components/schemas/thirdPartyId"
        - in: query
          name: redirectURIOnProviderDashboard
          required: true
          schema:
            $ref: "#/components/schemas/redirectURI"
        - in: query
          name: clientType
          required: false
          schema:
            $ref: "#/components/schemas/clientType"
      responses:
        "200":
          description: Get the OAuth authorisation URL
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - status
                      - url
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      urlWithQueryParams:
                        type: string
                        example: https://providerdomain.com/authorize?client_id=..&scope=..&access_type=..
                      pkceCodeVerifier:
                        type: string
                        example: abcd1234
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/loginmethods:
    get:
      tags:
        - Multitenancy Recipe
      operationId: loginmethods
      summary: Get enabled login methods
      description: |
        Get enabled login methods: Returns recipes with their enabled setting and recipe specific configuration.
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/multitenancyRid"
        - in: query
          name: clientType
          required: false
          schema:
            $ref: "#/components/schemas/clientType"
      responses:
        "200":
          description: Get enabled login methods
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - status
                      - recipes
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      recipes:
                        type: object
                        required:
                          - emailPassword
                          - thirdParty
                          - passwordless
                          - firstFactors
                        properties:
                          emailPassword:
                            type: object
                            required:
                              - enabled
                            properties:
                              enabled:
                                type: boolean
                                example: true
                          thirdParty:
                            type: object
                            required:
                              - enabled
                              - providers
                            properties:
                              enabled:
                                type: boolean
                                example: true
                              providers:
                                type: array
                                items:
                                  type: object
                                  required:
                                    - id
                                  properties:
                                    id:
                                      $ref: "#/components/schemas/thirdPartyId"
                                    name:
                                      type: string
                                      example: Google
                          passwordless:
                            type: object
                            required:
                              - enabled
                            properties:
                              enabled:
                                type: boolean
                                example: true
                          firstFactors:
                            type: array
                            items:
                              type: string
                  - $ref: "#/components/schemas/generalErrorResponse"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/callback/apple:
    post:
      tags:
        - ThirdParty Recipe
      operationId: thirdPartyCallbackApple
      summary: Handle Apple sign in
      description: |
        Handles sign in with the apple.
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: "The Authorization code which will be exchanged for an access token"
                state:
                  type: string
                  description: "A unique string used to mitigate CSRF attacks"
      responses:
        "303":
          description: Redirects the user to the client's app.

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/user/email/verify/token:
    post:
      tags:
        - EmailVerification Recipe
      operationId: verifyEmailToken
      summary: Send email verification
      description: |
        Send email verification email
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/emailVerificationRid"
        - $ref: "#/components/parameters/anti-csrf"
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []
      responses:
        "200":
          description: Send email verification email
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["OK", "EMAIL_ALREADY_VERIFIED_ERROR"]
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/user/email/verify:
    post:
      tags:
        - EmailVerification Recipe
      operationId: verifyEmail
      summary: Verify email address
      description: |
        Verify an email
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/emailVerificationRid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  $ref: "#/components/schemas/method"
                token:
                  $ref: "#/components/schemas/token"
      responses:
        "200":
          description: Verify an email
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["OK", "EMAIL_VERIFICATION_INVALID_TOKEN_ERROR"]
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/user/email/verify:
    get:
      tags:
        - EmailVerification Recipe
      operationId: getVerifyEmail
      summary: Check email verification status
      description: |
        Checks if an email is verified and adds this information into the access token payload as well
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/emailVerificationRid"
        - $ref: "#/components/parameters/anti-csrf"
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []

      responses:
        "200":
          description: Checks if an email is verified and adds this information into the access token payload as well
          headers:
            Set-Cookie:
              description: Sent in cookie-based sessions if the access token payload is updated
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: Sent in cookie-based sessions if the access token payload is updated
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: Sent if enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              description: Sent if the access token payload is updated
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token"
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      isVerified:
                        type: boolean
                        example: true
                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/jwt/jwks.json:
    get:
      tags:
        - JWT Recipe
      operationId: getJWKS
      summary: Get JWT keys
      description: |
        Get all JSON web keys for JWT verification
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      responses:
        "200":
          description: Retrieve JWKs for JWT verification
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      keys:
                        type: array
                        items:
                          type: object
                          description: A JWK that can be used to verify a JWT
                          properties:
                            alg:
                              type: string
                              description: The algorithm to use when creating the JWT.
                              enum: ["RS256"]
                            kty:
                              type: string
                              example: RSA
                            use:
                              type: string
                              example: sig
                            kid:
                              type: string
                              description: Unique identifier for the JWK
                            n:
                              type: string
                              description: Modulus for the key
                            e:
                              type: string
                              description: Exponent for the key
                  - $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/.well-known/openid-configuration:
    get:
      tags:
        - OpenId Recipe
      operationId: getOpenIdDiscoveryConfiguration
      summary: Get OpenID config
      description: |
        Get OpenID discovery configuration
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      responses:
        "200":
          description: Retrieve OpenID configuration
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      issuer:
                        type: string
                        description: URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier (https://openid.net/specs/openid-connect-discovery-1_0.html section 3)
                        example: https://api.example.com/auth
                      jwks_uri:
                        type: string
                        description: URL for fetching a list JsonWebKey, used for JWT signature verification. Refer to /jwt/jwks.json API in the JWT recipe for JWK details
                        example: https://api.example.com/auth/jwt/jwks.json
                      authorization_endpoint:
                        type: string
                        description: URL of the authorization endpoint
                        example: https://api.example.com/auth/oauth/authorize
                      token_endpoint:
                        type: string
                        description: URL of the token endpoint
                        example: https://api.example.com/auth/oauth/token
                      userinfo_endpoint:
                        type: string
                        description: URL of the userinfo endpoint
                        example: https://api.example.com/auth/oauth/userinfo
                      revocation_endpoint:
                        type: string
                        description: URL of the token revocation endpoint
                        example: https://api.example.com/auth/oauth/revoke
                      token_introspection_endpoint:
                        type: string
                        description: URL of the token introspection endpoint
                        example: https://api.example.com/auth/oauth/introspect
                      end_session_endpoint:
                        type: string
                        description: URL of the end session endpoint
                        example: https://api.example.com/auth/oauth/end_session
                      subject_types_supported:
                        type: array
                        items:
                          type: string
                          enum: ["public"]
                      id_token_signing_alg_values_supported:
                        type: array
                        items:
                          type: string
                          enum: ["RS256"]
                      response_types_supported:
                        type: array
                        items:
                          type: string
                          enum: ["code", "id_token", "id_token token"]
                  - $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/oauth/login:
    get:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthLoginGET
      summary: Continue OAuth login
      description: |
        Continues the OAuth2 login flow after the login page
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - in: query
          name: loginChallenge
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The next url in the login flow
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      frontendRedirectTo:
                        type: string
                        description: The URL to redirect the user to
                        example: https://client.com/callback?code=asdf1234567890&status=asdf1234
                  - $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400-oauth-error"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/oauth/auth:
    get:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthAuthGET
      summary: Start OAuth login
      description: |
        Starts the OAuth2 login flow - for a detailed description of all input parameters please see the OAuth2 and OpenID Connect Core specs
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      responses:
        "302":
          description: Redirects the user to the login page or back to the client app
          headers:
            Location:
              schema:
                type: string
                example: https://auth.example.com/auth/?loginChallenge=1234567890

        "200":
          description: A general error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400-oauth-error"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/oauth/token:
    post:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthTokenPOST
      summary: Exchange OAuth grant
      description: |
        Exchanges an OAuth2 grant (e.g.: authorization code) for an access token (and optionally a refresh/id token) - for a detailed description of all input parameters please see the OAuth2 and OpenID Connect Core specs
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      responses:
        "200":
          description: Issued tokens
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - expires_in
                      - token_type
                      - scope
                    properties:
                      access_token:
                        type: string
                        description: "The access token issued by the authorization server."

                      expires_in:
                        type: number
                        description: 'The lifetime in seconds of the access token (integer). For example, the value "3600" denotes that the access token will expire in one hour from the time the response was generated.'

                      id_token:
                        type: string
                        description: "To retrieve a refresh token request the id_token scope."

                      refresh_token:
                        type: string
                        description: 'The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope "offline" to your access token request.'

                      scope:
                        type: string
                        description: "The scope of the access token"

                      token_type:
                        type: string
                        description: "The type of the token issued"
                  - $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400-oauth-error"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/oauth/userinfo:
    get:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthUserInfoGET
      summary: Get OAuth user info
      description: |
        Retrieves user information based on the access token passed in the authorization header
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      security:
        - OAuth2AccessTokenBearer: []
      responses:
        "200":
          description: Retrieved user information
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - sub
                    properties:
                      sub:
                        $ref: "#/components/schemas/userId"
                      email:
                        type: string
                        description: The email of the user
                        example: johndoe@gmail.com
                      email_verified:
                        type: boolean
                        description: Whether the email is verified
                        example: true
                      emails:
                        type: array
                        items:
                          type: string
                          example: johndoe@gmail.com
                      phoneNumber:
                        type: string
                        description: The phoneNumber of the user
                        example: "0036701234567"
                      phoneNumber_verified:
                        type: boolean
                        description: Whether the phoneNumber is verified
                        example: true
                      phoneNumbers:
                        type: array
                        items:
                          type: string
                          example: "0036701234567"
                      roles:
                        type: array
                        items:
                          type: string
                          example: admin
                      permissions:
                        type: array
                        items:
                          type: string
                          example: "user:create"

                  - $ref: "#/components/schemas/generalErrorResponse"

        "401":
          description: The access token is expired, revoked or malformed
          headers:
            WWW-Authenticate:
              schema:
                type: string
                example: 'Bearer error="invalid_token"'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid or expired OAuth2 access token

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/oauth/revoke:
    post:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthRevokePOST
      summary: Revoke OAuth token
      description: |
        Revokes an access/refresh token - the client id and secret can also be provided in an authorization header using the Basic scheme
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                client_id:
                  type: string
                  example: st-cl-test-client
                client_secret:
                  type: string
                  example: superSecret
          x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                client_id:
                  type: string
                  example: st-cl-test-client
                client_secret:
                  type: string
                  example: superSecret
      responses:
        "200":
          description: Revoked the access/refresh token
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - status
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"

                  - $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400-oauth-error"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/oauth/introspect:
    post:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthIntrospectPOST
      summary: Introspect OAuth token
      description: |
        Introspects an access/refresh token
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        "200":
          description: Information about the token
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - active
                    properties:
                      active:
                        type: boolean
                        description: Whether the token is active or not
                        example: true
                      token_type:
                        type: string
                        description: The type of the token
                        example: Bearer
                      token_use:
                        type: string
                        description: The use of the token
                        example: access_token
                      sub:
                        $ref: "#/components/schemas/userId"
                      email:
                        type: string
                        description: The email of the user
                        example: johndoe@gmail.com
                      email_verified:
                        type: boolean
                        description: Whether the email is verified
                        example: true
                      emails:
                        type: array
                        items:
                          type: string
                          example: johndoe@gmail.com
                      phoneNumber:
                        type: string
                        description: The phoneNumber of the user
                        example: "0036701234567"
                      phoneNumber_verified:
                        type: boolean
                        description: Whether the phoneNumber is verified
                        example: true
                      phoneNumbers:
                        type: array
                        items:
                          type: string
                          example: "0036701234567"
                      roles:
                        type: array
                        items:
                          type: string
                          example: admin
                      permissions:
                        type: array
                        items:
                          type: string
                          example: "user:create"

                  - $ref: "#/components/schemas/generalErrorResponse"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/oauth/end_session:
    post:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthEndSessionPOST
      summary: End OAuth session
      description: |
        Redirects the user to a page where they can log out and revoke the oauth tokens - for a detailed description of input parameters please see the user initiated logout spec
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id_token_hint:
                  type: string
                client_id:
                  type: string
                  example: st-cl-example-client
                post_logout_redirect_uri:
                  type: string
                  example: https://client.example.com/logoutCallback
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id_token_hint:
                  type: string
                client_id:
                  type: string
                  example: st-cl-example-client
                post_logout_redirect_uri:
                  type: string
                  example: https://client.example.com/logoutCallback
      responses:
        "302":
          description: Redirects the user to the logout page or back to the client app
          headers:
            Location:
              schema:
                type: string
                example: https://auth.example.com/auth/oauth/logout?logoutChallenge=1234567890

        "200":
          description: A general error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400-oauth-error"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"
    get:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthEndSessionGET
      summary: End session redirect
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - in: query
          name: id_token_hint
          schema:
            type: string
        - in: query
          name: client_id
          schema:
            type: string
            example: st-cl-example-client
        - in: query
          name: post_logout_redirect_uri
          schema:
            type: string
            example: https://client.example.com/logoutCallback
      description: |
        Redirects the user to a page where they can log out and revoke the oauth tokens
      responses:
        "302":
          description: Redirects the user to the logout page or back to the client app
          headers:
            Location:
              schema:
                type: string
                example: https://auth.example.com/auth/oauth/logout?logoutChallenge=1234567890

        "200":
          description: A general error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400-oauth-error"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/oauth/logininfo:
    get:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthLoginInfoGET
      summary: Get OAuth login info
      description: |
        Retrieves information about the OAuth2 login
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - in: query
          name: loginChallenge
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Information about the current login flow
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - status
                      - info
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      info:
                        type: object
                        description: Information about the current login flow
                        required:
                          - clientId
                        properties:
                          clientId:
                            type: string
                            description: The ID of the client.
                          clientName:
                            type: string
                            description: The name of the client.
                          tosUri:
                            type: string
                            description: The URI of the client's terms of service.
                          policyUri:
                            type: string
                            description: The URI of the client's privacy policy.
                          logoUri:
                            type: string
                            description: The URI of the client's logo.
                          clientUri:
                            type: string
                            description: The URI of the client we can link to on the login page

                  - $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400-oauth-error"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/oauth/logout:
    post:
      tags:
        - OAuth2Provider Recipe
      operationId: oauthLogoutPOST
      summary: Logout OAuth user
      description: |
        Logs out the user and revokes the access/refresh tokens based on the id_token_hint passed to the end_session endpoint
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - logoutChallenge
              properties:
                logoutChallenge:
                  type: string
          x-www-form-urlencoded:
            schema:
              type: object
              required:
                - logoutChallenge
              properties:
                logoutChallenge:
                  type: string
      responses:
        "200":
          description: Accepts the logout request specified by the challenge and gets where the user should be redirected to
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      frontendRedirectTo:
                        type: string
                        description: The URL to redirect the user to
                        example: https://auth.example.com/auth/oauth/logout?logoutChallenge=1234567890
                  - $ref: "#/components/schemas/generalErrorResponse"

        "400":
          $ref: "#/components/responses/400-oauth-error"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /example:
    get:
      tags:
        - App API
      operationId: exampleAppAPI
      summary: Test authentication
      description: |
        Use this endpoint to check if your request are authenticated properly.
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
      responses:
        "200":
          description: The session passed verification and went through the application code

        "401":
          description: The session doesn't exists or if it needs to be refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: unauthorised or try refresh token
                    example: try refresh token

        "403":
          description: The session exists, but didn't pass a claim validator
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: invalid claim
                  claimValidationErrors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: st-ev
                        reason:
                          type: object
                          example:
                            message: "value does not exist"
                            expectedValue: val
                            actualValue: claimVal

  /{apiBasePath}/{tenantId}/webauthn/register/options:
    post:
      tags:
        - WebAuthn Recipe
      operationId: webauthnRegisterOptions
      summary: Get WebAuthn registration options
      description: |
        Get WebAuthn registration options for a user
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/webauthnRid"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - email
                  properties:
                    email:
                      $ref: "#/components/schemas/email"
                    displayName:
                      type: string
                      example: "John Doe"
                - type: object
                  required:
                    - recoverAccountToken
                  properties:
                    recoverAccountToken:
                      type: string
                      example: "abc123..."
      responses:
        "200":
          description: WebAuthn registration options
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      webauthnGeneratedOptionsId:
                        type: string
                        example: "opt_123..."
                      createdAt:
                        type: string
                        example: "2024-03-20T10:00:00Z"
                      expiresAt:
                        type: string
                        example: "2024-03-20T10:05:00Z"
                      rp:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "example.com"
                          name:
                            type: string
                            example: "Example Site"
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "user_123..."
                          name:
                            type: string
                            example: "john@example.com"
                          displayName:
                            type: string
                            example: "John Doe"
                      challenge:
                        type: string
                        example: "base64challenge..."
                      timeout:
                        type: number
                        example: 300000
                      excludeCredentials:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            type:
                              type: string
                              enum: ["public-key"]
                            transports:
                              type: array
                              items:
                                type: string
                                enum: ["ble", "hybrid", "internal", "nfc", "usb"]
                      attestation:
                        type: string
                        enum: ["none", "indirect", "direct", "enterprise"]
                      pubKeyCredParams:
                        type: array
                        items:
                          type: object
                          properties:
                            alg:
                              type: number
                              example: -7
                            type:
                              type: string
                              example: "public-key"
                      authenticatorSelection:
                        type: object
                        properties:
                          requireResidentKey:
                            type: boolean
                          residentKey:
                            type: string
                            enum: ["required", "preferred", "discouraged"]
                          userVerification:
                            type: string
                            enum: ["required", "preferred", "discouraged"]
                  - $ref: "#/components/schemas/generalErrorResponse"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_OPTIONS_ERROR", "RECOVER_ACCOUNT_TOKEN_INVALID_ERROR"]
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_EMAIL_ERROR"]
                      err:
                        type: string
                        example: "Invalid email"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/webauthn/signin/options:
    post:
      tags:
        - WebAuthn Recipe
      operationId: webauthnSignInOptions
      summary: Get WebAuthn sign in options
      description: |
        Get WebAuthn sign in options
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/webauthnRid"
      responses:
        "200":
          description: WebAuthn sign in options
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      webauthnGeneratedOptionsId:
                        type: string
                        example: "opt_123..."
                      createdAt:
                        type: string
                        example: "2024-03-20T10:00:00Z"
                      expiresAt:
                        type: string
                        example: "2024-03-20T10:05:00Z"
                      rpId:
                        type: string
                        example: "example.com"
                      challenge:
                        type: string
                        example: "base64challenge..."
                      timeout:
                        type: number
                        example: 300000
                      userVerification:
                        type: string
                        enum: ["required", "preferred", "discouraged"]
                  - $ref: "#/components/schemas/generalErrorResponse"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_OPTIONS_ERROR"]
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/webauthn/signup:
    post:
      tags:
        - WebAuthn Recipe
      operationId: webauthnSignUp
      summary: Sign up with WebAuthn
      description: |
        Sign up a user with WebAuthn
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/webauthnRid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - webauthnGeneratedOptionsId
                - credential
              properties:
                webauthnGeneratedOptionsId:
                  type: string
                  example: "opt_123..."
                credential:
                  $ref: "#/components/schemas/registrationPayload"
                shouldTryLinkingWithSessionUser:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Sign up response
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            st-refresh-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: If enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token, st-refresh-token"
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      user:
                        $ref: "#/components/schemas/user"
                  - $ref: "#/components/schemas/generalErrorResponse"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_CREDENTIALS_ERROR", "EMAIL_ALREADY_EXISTS_ERROR"]
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/webauthn/signin:
    post:
      tags:
        - WebAuthn Recipe
      operationId: webauthnSignIn
      summary: Sign in with WebAuthn
      description: |
        Sign in a user with WebAuthn
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/webauthnRid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - webauthnGeneratedOptionsId
                - credential
              properties:
                webauthnGeneratedOptionsId:
                  type: string
                  example: "opt_123..."
                credential:
                  $ref: "#/components/schemas/authenticationPayload"
                shouldTryLinkingWithSessionUser:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Sign in response
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              schema:
                type: string
                example: "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
            st-access-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            st-refresh-token:
              description: In header-based sessions
              schema:
                $ref: "#/components/schemas/token"
            anti-csrf:
              description: If enabled by the user
              schema:
                $ref: "#/components/schemas/token"
            front-token:
              schema:
                $ref: "#/components/schemas/token"
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: "anti-csrf, front-token, st-access-token, st-refresh-token"
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      user:
                        $ref: "#/components/schemas/user"
                  - $ref: "#/components/schemas/generalErrorResponse"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_CREDENTIALS_ERROR"]
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["SIGN_IN_NOT_ALLOWED"]
                      reason:
                        type: string
                        example: "Sign in not allowed"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/webauthn/recover/account/token:
    post:
      tags:
        - WebAuthn Recipe
      operationId: webauthnGenerateRecoverAccountToken
      summary: Generate WebAuthn recovery token
      description: |
        Generate a recovery token for a WebAuthn account
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/webauthnRid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  $ref: "#/components/schemas/email"
      responses:
        "200":
          description: Recovery token generation response
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                  - $ref: "#/components/schemas/generalErrorResponse"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["RECOVER_ACCOUNT_NOT_ALLOWED"]
                      reason:
                        type: string
                        example: "Recover account not allowed"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/webauthn/recover/account:
    post:
      tags:
        - WebAuthn Recipe
      operationId: webauthnRecoverAccount
      summary: Recover WebAuthn account
      description: |
        Recover a WebAuthn account
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/webauthnRid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - webauthnGeneratedOptionsId
                - credential
              properties:
                token:
                  type: string
                  example: "abc123..."
                webauthnGeneratedOptionsId:
                  type: string
                  example: "opt_123..."
                credential:
                  $ref: "#/components/schemas/registrationPayload"
      responses:
        "200":
          description: Account recovery response
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      user:
                        $ref: "#/components/schemas/user"
                      email:
                        $ref: "#/components/schemas/email"
                  - $ref: "#/components/schemas/generalErrorResponse"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum:
                          [
                            "INVALID_CREDENTIALS_ERROR",
                            "RECOVER_ACCOUNT_TOKEN_INVALID_ERROR",
                            "OPTIONS_NOT_FOUND_ERROR",
                            "INVALID_OPTIONS_ERROR",
                          ]
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_AUTHENTICATOR_ERROR"]
                      reason:
                        type: string
                        example: "Invalid authenticator"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/webauthn/credential:
    post:
      tags:
        - WebAuthn Recipe
      operationId: webauthnRegisterCredential
      summary: Register WebAuthn credential
      description: |
        Register a new WebAuthn credential for an existing user
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/webauthnRid"
        - $ref: "#/components/parameters/anti-csrf"
      security:
        - AccessTokenBearer: []
        - AccessTokenCookie: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - webauthnGeneratedOptionsId
                - credential
              properties:
                webauthnGeneratedOptionsId:
                  type: string
                  example: "opt_123..."
                credential:
                  $ref: "#/components/schemas/registrationPayload"
      responses:
        "200":
          description: Credential registration response
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                  - $ref: "#/components/schemas/generalErrorResponse"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum:
                          [
                            "INVALID_CREDENTIALS_ERROR",
                            "OPTIONS_NOT_FOUND_ERROR",
                            "INVALID_OPTIONS_ERROR",
                            "INVALID_AUTHENTICATOR_ERROR",
                          ]
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["REGISTER_CREDENTIAL_NOT_ALLOWED", "INVALID_AUTHENTICATOR_ERRORp"]
                      reason:
                        type: string
                        example: "Register credential not allowed"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /{apiBasePath}/{tenantId}/webauthn/email/exists:
    get:
      tags:
        - WebAuthn Recipe
      operationId: webauthnEmailExists
      summary: Check WebAuthn email exists
      description: |
        Check if a WebAuthn email exists
      parameters:
        - $ref: "#/components/parameters/apiBasePath"
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/webauthnRid"
        - $ref: "#/components/parameters/email"
      responses:
        "200":
          description: Email existence check response
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      exists:
                        type: boolean
                        example: true
                  - $ref: "#/components/schemas/generalErrorResponse"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

components:
  parameters:
    rid:
      name: rid
      in: header
      description: The recipe ID for the request
      example: session
      schema:
        type: string

    emailPasswordRid:
      name: rid
      in: header
      description: The email password recipe ID
      example: emailpassword
      schema:
        type: string

    thirdPartyRid:
      name: rid
      in: header
      description: The third party recipe ID
      example: thirdparty
      schema:
        type: string

    passwordlessRid:
      name: rid
      in: header
      description: The passwordless recipe ID
      example: passwordless
      schema:
        type: string

    emailVerificationRid:
      name: rid
      in: header
      description: The email verification recipe ID
      example: emailverification
      schema:
        type: string

    multitenancyRid:
      name: rid
      in: header
      description: The multitenancy recipe ID
      example: multitenancy
      schema:
        type: string

    multiFactorAuthRid:
      name: rid
      in: header
      description: The multi factor auth recipe ID
      example: multifactorauth
      schema:
        type: string

    totpRid:
      name: rid
      in: header
      description: The TOTP recipe ID
      example: totp
      schema:
        type: string

    anti-csrf:
      name: anti-csrf
      in: header
      description: This will only be here if enabled by the user.
      schema:
        $ref: "#/components/schemas/token"

    apiBasePath:
      name: apiBasePath
      in: path
      description: Its value depends on the apiBasePath set by the user
      required: true
      schema:
        type: string
        example: auth

    tenantId:
      name: tenantId
      in: path
      description: The tenant against which the request is made. If left empty, the default tenant will be used.
      required: false
      schema:
        type: string
        example: public

    email:
      name: email
      in: query
      description: The email address to check
      required: true
      schema:
        type: string
        example: johndoe@gmail.com

    phoneNumber:
      name: phoneNumber
      in: query
      description: The phone number to check
      required: true
      schema:
        type: string
        example: "0036701234567"

    webauthnRid:
      name: rid
      in: header
      description: The WebAuthn recipe ID
      example: webauthn
      schema:
        type: string

  responses:
    500:
      description: Internal server error
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/internalError"

    400:
      description: Bad request error
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/badRequest"

    404:
      description: Resource not found error
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/notFound"

    400-oauth-error:
      description: OAuth2 specific error response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: The OAuth2 error code
                example: invalid_request
              error_description:
                type: string
                description: Human readable error description
                example: "Unsupported grant type: password"

    403-factor-setup:
      description: A claim validation error happened during factor setup
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: invalid claim
                  claimValidationErrors:
                    type: array
                    description: List of claim validation errors
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The claim ID
                          example: st-ev
                        reason:
                          type: object
                          description: The reason for the validation error
                          example:
                            message: "wrong value"
                            expectedValue: true
                            actualValue: false
              - type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: invalid claim
                  claimValidationErrors:
                    type: array
                    description: List of claim validation errors
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The claim ID
                          example: st-mfa
                        reason:
                          type: string
                          description: The reason for the validation error
                          example: "Completed factors in the session does not satisfy the MFA requirements for auth"

  schemas:
    statusOK:
      type: string
      description: Success status indicator
      enum:
        - OK

    generalErrorResponse:
      type: object
      description: Generic error response
      properties:
        status:
          type: string
          description: Error status code
          enum:
            - GENERAL_ERROR
        message:
          type: string
          description: Error message

    token:
      type: string
      description: A security token used for authentication
      example: ZTRiOTBjNz...jI5MTZlODkxw

    cookie:
      type: string
      description: HTTP cookie string
      example: ed3164...06c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax

    id:
      type: string
      description: Field identifier
      enum: ["email", "password"]

    userId:
      type: string
      description: Unique identifier for a user
      example: fa7a0841-b533-4478-95533-0fde890c3483

    user:
      type: object
      description: User information
      properties:
        id:
          $ref: "#/components/schemas/userId"
        timeJoined:
          type: number
          description: Timestamp when user joined
          example: 1638433545183
        isPrimaryUser:
          type: boolean
          description: Whether this is the primary user account
          example: true
        tenantIds:
          type: array
          description: List of tenant IDs the user belongs to
          items:
            type: string
            example: public
        emails:
          type: array
          description: List of user's email addresses
          items:
            type: string
            example: johndoe@gmail.com
        phoneNumbers:
          type: array
          description: List of user's phone numbers
          items:
            type: string
            example: +36201234123
        thirdParty:
          type: array
          description: List of third party accounts
          items:
            type: object
            properties:
              id:
                type: string
                description: Third party provider ID
                example: google
              userId:
                type: string
                description: User ID in the third party system
                example: rq238mrq2389rvq123213
        loginMethods:
          type: array
          description: List of login methods available to the user
          items:
            type: object
            properties:
              recipeId:
                type: string
                description: The recipe ID for this login method
                enum: ["emailpassword", "thirdparty", "passwordless"]
              recipeUserId:
                $ref: "#/components/schemas/userId"
              verified:
                type: boolean
                description: Whether this login method is verified
                example: true
              tenantIds:
                type: array
                description: List of tenant IDs for this login method
                items:
                  type: string
                  example: public
              timeJoined:
                type: number
                description: Timestamp when this login method was added
                example: 1638433545183
              email:
                type: string
                description: Email address for this login method
                example: johndoe@gmail.com
              phoneNumber:
                type: string
                description: Phone number for this login method
                example: +36201234123
              thirdParty:
                type: object
                description: Third party information for this login method
                properties:
                  id:
                    type: string
                    description: Third party provider ID
                    example: google
                  userId:
                    type: string
                    description: User ID in the third party system
                    example: rq238mrq2389rvq123213

    email:
      type: string
      description: Email address
      example: johndoe@gmail.com

    phoneNumber:
      type: string
      description: Phone number
      example: "0036701234567"

    deviceId:
      type: string
      description: This should be saved on the starting device to enable the manual code entry flow.
      example: TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk=

    preAuthSessionId:
      type: string
      description: An identifier that used to identify the login attempt/device.
      example: kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs=

    thirdPartyId:
      type: string
      description: Third party provider identifier
      example: google

    exists:
      type: boolean
      description: Whether the resource exists
      example: true

    method:
      type: string
      description: The method to use for the operation
      example: "token"

    code:
      $ref: "#/components/schemas/token"

    authCodeResponse:
      description: OAuth authorization code response
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          description: OAuth access token
        id_token:
          type: string
          description: OAuth ID token

    redirectURI:
      type: string
      description: URL to redirect to after authentication
      example: https://yourdomain.com/callback

    clientType:
      type: string
      description: Type of client making the request
      example: web

    oAuthTokens:
      type: object
      description: OAuth tokens
      properties:
        access_token:
          type: string
          description: OAuth access token
          example: ZTRiOTBjNz...jI5MTZlODkxw
        id_token:
          type: string
          description: OAuth ID token
          example: ZTRiOTBjNz...jI5MTZlODkxw

    formFields:
      type: array
      description: Form fields for authentication
      items:
        type: object
        properties:
          id:
            $ref: "#/components/schemas/id"
          value:
            type: string
            description: Field value
      example: [{ id: email, value: johndoe@gmail.com }, { id: password, value: testPass123 }]

    signInResponse:
      type: object
      description: Sign in response
      properties:
        status:
          $ref: "#/components/schemas/statusOK"
        user:
          $ref: "#/components/schemas/user"

    signInNotAllowedResponse:
      type: object
      description: Sign in not allowed response
      properties:
        status:
          type: string
          description: Error status
          enum: ["SIGN_IN_NOT_ALLOWED"]
        reason:
          type: string
          description: Reason why sign in is not allowed
          example: "Cannot sign in due to security reasons. Please try resetting your password, use a different login method or contact support. (ERR_CODE_008)"

    signupResponse:
      type: object
      description: Sign up response
      properties:
        status:
          $ref: "#/components/schemas/statusOK"
        user:
          $ref: "#/components/schemas/user"

    signUpNotAllowedResponse:
      type: object
      description: Sign up not allowed response
      properties:
        status:
          type: string
          description: Error status
          enum: ["SIGN_UP_NOT_ALLOWED"]
        reason:
          type: string
          description: Reason why sign up is not allowed
          example: "Cannot sign up due to security reasons. Please try resetting your password, use a different login method or contact support. (ERR_CODE_007)"

    passwordResetTokenResponse:
      type: object
      description: Password reset token response
      properties:
        status:
          $ref: "#/components/schemas/statusOK"

    passwordResetNotAllowedResponse:
      type: object
      description: Password reset not allowed response
      properties:
        status:
          type: string
          description: Error status
          enum: ["PASSWORD_RESET_NOT_ALLOWED"]
        reason:
          type: string
          description: Reason why password reset is not allowed
          example: "Token generation was not done because of account take over risk. Please contact support. (HAS_OTHER_EMAIL_OR_PHONE)"

    signinupResponse:
      type: object
      description: Sign in/up response
      properties:
        status:
          $ref: "#/components/schemas/statusOK"
        user:
          $ref: "#/components/schemas/user"
        createdNewRecipeUser:
          type: boolean
          description: Whether a new recipe user was created
          example: true

    passwordResetErrorResponse:
      type: object
      description: Password reset error response
      properties:
        status:
          type: string
          description: Error status
          enum: ["RESET_PASSWORD_INVALID_TOKEN_ERROR"]

    passwordResetResponse:
      type: object
      description: Password reset success response
      properties:
        status:
          type: string
          description: Success status
          enum: ["OK"]

    fieldErrorResponse:
      type: object
      description: Form field error response
      properties:
        status:
          type: string
          description: Error status
          enum: ["FIELD_ERROR"]
        formFields:
          type: array
          description: List of field errors
          items:
            type: object
            properties:
              id:
                type: string
                description: Field ID
                example: email
              error:
                type: string
                description: Error message
                example: "Error Message"

    wrongCredentialsResponse:
      type: object
      description: Wrong credentials error response
      properties:
        status:
          type: string
          description: Error status
          enum: ["WRONG_CREDENTIALS_ERROR"]

    signinupErrorResponse:
      description: Sign in/up error response
      oneOf:
        - type: object
          properties:
            status:
              type: string
              description: Error status
              enum: ["NO_EMAIL_GIVEN_BY_PROVIDER"]

        - type: object
          properties:
            status:
              type: string
              description: Error status
              enum: ["SIGN_IN_UP_NOT_ALLOWED"]
            reason:
              type: string
              description: Reason why sign in/up is not allowed
              example: "Cannot sign in / up due to security reasons. Please contact support. (IS_SIGN_IN_ALLOWED_FALSE)"

    internalError:
      type: string
      description: Internal server error message
      enum:
        - Internal Error

    badRequest:
      type: string
      description: Bad request error message
      enum:
        - Bad request

    notFound:
      type: string
      description: Not found error message
      enum:
        - Not Found

    registrationPayload:
      type: object
      description: WebAuthn registration payload
      required:
        - id
        - rawId
        - response
        - type
      properties:
        id:
          type: string
          description: Credential ID
          example: "cred_123..."
        rawId:
          type: string
          description: Raw credential ID
          example: "base64rawid..."
        authenticatorAttachment:
          type: string
          description: Type of authenticator
          enum: ["platform", "cross-platform"]
        clientExtensionResults:
          type: object
          description: Client extension results
          additionalProperties: true
        response:
          type: object
          description: Registration response
          required:
            - clientDataJSON
            - attestationObject
          properties:
            clientDataJSON:
              type: string
              description: Client data JSON
              example: "base64clientdata..."
            attestationObject:
              type: string
              description: Attestation object
              example: "base64attestation..."
            authenticatorData:
              type: string
              description: Authenticator data
              example: "base64authenticatordata..."
            transports:
              type: array
              description: Supported transports
              items:
                type: string
                enum: ["usb", "nfc", "ble", "internal", "smart-card", "cable", "hybrid"]
            publicKey:
              type: string
              description: Public key
              example: "base64publickey..."
            publicKeyAlgorithm:
              type: number
              description: Public key algorithm
              example: -7
        type:
          type: string
          description: Credential type
          enum: ["public-key"]

    authenticationPayload:
      type: object
      description: WebAuthn authentication payload
      required:
        - id
        - rawId
        - response
        - type
      properties:
        id:
          type: string
          description: Credential ID
          example: "cred_123..."
        rawId:
          type: string
          description: Raw credential ID
          example: "base64rawid..."
        authenticatorAttachment:
          type: string
          description: Type of authenticator
          enum: ["platform", "cross-platform"]
        clientExtensionResults:
          type: object
          description: Client extension results
          additionalProperties: true
        response:
          type: object
          description: Authentication response
          required:
            - clientDataJSON
            - authenticatorData
            - signature
          properties:
            clientDataJSON:
              type: string
              description: Client data JSON
              example: "base64clientdata..."
            authenticatorData:
              type: string
              description: Authenticator data
              example: "base64authenticatordata..."
            signature:
              type: string
              description: Authentication signature
              example: "base64signature..."
            userHandle:
              type: string
              description: User handle
              example: "base64userhandle..."
        type:
          type: string
          description: Credential type
          enum: ["public-key"]

  securitySchemes:
    AccessTokenCookie:
      description: This is an HTTPOnly cookie, set by sign-in and refresh endpoints and present on requests that update the access token
      type: apiKey
      in: cookie
      name: sAccessToken

    AccessTokenBearer:
      description: Returned as the "st-access-token" header from sign-in and refresh endpoints and present on requests that update the access token payload
      type: http
      scheme: bearer

    RefreshTokenBearer:
      description: Returned as the "st-refresh-token" header from sign-in and refresh endpoints
      scheme: bearer
      type: http

    RefreshTokenCookie:
      description: This is an HTTPOnly cookie, set by the sign-in and refresh endpoints
      type: apiKey
      in: cookie
      name: sRefreshToken

    OAuth2AccessTokenBearer:
      description: An OAuth2 access token returned by the token or authorization endpoints during OAuth flows
      type: http
      scheme: bearer
